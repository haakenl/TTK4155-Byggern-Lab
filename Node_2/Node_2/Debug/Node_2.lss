
Node_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bc4  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080bc4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000090  20000434  00080ff8  00020434  2**2
                  ALLOC
  3 .stack        00000404  200004c4  00081088  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008c8  0008148c  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00005c37  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000f02  00000000  00000000  000260ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000fd4  00000000  00000000  00026fef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000198  00000000  00000000  00027fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  0002815b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000122d8  00000000  00000000  000282ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003feb  00000000  00000000  0003a583  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000543b4  00000000  00000000  0003e56e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000004c8  00000000  00000000  00092924  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	c8 08 00 20 71 03 08 00 6d 03 08 00 6d 03 08 00     ... q...m...m...
   80010:	6d 03 08 00 6d 03 08 00 6d 03 08 00 00 00 00 00     m...m...m.......
	...
   8002c:	6d 03 08 00 6d 03 08 00 00 00 00 00 6d 03 08 00     m...m.......m...
   8003c:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
   8004c:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
   8005c:	6d 03 08 00 5d 09 08 00 6d 03 08 00 00 00 00 00     m...]...m.......
   8006c:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
	...
   80084:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
   80094:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
   800a4:	00 00 00 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     ....m...m...m...
   800b4:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
   800c4:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
   800d4:	6d 03 08 00 6d 03 08 00 6d 03 08 00 6d 03 08 00     m...m...m...m...
   800e4:	6d 03 08 00 6d 03 08 00 e5 02 08 00 6d 03 08 00     m...m.......m...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080bc4 	.word	0x00080bc4

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080bc4 	.word	0x00080bc4
   80154:	20000438 	.word	0x20000438
   80158:	00080bc4 	.word	0x00080bc4
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80164:	1855      	adds	r5, r2, r1
   80166:	2908      	cmp	r1, #8
   80168:	bf98      	it	ls
   8016a:	2a08      	cmpls	r2, #8
   8016c:	d864      	bhi.n	80238 <can_init+0xd8>
   8016e:	460e      	mov	r6, r1
   80170:	2d08      	cmp	r5, #8
   80172:	dc61      	bgt.n	80238 <can_init+0xd8>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   80174:	4a32      	ldr	r2, [pc, #200]	; (80240 <can_init+0xe0>)
   80176:	6813      	ldr	r3, [r2, #0]
   80178:	f023 0301 	bic.w	r3, r3, #1
   8017c:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   8017e:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80180:	4b30      	ldr	r3, [pc, #192]	; (80244 <can_init+0xe4>)
   80182:	f44f 7440 	mov.w	r4, #768	; 0x300
   80186:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   80188:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   8018a:	f024 0403 	bic.w	r4, r4, #3
   8018e:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80190:	2403      	movs	r4, #3
   80192:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   80194:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   80196:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8019a:	4c2b      	ldr	r4, [pc, #172]	; (80248 <can_init+0xe8>)
   8019c:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a0:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801a4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801a8:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801ac:	6150      	str	r0, [r2, #20]
	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ae:	42a9      	cmp	r1, r5
   801b0:	dc40      	bgt.n	80234 <can_init+0xd4>
   801b2:	460a      	mov	r2, r1
   801b4:	2400      	movs	r4, #0
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b6:	46a1      	mov	r9, r4
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801b8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80240 <can_init+0xe0>
   801bc:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801c0:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801c4:	2701      	movs	r7, #1
   801c6:	0153      	lsls	r3, r2, #5
   801c8:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   801cc:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801d0:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801d4:	4443      	add	r3, r8
   801d6:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801da:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801de:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   801e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   801e6:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801ea:	fa07 f302 	lsl.w	r3, r7, r2
   801ee:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801f0:	3201      	adds	r2, #1
   801f2:	4295      	cmp	r5, r2
   801f4:	dae7      	bge.n	801c6 <can_init+0x66>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
   801f6:	b181      	cbz	r1, 8021a <can_init+0xba>
   801f8:	2300      	movs	r3, #0
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801fa:	4911      	ldr	r1, [pc, #68]	; (80240 <can_init+0xe0>)
   801fc:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80200:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80204:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80208:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   8020c:	f103 0210 	add.w	r2, r3, #16
   80210:	0152      	lsls	r2, r2, #5
   80212:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80214:	3301      	adds	r3, #1
   80216:	429e      	cmp	r6, r3
   80218:	d1f4      	bne.n	80204 <can_init+0xa4>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   8021a:	4b09      	ldr	r3, [pc, #36]	; (80240 <can_init+0xe0>)
   8021c:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   8021e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80222:	4a0a      	ldr	r2, [pc, #40]	; (8024c <can_init+0xec>)
   80224:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80226:	681a      	ldr	r2, [r3, #0]
   80228:	f042 0201 	orr.w	r2, r2, #1
   8022c:	601a      	str	r2, [r3, #0]

	return 0;
   8022e:	2000      	movs	r0, #0
   80230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t can_ier = 0;
   80234:	2400      	movs	r4, #0
   80236:	e7de      	b.n	801f6 <can_init+0x96>
		return 1; //Too many mailboxes is configured
   80238:	2001      	movs	r0, #1
}
   8023a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8023e:	bf00      	nop
   80240:	400b4000 	.word	0x400b4000
   80244:	400e0e00 	.word	0x400e0e00
   80248:	1000102b 	.word	0x1000102b
   8024c:	e000e100 	.word	0xe000e100

00080250 <can_init_def_tx_rx_mb>:
{
   80250:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80252:	2202      	movs	r2, #2
   80254:	2101      	movs	r1, #1
   80256:	4b01      	ldr	r3, [pc, #4]	; (8025c <can_init_def_tx_rx_mb+0xc>)
   80258:	4798      	blx	r3
}
   8025a:	bd08      	pop	{r3, pc}
   8025c:	00080161 	.word	0x00080161

00080260 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80260:	014b      	lsls	r3, r1, #5
   80262:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80266:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8026a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8026e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80272:	d033      	beq.n	802dc <can_receive+0x7c>
{
   80274:	b430      	push	{r4, r5}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   80276:	014b      	lsls	r3, r1, #5
   80278:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8027c:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80280:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80284:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80288:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   8028c:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80290:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80292:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80296:	f3c3 4303 	ubfx	r3, r3, #16, #4
   8029a:	7083      	strb	r3, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   8029c:	461d      	mov	r5, r3
   8029e:	b15b      	cbz	r3, 802b8 <can_receive+0x58>
   802a0:	3003      	adds	r0, #3
   802a2:	2300      	movs	r3, #0
		{
			if(i < 4)
   802a4:	2b03      	cmp	r3, #3
			{
				can_msg->data[i] = (char)(data_low & 0xff);
   802a6:	bfd9      	ittee	le
   802a8:	7002      	strble	r2, [r0, #0]
				data_low = data_low >> 8;
   802aa:	0a12      	lsrle	r2, r2, #8
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   802ac:	7004      	strbgt	r4, [r0, #0]
				data_high = data_high >> 8;
   802ae:	0a24      	lsrgt	r4, r4, #8
		for(int i = 0; i < can_msg->data_length;i++)
   802b0:	3301      	adds	r3, #1
   802b2:	3001      	adds	r0, #1
   802b4:	42ab      	cmp	r3, r5
   802b6:	d1f5      	bne.n	802a4 <can_receive+0x44>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802b8:	4b09      	ldr	r3, [pc, #36]	; (802e0 <can_receive+0x80>)
   802ba:	f101 0210 	add.w	r2, r1, #16
   802be:	0152      	lsls	r2, r2, #5
   802c0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802c4:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802c6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802ca:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802d2:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802d6:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802d8:	bc30      	pop	{r4, r5}
   802da:	4770      	bx	lr
		return 1;
   802dc:	2001      	movs	r0, #1
   802de:	4770      	bx	lr
   802e0:	400b4000 	.word	0x400b4000

000802e4 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   802e4:	b510      	push	{r4, lr}
   802e6:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   802e8:	4b1a      	ldr	r3, [pc, #104]	; (80354 <CAN0_Handler+0x70>)
   802ea:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   802ec:	f014 0f06 	tst.w	r4, #6
   802f0:	d014      	beq.n	8031c <CAN0_Handler+0x38>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   802f2:	f014 0f02 	tst.w	r4, #2
   802f6:	d11e      	bne.n	80336 <CAN0_Handler+0x52>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   802f8:	f014 0f04 	tst.w	r4, #4
   802fc:	d020      	beq.n	80340 <CAN0_Handler+0x5c>
		
		{
			can_receive(&message, 2);
   802fe:	2102      	movs	r1, #2
   80300:	a801      	add	r0, sp, #4
   80302:	4b15      	ldr	r3, [pc, #84]	; (80358 <CAN0_Handler+0x74>)
   80304:	4798      	blx	r3
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}
		
		
		if(message.id == 2){
   80306:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   8030a:	2b02      	cmp	r3, #2
   8030c:	d01c      	beq.n	80348 <CAN0_Handler+0x64>
			set_servo_pos(message.data[1]);
		}
			
		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   8030e:	f89d 2006 	ldrb.w	r2, [sp, #6]
   80312:	b11a      	cbz	r2, 8031c <CAN0_Handler+0x38>
   80314:	2300      	movs	r3, #0
   80316:	3301      	adds	r3, #1
   80318:	4293      	cmp	r3, r2
   8031a:	d1fc      	bne.n	80316 <CAN0_Handler+0x32>
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	
	if(can_sr & CAN_SR_MB0)
   8031c:	f014 0f01 	tst.w	r4, #1
   80320:	d002      	beq.n	80328 <CAN0_Handler+0x44>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   80322:	2201      	movs	r2, #1
   80324:	4b0b      	ldr	r3, [pc, #44]	; (80354 <CAN0_Handler+0x70>)
   80326:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80328:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8032c:	4b0b      	ldr	r3, [pc, #44]	; (8035c <CAN0_Handler+0x78>)
   8032e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   80332:	b004      	add	sp, #16
   80334:	bd10      	pop	{r4, pc}
			can_receive(&message, 1);
   80336:	2101      	movs	r1, #1
   80338:	a801      	add	r0, sp, #4
   8033a:	4b07      	ldr	r3, [pc, #28]	; (80358 <CAN0_Handler+0x74>)
   8033c:	4798      	blx	r3
   8033e:	e7e2      	b.n	80306 <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80340:	4807      	ldr	r0, [pc, #28]	; (80360 <CAN0_Handler+0x7c>)
   80342:	4b08      	ldr	r3, [pc, #32]	; (80364 <CAN0_Handler+0x80>)
   80344:	4798      	blx	r3
   80346:	e7de      	b.n	80306 <CAN0_Handler+0x22>
			set_servo_pos(message.data[1]);
   80348:	f89d 0008 	ldrb.w	r0, [sp, #8]
   8034c:	4b06      	ldr	r3, [pc, #24]	; (80368 <CAN0_Handler+0x84>)
   8034e:	4798      	blx	r3
   80350:	e7dd      	b.n	8030e <CAN0_Handler+0x2a>
   80352:	bf00      	nop
   80354:	400b4000 	.word	0x400b4000
   80358:	00080261 	.word	0x00080261
   8035c:	e000e100 	.word	0xe000e100
   80360:	00080b34 	.word	0x00080b34
   80364:	000808ad 	.word	0x000808ad
   80368:	000805c1 	.word	0x000805c1

0008036c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8036c:	e7fe      	b.n	8036c <Dummy_Handler>
	...

00080370 <Reset_Handler>:
{
   80370:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   80372:	4b18      	ldr	r3, [pc, #96]	; (803d4 <Reset_Handler+0x64>)
   80374:	4a18      	ldr	r2, [pc, #96]	; (803d8 <Reset_Handler+0x68>)
   80376:	429a      	cmp	r2, r3
   80378:	d010      	beq.n	8039c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
   8037a:	4b18      	ldr	r3, [pc, #96]	; (803dc <Reset_Handler+0x6c>)
   8037c:	4a15      	ldr	r2, [pc, #84]	; (803d4 <Reset_Handler+0x64>)
   8037e:	429a      	cmp	r2, r3
   80380:	d20c      	bcs.n	8039c <Reset_Handler+0x2c>
   80382:	3b01      	subs	r3, #1
   80384:	1a9b      	subs	r3, r3, r2
   80386:	f023 0303 	bic.w	r3, r3, #3
   8038a:	3304      	adds	r3, #4
   8038c:	4413      	add	r3, r2
   8038e:	4912      	ldr	r1, [pc, #72]	; (803d8 <Reset_Handler+0x68>)
                        *pDest++ = *pSrc++;
   80390:	f851 0b04 	ldr.w	r0, [r1], #4
   80394:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
   80398:	429a      	cmp	r2, r3
   8039a:	d1f9      	bne.n	80390 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
   8039c:	4b10      	ldr	r3, [pc, #64]	; (803e0 <Reset_Handler+0x70>)
   8039e:	4a11      	ldr	r2, [pc, #68]	; (803e4 <Reset_Handler+0x74>)
   803a0:	429a      	cmp	r2, r3
   803a2:	d20a      	bcs.n	803ba <Reset_Handler+0x4a>
   803a4:	3b01      	subs	r3, #1
   803a6:	1a9b      	subs	r3, r3, r2
   803a8:	f023 0303 	bic.w	r3, r3, #3
   803ac:	3304      	adds	r3, #4
   803ae:	4413      	add	r3, r2
                *pDest++ = 0;
   803b0:	2100      	movs	r1, #0
   803b2:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
   803b6:	4293      	cmp	r3, r2
   803b8:	d1fb      	bne.n	803b2 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   803ba:	4b0b      	ldr	r3, [pc, #44]	; (803e8 <Reset_Handler+0x78>)
   803bc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   803c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   803c4:	4a09      	ldr	r2, [pc, #36]	; (803ec <Reset_Handler+0x7c>)
   803c6:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   803c8:	4b09      	ldr	r3, [pc, #36]	; (803f0 <Reset_Handler+0x80>)
   803ca:	4798      	blx	r3
        main();
   803cc:	4b09      	ldr	r3, [pc, #36]	; (803f4 <Reset_Handler+0x84>)
   803ce:	4798      	blx	r3
   803d0:	e7fe      	b.n	803d0 <Reset_Handler+0x60>
   803d2:	bf00      	nop
   803d4:	20000000 	.word	0x20000000
   803d8:	00080bc4 	.word	0x00080bc4
   803dc:	20000434 	.word	0x20000434
   803e0:	200004c4 	.word	0x200004c4
   803e4:	20000434 	.word	0x20000434
   803e8:	00080000 	.word	0x00080000
   803ec:	e000ed00 	.word	0xe000ed00
   803f0:	000809c5 	.word	0x000809c5
   803f4:	000804e5 	.word	0x000804e5

000803f8 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   803f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   803fc:	4a20      	ldr	r2, [pc, #128]	; (80480 <SystemInit+0x88>)
   803fe:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   80400:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80404:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   80406:	4b1f      	ldr	r3, [pc, #124]	; (80484 <SystemInit+0x8c>)
   80408:	6a1b      	ldr	r3, [r3, #32]
   8040a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8040e:	d107      	bne.n	80420 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   80410:	4a1d      	ldr	r2, [pc, #116]	; (80488 <SystemInit+0x90>)
   80412:	4b1c      	ldr	r3, [pc, #112]	; (80484 <SystemInit+0x8c>)
   80414:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   80416:	461a      	mov	r2, r3
   80418:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8041a:	f013 0f01 	tst.w	r3, #1
   8041e:	d0fb      	beq.n	80418 <SystemInit+0x20>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   80420:	4a1a      	ldr	r2, [pc, #104]	; (8048c <SystemInit+0x94>)
   80422:	4b18      	ldr	r3, [pc, #96]	; (80484 <SystemInit+0x8c>)
   80424:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   80426:	461a      	mov	r2, r3
   80428:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8042a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8042e:	d0fb      	beq.n	80428 <SystemInit+0x30>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80430:	4a14      	ldr	r2, [pc, #80]	; (80484 <SystemInit+0x8c>)
   80432:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80434:	f023 0303 	bic.w	r3, r3, #3
   80438:	f043 0301 	orr.w	r3, r3, #1
   8043c:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   8043e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80440:	f013 0f08 	tst.w	r3, #8
   80444:	d0fb      	beq.n	8043e <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80446:	4a12      	ldr	r2, [pc, #72]	; (80490 <SystemInit+0x98>)
   80448:	4b0e      	ldr	r3, [pc, #56]	; (80484 <SystemInit+0x8c>)
   8044a:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   8044c:	461a      	mov	r2, r3
   8044e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80450:	f013 0f02 	tst.w	r3, #2
   80454:	d0fb      	beq.n	8044e <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80456:	2211      	movs	r2, #17
   80458:	4b0a      	ldr	r3, [pc, #40]	; (80484 <SystemInit+0x8c>)
   8045a:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8045c:	461a      	mov	r2, r3
   8045e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80460:	f013 0f08 	tst.w	r3, #8
   80464:	d0fb      	beq.n	8045e <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80466:	2212      	movs	r2, #18
   80468:	4b06      	ldr	r3, [pc, #24]	; (80484 <SystemInit+0x8c>)
   8046a:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8046c:	461a      	mov	r2, r3
   8046e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80470:	f013 0f08 	tst.w	r3, #8
   80474:	d0fb      	beq.n	8046e <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80476:	4a07      	ldr	r2, [pc, #28]	; (80494 <SystemInit+0x9c>)
   80478:	4b07      	ldr	r3, [pc, #28]	; (80498 <SystemInit+0xa0>)
   8047a:	601a      	str	r2, [r3, #0]
   8047c:	4770      	bx	lr
   8047e:	bf00      	nop
   80480:	400e0a00 	.word	0x400e0a00
   80484:	400e0600 	.word	0x400e0600
   80488:	00370809 	.word	0x00370809
   8048c:	01370809 	.word	0x01370809
   80490:	200d3f01 	.word	0x200d3f01
   80494:	0501bd00 	.word	0x0501bd00
   80498:	20000000 	.word	0x20000000

0008049c <IO_Init>:

#include "IO.h"

void IO_Init(void){
	
	PIOC -> PIO_WPMR &= ~PIO_WPMR_WPEN;	// Disable IO Write protection
   8049c:	4a0f      	ldr	r2, [pc, #60]	; (804dc <IO_Init+0x40>)
   8049e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   804a2:	f023 0301 	bic.w	r3, r3, #1
   804a6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	
	/* Set up LEDS */
	PMC->PMC_PCER0 |= PMC_PCER0_PID11;  // Enable peripheral clock for PIOA
   804aa:	f5a2 6240 	sub.w	r2, r2, #3072	; 0xc00
   804ae:	6913      	ldr	r3, [r2, #16]
   804b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   804b4:	6113      	str	r3, [r2, #16]

	// Define Pin 19 on port A as output
	PIOA -> PIO_PER |= PIO_PER_P19;		// PIO Output enable
   804b6:	4b0a      	ldr	r3, [pc, #40]	; (804e0 <IO_Init+0x44>)
   804b8:	681a      	ldr	r2, [r3, #0]
   804ba:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   804be:	601a      	str	r2, [r3, #0]
	PIOA -> PIO_OER |= PIO_OER_P19;		// P19 Configured as output (D1)
   804c0:	691a      	ldr	r2, [r3, #16]
   804c2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   804c6:	611a      	str	r2, [r3, #16]

	// Define Pin 19 on port A as output
	PIOA -> PIO_PER |= PIO_PER_P20;		// PIO Output enable
   804c8:	681a      	ldr	r2, [r3, #0]
   804ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   804ce:	601a      	str	r2, [r3, #0]
	PIOA -> PIO_OER |= PIO_OER_P20;		// P19 Configured as output (D2)
   804d0:	691a      	ldr	r2, [r3, #16]
   804d2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   804d6:	611a      	str	r2, [r3, #16]
   804d8:	4770      	bx	lr
   804da:	bf00      	nop
   804dc:	400e1200 	.word	0x400e1200
   804e0:	400e0e00 	.word	0x400e0e00

000804e4 <main>:


CAN_MESSAGE test;

int main(void)
{
   804e4:	b508      	push	{r3, lr}
	/* Initialize the SAM system */
    SystemInit();
   804e6:	4b10      	ldr	r3, [pc, #64]	; (80528 <main+0x44>)
   804e8:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS; //Disable Watchdog Timer
   804ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804ee:	4b0f      	ldr	r3, [pc, #60]	; (8052c <main+0x48>)
   804f0:	605a      	str	r2, [r3, #4]
		
	configure_uart();
   804f2:	4b0f      	ldr	r3, [pc, #60]	; (80530 <main+0x4c>)
   804f4:	4798      	blx	r3
	can_init_def_tx_rx_mb(0x00290561);
   804f6:	480f      	ldr	r0, [pc, #60]	; (80534 <main+0x50>)
   804f8:	4b0f      	ldr	r3, [pc, #60]	; (80538 <main+0x54>)
   804fa:	4798      	blx	r3
	IO_Init();
   804fc:	4b0f      	ldr	r3, [pc, #60]	; (8053c <main+0x58>)
   804fe:	4798      	blx	r3
	PWM_init();
   80500:	4b0f      	ldr	r3, [pc, #60]	; (80540 <main+0x5c>)
   80502:	4798      	blx	r3
	
	
	printf("Welcome PuTTY's\n\r");
   80504:	480f      	ldr	r0, [pc, #60]	; (80544 <main+0x60>)
   80506:	4b10      	ldr	r3, [pc, #64]	; (80548 <main+0x64>)
   80508:	4798      	blx	r3
	set_orange_LED;
   8050a:	4b10      	ldr	r3, [pc, #64]	; (8054c <main+0x68>)
   8050c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8050e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80512:	631a      	str	r2, [r3, #48]	; 0x30
	
	test.id = 1;
   80514:	4a0e      	ldr	r2, [pc, #56]	; (80550 <main+0x6c>)
   80516:	2101      	movs	r1, #1
   80518:	8011      	strh	r1, [r2, #0]
	test.data_length = 1;
   8051a:	7091      	strb	r1, [r2, #2]
	test.data[0] = 1;
   8051c:	70d1      	strb	r1, [r2, #3]
	//can_send(&test, 0);
	
	set_green_LED;
   8051e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80520:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80524:	631a      	str	r2, [r3, #48]	; 0x30
   80526:	e7fe      	b.n	80526 <main+0x42>
   80528:	000803f9 	.word	0x000803f9
   8052c:	400e1a50 	.word	0x400e1a50
   80530:	000808d1 	.word	0x000808d1
   80534:	00290561 	.word	0x00290561
   80538:	00080251 	.word	0x00080251
   8053c:	0008049d 	.word	0x0008049d
   80540:	00080555 	.word	0x00080555
   80544:	00080b60 	.word	0x00080b60
   80548:	000808ad 	.word	0x000808ad
   8054c:	400e0e00 	.word	0x400e0e00
   80550:	20000450 	.word	0x20000450

00080554 <PWM_init>:


void PWM_init(void){
	
	/* Set up PWM */
	PMC->PMC_SCER = PMC_SCER_PCK0 | PMC_SCER_PCK1 | PMC_SCER_PCK2;	 // Enable all programmable clocks
   80554:	4b17      	ldr	r3, [pc, #92]	; (805b4 <PWM_init+0x60>)
   80556:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   8055a:	601a      	str	r2, [r3, #0]
	PMC->PMC_PCER1 |= PMC_PCER1_PID36;								 // Enable clock on PWM Controller
   8055c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   80560:	f042 0210 	orr.w	r2, r2, #16
   80564:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		
	// Define Pin 19 on port C as output
	PIOC->PIO_OER |= PIO_PC19;			// PIO Output enable
   80568:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   8056c:	691a      	ldr	r2, [r3, #16]
   8056e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80572:	611a      	str	r2, [r3, #16]
	PIOC->PIO_PDR |= PIO_PC19;			// P19 Configured as output (silk - PIN45)
   80574:	685a      	ldr	r2, [r3, #4]
   80576:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   8057a:	605a      	str	r2, [r3, #4]
	PIOC->PIO_ABSR |= PIO_ABSR_P19;		// Set peripheral MUX to channel B (PWM)
   8057c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8057e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80582:	671a      	str	r2, [r3, #112]	; 0x70
	
	// Setup PWM servo signal
	PWM->PWM_WPCR &= ~PIO_WPMR_WPEN;		// Disable PWM write protection
   80584:	4a0c      	ldr	r2, [pc, #48]	; (805b8 <PWM_init+0x64>)
   80586:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   8058a:	f023 0301 	bic.w	r3, r3, #1
   8058e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	REG_PWM_CMR5 = PWM_CMR_CPRE_MCK_DIV_1024 | PWM_CMR_CPOL;	// Set 1024 prescaler and Output wave form start high
   80592:	f240 220a 	movw	r2, #522	; 0x20a
   80596:	4b09      	ldr	r3, [pc, #36]	; (805bc <PWM_init+0x68>)
   80598:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD5 = 1640;			//CPRD = 20ms * 84MHz/1024
   8059a:	f44f 62cd 	mov.w	r2, #1640	; 0x668
   8059e:	330c      	adds	r3, #12
   805a0:	601a      	str	r2, [r3, #0]
	REG_PWM_CDTY5 = 123;			//CPRY = 1.5ms * 84MHz/1024 (min = 74/max = 172 vulues)
   805a2:	227b      	movs	r2, #123	; 0x7b
   805a4:	3b08      	subs	r3, #8
   805a6:	601a      	str	r2, [r3, #0]
	REG_PWM_ENA = PWM_ENA_CHID5;	// Enable PWM
   805a8:	2220      	movs	r2, #32
   805aa:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
   805ae:	601a      	str	r2, [r3, #0]
   805b0:	4770      	bx	lr
   805b2:	bf00      	nop
   805b4:	400e0600 	.word	0x400e0600
   805b8:	40094000 	.word	0x40094000
   805bc:	400942a0 	.word	0x400942a0

000805c0 <set_servo_pos>:
}


void set_servo_pos(uint8_t value){
	REG_PWM_CDTY5 = 74 + value*98/255;	 //CPRY = periode * 84MHz/1024 (min = 74/max = 172 vulues)
   805c0:	2362      	movs	r3, #98	; 0x62
   805c2:	fb03 f000 	mul.w	r0, r3, r0
   805c6:	4b05      	ldr	r3, [pc, #20]	; (805dc <set_servo_pos+0x1c>)
   805c8:	fb83 2300 	smull	r2, r3, r3, r0
   805cc:	4403      	add	r3, r0
   805ce:	17c0      	asrs	r0, r0, #31
   805d0:	ebc0 10e3 	rsb	r0, r0, r3, asr #7
   805d4:	304a      	adds	r0, #74	; 0x4a
   805d6:	4b02      	ldr	r3, [pc, #8]	; (805e0 <set_servo_pos+0x20>)
   805d8:	6018      	str	r0, [r3, #0]
   805da:	4770      	bx	lr
   805dc:	80808081 	.word	0x80808081
   805e0:	400942a4 	.word	0x400942a4

000805e4 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   805e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   805e8:	460d      	mov	r5, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   805ea:	1e16      	subs	r6, r2, #0
   805ec:	dd48      	ble.n	80680 <prints+0x9c>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   805ee:	780a      	ldrb	r2, [r1, #0]
   805f0:	2a00      	cmp	r2, #0
   805f2:	d035      	beq.n	80660 <prints+0x7c>
   805f4:	460a      	mov	r2, r1
   805f6:	2400      	movs	r4, #0
   805f8:	3401      	adds	r4, #1
   805fa:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   805fe:	2900      	cmp	r1, #0
   80600:	d1fa      	bne.n	805f8 <prints+0x14>
		if (len >= width) width = 0;
   80602:	42a6      	cmp	r6, r4
   80604:	dc2d      	bgt.n	80662 <prints+0x7e>
   80606:	2400      	movs	r4, #0
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
   80608:	f003 0202 	and.w	r2, r3, #2
   8060c:	2a00      	cmp	r2, #0
   8060e:	bf0c      	ite	eq
   80610:	f04f 0820 	moveq.w	r8, #32
   80614:	f04f 0830 	movne.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
   80618:	f013 0301 	ands.w	r3, r3, #1
   8061c:	d123      	bne.n	80666 <prints+0x82>
		for ( ; width > 0; --width) {
   8061e:	2c00      	cmp	r4, #0
   80620:	dd28      	ble.n	80674 <prints+0x90>
   80622:	4626      	mov	r6, r4
	(void) uart_putchar(c);  //Send characters to uart
   80624:	fa5f f988 	uxtb.w	r9, r8
   80628:	4f18      	ldr	r7, [pc, #96]	; (8068c <prints+0xa8>)
   8062a:	4648      	mov	r0, r9
   8062c:	47b8      	blx	r7
		for ( ; width > 0; --width) {
   8062e:	3e01      	subs	r6, #1
   80630:	d1fb      	bne.n	8062a <prints+0x46>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   80632:	7828      	ldrb	r0, [r5, #0]
   80634:	b188      	cbz	r0, 8065a <prints+0x76>
	(void) uart_putchar(c);  //Send characters to uart
   80636:	4f15      	ldr	r7, [pc, #84]	; (8068c <prints+0xa8>)
   80638:	47b8      	blx	r7
		printchar (out, *string);
		++pc;
   8063a:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   8063c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80640:	2800      	cmp	r0, #0
   80642:	d1f9      	bne.n	80638 <prints+0x54>
	}
	for ( ; width > 0; --width) {
   80644:	2e00      	cmp	r6, #0
   80646:	dd08      	ble.n	8065a <prints+0x76>
   80648:	4635      	mov	r5, r6
	(void) uart_putchar(c);  //Send characters to uart
   8064a:	fa5f f888 	uxtb.w	r8, r8
   8064e:	4f0f      	ldr	r7, [pc, #60]	; (8068c <prints+0xa8>)
   80650:	4640      	mov	r0, r8
   80652:	47b8      	blx	r7
	for ( ; width > 0; --width) {
   80654:	3d01      	subs	r5, #1
   80656:	d1fb      	bne.n	80650 <prints+0x6c>
   80658:	4434      	add	r4, r6
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
   8065a:	4620      	mov	r0, r4
   8065c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (ptr = string; *ptr; ++ptr) ++len;
   80660:	2400      	movs	r4, #0
		else width -= len;
   80662:	1b34      	subs	r4, r6, r4
   80664:	e7d0      	b.n	80608 <prints+0x24>
   80666:	4626      	mov	r6, r4
	for ( ; *string ; ++string) {
   80668:	7828      	ldrb	r0, [r5, #0]
   8066a:	b108      	cbz	r0, 80670 <prints+0x8c>
	register int pc = 0, padchar = ' ';
   8066c:	2400      	movs	r4, #0
   8066e:	e7e2      	b.n	80636 <prints+0x52>
   80670:	2400      	movs	r4, #0
   80672:	e7e7      	b.n	80644 <prints+0x60>
		for ( ; width > 0; --width) {
   80674:	4626      	mov	r6, r4
   80676:	461c      	mov	r4, r3
   80678:	e7db      	b.n	80632 <prints+0x4e>
	register int pc = 0, padchar = ' ';
   8067a:	f04f 0820 	mov.w	r8, #32
   8067e:	e7d8      	b.n	80632 <prints+0x4e>
	if (!(pad & PAD_RIGHT)) {
   80680:	f013 0401 	ands.w	r4, r3, #1
   80684:	d0f9      	beq.n	8067a <prints+0x96>
	register int pc = 0, padchar = ' ';
   80686:	f04f 0820 	mov.w	r8, #32
   8068a:	e7ed      	b.n	80668 <prints+0x84>
   8068c:	00080939 	.word	0x00080939

00080690 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80690:	b5f0      	push	{r4, r5, r6, r7, lr}
   80692:	b085      	sub	sp, #20
   80694:	4607      	mov	r7, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80696:	b381      	cbz	r1, 806fa <printi+0x6a>
   80698:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   8069a:	b10b      	cbz	r3, 806a0 <printi+0x10>
   8069c:	2a0a      	cmp	r2, #10
   8069e:	d038      	beq.n	80712 <printi+0x82>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   806a0:	2300      	movs	r3, #0
   806a2:	f88d 300f 	strb.w	r3, [sp, #15]

	while (u) {
   806a6:	2600      	movs	r6, #0
   806a8:	2900      	cmp	r1, #0
   806aa:	d046      	beq.n	8073a <printi+0xaa>
   806ac:	f10d 050f 	add.w	r5, sp, #15
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
   806b0:	990c      	ldr	r1, [sp, #48]	; 0x30
   806b2:	393a      	subs	r1, #58	; 0x3a
		t = u % b;
   806b4:	fbb4 f3f2 	udiv	r3, r4, r2
   806b8:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   806bc:	2b09      	cmp	r3, #9
			t += letbase - '0' - 10;
   806be:	bfc8      	it	gt
   806c0:	185b      	addgt	r3, r3, r1
		*--s = t + '0';
   806c2:	3330      	adds	r3, #48	; 0x30
   806c4:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   806c8:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   806cc:	2c00      	cmp	r4, #0
   806ce:	d1f1      	bne.n	806b4 <printi+0x24>
	}

	if (neg) {
   806d0:	b156      	cbz	r6, 806e8 <printi+0x58>
		if( width && (pad & PAD_ZERO) ) {
   806d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   806d4:	b11b      	cbz	r3, 806de <printi+0x4e>
   806d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   806d8:	f013 0f02 	tst.w	r3, #2
   806dc:	d125      	bne.n	8072a <printi+0x9a>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   806de:	232d      	movs	r3, #45	; 0x2d
   806e0:	f805 3c01 	strb.w	r3, [r5, #-1]
   806e4:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   806e6:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   806e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   806ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   806ec:	4629      	mov	r1, r5
   806ee:	4638      	mov	r0, r7
   806f0:	4c14      	ldr	r4, [pc, #80]	; (80744 <printi+0xb4>)
   806f2:	47a0      	blx	r4
   806f4:	4430      	add	r0, r6
}
   806f6:	b005      	add	sp, #20
   806f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_buf[0] = '0';
   806fa:	2330      	movs	r3, #48	; 0x30
   806fc:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80700:	2300      	movs	r3, #0
   80702:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8070a:	a901      	add	r1, sp, #4
   8070c:	4c0d      	ldr	r4, [pc, #52]	; (80744 <printi+0xb4>)
   8070e:	47a0      	blx	r4
   80710:	e7f1      	b.n	806f6 <printi+0x66>
	if (sg && b == 10 && i < 0) {
   80712:	2900      	cmp	r1, #0
   80714:	dac4      	bge.n	806a0 <printi+0x10>
		u = -i;
   80716:	424c      	negs	r4, r1
	*s = '\0';
   80718:	2300      	movs	r3, #0
   8071a:	f88d 300f 	strb.w	r3, [sp, #15]
	s = print_buf + PRINT_BUF_LEN-1;
   8071e:	f10d 050f 	add.w	r5, sp, #15
	while (u) {
   80722:	2c00      	cmp	r4, #0
   80724:	d0d5      	beq.n	806d2 <printi+0x42>
		neg = 1;
   80726:	2601      	movs	r6, #1
   80728:	e7c0      	b.n	806ac <printi+0x1c>
	(void) uart_putchar(c);  //Send characters to uart
   8072a:	202d      	movs	r0, #45	; 0x2d
   8072c:	4b06      	ldr	r3, [pc, #24]	; (80748 <printi+0xb8>)
   8072e:	4798      	blx	r3
			--width;
   80730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80732:	3b01      	subs	r3, #1
   80734:	930a      	str	r3, [sp, #40]	; 0x28
			++pc;
   80736:	2601      	movs	r6, #1
			--width;
   80738:	e7d6      	b.n	806e8 <printi+0x58>
	register int t, neg = 0, pc = 0;
   8073a:	461e      	mov	r6, r3
	s = print_buf + PRINT_BUF_LEN-1;
   8073c:	f10d 050f 	add.w	r5, sp, #15
   80740:	e7d2      	b.n	806e8 <printi+0x58>
   80742:	bf00      	nop
   80744:	000805e5 	.word	0x000805e5
   80748:	00080939 	.word	0x00080939

0008074c <print>:

static int print( char **out, const char *format, va_list args )
{
   8074c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80750:	b087      	sub	sp, #28
   80752:	4680      	mov	r8, r0
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   80754:	780b      	ldrb	r3, [r1, #0]
   80756:	2b00      	cmp	r3, #0
   80758:	f000 8094 	beq.w	80884 <print+0x138>
   8075c:	468b      	mov	fp, r1
   8075e:	4617      	mov	r7, r2
   80760:	2500      	movs	r5, #0
	(void) uart_putchar(c);  //Send characters to uart
   80762:	4e4e      	ldr	r6, [pc, #312]	; (8089c <print+0x150>)
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints (out, scr, width, pad);
   80764:	f8df a13c 	ldr.w	sl, [pc, #316]	; 808a4 <print+0x158>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80768:	f8df 913c 	ldr.w	r9, [pc, #316]	; 808a8 <print+0x15c>
   8076c:	e046      	b.n	807fc <print+0xb0>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   8076e:	2200      	movs	r2, #0
   80770:	e070      	b.n	80854 <print+0x108>
				register char *s = (char *)va_arg( args, int );
   80772:	6839      	ldr	r1, [r7, #0]
   80774:	3704      	adds	r7, #4
				pc += prints (out, s?s:"(null)", width, pad);
   80776:	484a      	ldr	r0, [pc, #296]	; (808a0 <print+0x154>)
   80778:	2900      	cmp	r1, #0
   8077a:	bf08      	it	eq
   8077c:	4601      	moveq	r1, r0
   8077e:	4640      	mov	r0, r8
   80780:	47d0      	blx	sl
   80782:	4405      	add	r5, r0
				continue;
   80784:	e035      	b.n	807f2 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80786:	6839      	ldr	r1, [r7, #0]
   80788:	3704      	adds	r7, #4
   8078a:	2061      	movs	r0, #97	; 0x61
   8078c:	9002      	str	r0, [sp, #8]
   8078e:	9301      	str	r3, [sp, #4]
   80790:	9200      	str	r2, [sp, #0]
   80792:	2301      	movs	r3, #1
   80794:	220a      	movs	r2, #10
   80796:	4640      	mov	r0, r8
   80798:	47c8      	blx	r9
   8079a:	4405      	add	r5, r0
				continue;
   8079c:	e029      	b.n	807f2 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   8079e:	6839      	ldr	r1, [r7, #0]
   807a0:	3704      	adds	r7, #4
   807a2:	2061      	movs	r0, #97	; 0x61
   807a4:	9002      	str	r0, [sp, #8]
   807a6:	9301      	str	r3, [sp, #4]
   807a8:	9200      	str	r2, [sp, #0]
   807aa:	2300      	movs	r3, #0
   807ac:	2210      	movs	r2, #16
   807ae:	4640      	mov	r0, r8
   807b0:	47c8      	blx	r9
   807b2:	4405      	add	r5, r0
				continue;
   807b4:	e01d      	b.n	807f2 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   807b6:	6839      	ldr	r1, [r7, #0]
   807b8:	3704      	adds	r7, #4
   807ba:	2041      	movs	r0, #65	; 0x41
   807bc:	9002      	str	r0, [sp, #8]
   807be:	9301      	str	r3, [sp, #4]
   807c0:	9200      	str	r2, [sp, #0]
   807c2:	2300      	movs	r3, #0
   807c4:	2210      	movs	r2, #16
   807c6:	4640      	mov	r0, r8
   807c8:	47c8      	blx	r9
   807ca:	4405      	add	r5, r0
				continue;
   807cc:	e011      	b.n	807f2 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   807ce:	6839      	ldr	r1, [r7, #0]
   807d0:	3704      	adds	r7, #4
   807d2:	2061      	movs	r0, #97	; 0x61
   807d4:	9002      	str	r0, [sp, #8]
   807d6:	9301      	str	r3, [sp, #4]
   807d8:	9200      	str	r2, [sp, #0]
   807da:	2300      	movs	r3, #0
   807dc:	220a      	movs	r2, #10
   807de:	4640      	mov	r0, r8
   807e0:	47c8      	blx	r9
   807e2:	4405      	add	r5, r0
				continue;
   807e4:	e005      	b.n	807f2 <print+0xa6>
			++format;
   807e6:	46a3      	mov	fp, r4
	(void) uart_putchar(c);  //Send characters to uart
   807e8:	f89b 0000 	ldrb.w	r0, [fp]
   807ec:	47b0      	blx	r6
			}
		}
		else {
		out:
			printchar (out, *format);
			++pc;
   807ee:	3501      	adds	r5, #1
   807f0:	465c      	mov	r4, fp
	for (; *format != 0; ++format) {
   807f2:	f104 0b01 	add.w	fp, r4, #1
   807f6:	7863      	ldrb	r3, [r4, #1]
   807f8:	2b00      	cmp	r3, #0
   807fa:	d044      	beq.n	80886 <print+0x13a>
		if (*format == '%') {
   807fc:	2b25      	cmp	r3, #37	; 0x25
   807fe:	d1f3      	bne.n	807e8 <print+0x9c>
			++format;
   80800:	f10b 0401 	add.w	r4, fp, #1
			if (*format == '\0') break;
   80804:	f89b 3001 	ldrb.w	r3, [fp, #1]
   80808:	2b00      	cmp	r3, #0
   8080a:	d03c      	beq.n	80886 <print+0x13a>
			if (*format == '%') goto out;
   8080c:	2b25      	cmp	r3, #37	; 0x25
   8080e:	d0ea      	beq.n	807e6 <print+0x9a>
			if (*format == '-') {
   80810:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
   80812:	bf06      	itte	eq
   80814:	f10b 0402 	addeq.w	r4, fp, #2
				pad = PAD_RIGHT;
   80818:	2301      	moveq	r3, #1
			width = pad = 0;
   8081a:	2300      	movne	r3, #0
			while (*format == '0') {
   8081c:	7822      	ldrb	r2, [r4, #0]
   8081e:	2a30      	cmp	r2, #48	; 0x30
   80820:	d105      	bne.n	8082e <print+0xe2>
				pad |= PAD_ZERO;
   80822:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80826:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   8082a:	2a30      	cmp	r2, #48	; 0x30
   8082c:	d0f9      	beq.n	80822 <print+0xd6>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   8082e:	7821      	ldrb	r1, [r4, #0]
   80830:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80834:	b2d2      	uxtb	r2, r2
   80836:	2a09      	cmp	r2, #9
   80838:	d899      	bhi.n	8076e <print+0x22>
   8083a:	2200      	movs	r2, #0
				width *= 10;
   8083c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
				width += *format - '0';
   80840:	3930      	subs	r1, #48	; 0x30
   80842:	eb01 0242 	add.w	r2, r1, r2, lsl #1
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80846:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   8084a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   8084e:	b2c0      	uxtb	r0, r0
   80850:	2809      	cmp	r0, #9
   80852:	d9f3      	bls.n	8083c <print+0xf0>
			if( *format == 's' ) {
   80854:	2973      	cmp	r1, #115	; 0x73
   80856:	d08c      	beq.n	80772 <print+0x26>
			if( *format == 'd' ) {
   80858:	2964      	cmp	r1, #100	; 0x64
   8085a:	d094      	beq.n	80786 <print+0x3a>
			if( *format == 'x' ) {
   8085c:	2978      	cmp	r1, #120	; 0x78
   8085e:	d09e      	beq.n	8079e <print+0x52>
			if( *format == 'X' ) {
   80860:	2958      	cmp	r1, #88	; 0x58
   80862:	d0a8      	beq.n	807b6 <print+0x6a>
			if( *format == 'u' ) {
   80864:	2975      	cmp	r1, #117	; 0x75
   80866:	d0b2      	beq.n	807ce <print+0x82>
			if( *format == 'c' ) {
   80868:	2963      	cmp	r1, #99	; 0x63
   8086a:	d1c2      	bne.n	807f2 <print+0xa6>
				scr[0] = (char)va_arg( args, int );
   8086c:	6839      	ldr	r1, [r7, #0]
   8086e:	3704      	adds	r7, #4
   80870:	f88d 1014 	strb.w	r1, [sp, #20]
				scr[1] = '\0';
   80874:	2100      	movs	r1, #0
   80876:	f88d 1015 	strb.w	r1, [sp, #21]
				pc += prints (out, scr, width, pad);
   8087a:	a905      	add	r1, sp, #20
   8087c:	4640      	mov	r0, r8
   8087e:	47d0      	blx	sl
   80880:	4405      	add	r5, r0
				continue;
   80882:	e7b6      	b.n	807f2 <print+0xa6>
	register int pc = 0;
   80884:	2500      	movs	r5, #0
		}
	}
	if (out) **out = '\0';
   80886:	f1b8 0f00 	cmp.w	r8, #0
   8088a:	d003      	beq.n	80894 <print+0x148>
   8088c:	f8d8 3000 	ldr.w	r3, [r8]
   80890:	2200      	movs	r2, #0
   80892:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80894:	4628      	mov	r0, r5
   80896:	b007      	add	sp, #28
   80898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8089c:	00080939 	.word	0x00080939
   808a0:	00080b74 	.word	0x00080b74
   808a4:	000805e5 	.word	0x000805e5
   808a8:	00080691 	.word	0x00080691

000808ac <printf>:

int printf(const char *format, ...)
{
   808ac:	b40f      	push	{r0, r1, r2, r3}
   808ae:	b500      	push	{lr}
   808b0:	b083      	sub	sp, #12
   808b2:	aa04      	add	r2, sp, #16
   808b4:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   808b8:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   808ba:	2000      	movs	r0, #0
   808bc:	4b03      	ldr	r3, [pc, #12]	; (808cc <printf+0x20>)
   808be:	4798      	blx	r3
}
   808c0:	b003      	add	sp, #12
   808c2:	f85d eb04 	ldr.w	lr, [sp], #4
   808c6:	b004      	add	sp, #16
   808c8:	4770      	bx	lr
   808ca:	bf00      	nop
   808cc:	0008074d 	.word	0x0008074d

000808d0 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   808d0:	4b16      	ldr	r3, [pc, #88]	; (8092c <configure_uart+0x5c>)
   808d2:	2200      	movs	r2, #0
   808d4:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   808d6:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   808d8:	4b15      	ldr	r3, [pc, #84]	; (80930 <configure_uart+0x60>)
   808da:	f44f 7140 	mov.w	r1, #768	; 0x300
   808de:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   808e0:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   808e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   808e4:	6f18      	ldr	r0, [r3, #112]	; 0x70
   808e6:	4002      	ands	r2, r0
   808e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   808ec:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   808ee:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   808f0:	f44f 7280 	mov.w	r2, #256	; 0x100
   808f4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   808f8:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   808fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
   808fe:	21ac      	movs	r1, #172	; 0xac
   80900:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80902:	f240 2123 	movw	r1, #547	; 0x223
   80906:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80908:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8090c:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8090e:	f240 2102 	movw	r1, #514	; 0x202
   80912:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80916:	f04f 31ff 	mov.w	r1, #4294967295
   8091a:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   8091c:	21e1      	movs	r1, #225	; 0xe1
   8091e:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80920:	4904      	ldr	r1, [pc, #16]	; (80934 <configure_uart+0x64>)
   80922:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80924:	2250      	movs	r2, #80	; 0x50
   80926:	601a      	str	r2, [r3, #0]
   80928:	4770      	bx	lr
   8092a:	bf00      	nop
   8092c:	2000045c 	.word	0x2000045c
   80930:	400e0e00 	.word	0x400e0e00
   80934:	e000e100 	.word	0xe000e100

00080938 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80938:	4b07      	ldr	r3, [pc, #28]	; (80958 <uart_putchar+0x20>)
   8093a:	695b      	ldr	r3, [r3, #20]
   8093c:	f013 0f02 	tst.w	r3, #2
   80940:	d008      	beq.n	80954 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80942:	4b05      	ldr	r3, [pc, #20]	; (80958 <uart_putchar+0x20>)
   80944:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80946:	461a      	mov	r2, r3
   80948:	6953      	ldr	r3, [r2, #20]
   8094a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8094e:	d0fb      	beq.n	80948 <uart_putchar+0x10>
	return 0;
   80950:	2000      	movs	r0, #0
   80952:	4770      	bx	lr
	return 1;
   80954:	2001      	movs	r0, #1
}
   80956:	4770      	bx	lr
   80958:	400e0800 	.word	0x400e0800

0008095c <UART_Handler>:

void UART_Handler(void)
{
   8095c:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   8095e:	4b15      	ldr	r3, [pc, #84]	; (809b4 <UART_Handler+0x58>)
   80960:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80962:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80966:	d003      	beq.n	80970 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80968:	f44f 71a8 	mov.w	r1, #336	; 0x150
   8096c:	4a11      	ldr	r2, [pc, #68]	; (809b4 <UART_Handler+0x58>)
   8096e:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80970:	f013 0f01 	tst.w	r3, #1
   80974:	d012      	beq.n	8099c <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80976:	4810      	ldr	r0, [pc, #64]	; (809b8 <UART_Handler+0x5c>)
   80978:	7842      	ldrb	r2, [r0, #1]
   8097a:	1c53      	adds	r3, r2, #1
   8097c:	4259      	negs	r1, r3
   8097e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80982:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80986:	bf58      	it	pl
   80988:	424b      	negpl	r3, r1
   8098a:	7801      	ldrb	r1, [r0, #0]
   8098c:	428b      	cmp	r3, r1
   8098e:	d006      	beq.n	8099e <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80990:	4908      	ldr	r1, [pc, #32]	; (809b4 <UART_Handler+0x58>)
   80992:	6988      	ldr	r0, [r1, #24]
   80994:	4908      	ldr	r1, [pc, #32]	; (809b8 <UART_Handler+0x5c>)
   80996:	440a      	add	r2, r1
   80998:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   8099a:	704b      	strb	r3, [r1, #1]
   8099c:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   8099e:	4807      	ldr	r0, [pc, #28]	; (809bc <UART_Handler+0x60>)
   809a0:	4b07      	ldr	r3, [pc, #28]	; (809c0 <UART_Handler+0x64>)
   809a2:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   809a4:	4b03      	ldr	r3, [pc, #12]	; (809b4 <UART_Handler+0x58>)
   809a6:	699a      	ldr	r2, [r3, #24]
   809a8:	4b03      	ldr	r3, [pc, #12]	; (809b8 <UART_Handler+0x5c>)
   809aa:	7859      	ldrb	r1, [r3, #1]
   809ac:	440b      	add	r3, r1
   809ae:	709a      	strb	r2, [r3, #2]
			return;
   809b0:	bd08      	pop	{r3, pc}
   809b2:	bf00      	nop
   809b4:	400e0800 	.word	0x400e0800
   809b8:	2000045c 	.word	0x2000045c
   809bc:	00080b7c 	.word	0x00080b7c
   809c0:	000808ad 	.word	0x000808ad

000809c4 <__libc_init_array>:
   809c4:	b570      	push	{r4, r5, r6, lr}
   809c6:	4e0f      	ldr	r6, [pc, #60]	; (80a04 <__libc_init_array+0x40>)
   809c8:	4d0f      	ldr	r5, [pc, #60]	; (80a08 <__libc_init_array+0x44>)
   809ca:	1b76      	subs	r6, r6, r5
   809cc:	10b6      	asrs	r6, r6, #2
   809ce:	bf18      	it	ne
   809d0:	2400      	movne	r4, #0
   809d2:	d005      	beq.n	809e0 <__libc_init_array+0x1c>
   809d4:	3401      	adds	r4, #1
   809d6:	f855 3b04 	ldr.w	r3, [r5], #4
   809da:	4798      	blx	r3
   809dc:	42a6      	cmp	r6, r4
   809de:	d1f9      	bne.n	809d4 <__libc_init_array+0x10>
   809e0:	4e0a      	ldr	r6, [pc, #40]	; (80a0c <__libc_init_array+0x48>)
   809e2:	4d0b      	ldr	r5, [pc, #44]	; (80a10 <__libc_init_array+0x4c>)
   809e4:	f000 f8dc 	bl	80ba0 <_init>
   809e8:	1b76      	subs	r6, r6, r5
   809ea:	10b6      	asrs	r6, r6, #2
   809ec:	bf18      	it	ne
   809ee:	2400      	movne	r4, #0
   809f0:	d006      	beq.n	80a00 <__libc_init_array+0x3c>
   809f2:	3401      	adds	r4, #1
   809f4:	f855 3b04 	ldr.w	r3, [r5], #4
   809f8:	4798      	blx	r3
   809fa:	42a6      	cmp	r6, r4
   809fc:	d1f9      	bne.n	809f2 <__libc_init_array+0x2e>
   809fe:	bd70      	pop	{r4, r5, r6, pc}
   80a00:	bd70      	pop	{r4, r5, r6, pc}
   80a02:	bf00      	nop
   80a04:	00080bac 	.word	0x00080bac
   80a08:	00080bac 	.word	0x00080bac
   80a0c:	00080bb4 	.word	0x00080bb4
   80a10:	00080bac 	.word	0x00080bac

00080a14 <register_fini>:
   80a14:	4b02      	ldr	r3, [pc, #8]	; (80a20 <register_fini+0xc>)
   80a16:	b113      	cbz	r3, 80a1e <register_fini+0xa>
   80a18:	4802      	ldr	r0, [pc, #8]	; (80a24 <register_fini+0x10>)
   80a1a:	f000 b805 	b.w	80a28 <atexit>
   80a1e:	4770      	bx	lr
   80a20:	00000000 	.word	0x00000000
   80a24:	00080a35 	.word	0x00080a35

00080a28 <atexit>:
   80a28:	2300      	movs	r3, #0
   80a2a:	4601      	mov	r1, r0
   80a2c:	461a      	mov	r2, r3
   80a2e:	4618      	mov	r0, r3
   80a30:	f000 b81e 	b.w	80a70 <__register_exitproc>

00080a34 <__libc_fini_array>:
   80a34:	b538      	push	{r3, r4, r5, lr}
   80a36:	4c0a      	ldr	r4, [pc, #40]	; (80a60 <__libc_fini_array+0x2c>)
   80a38:	4d0a      	ldr	r5, [pc, #40]	; (80a64 <__libc_fini_array+0x30>)
   80a3a:	1b64      	subs	r4, r4, r5
   80a3c:	10a4      	asrs	r4, r4, #2
   80a3e:	d00a      	beq.n	80a56 <__libc_fini_array+0x22>
   80a40:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80a44:	3b01      	subs	r3, #1
   80a46:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80a4a:	3c01      	subs	r4, #1
   80a4c:	f855 3904 	ldr.w	r3, [r5], #-4
   80a50:	4798      	blx	r3
   80a52:	2c00      	cmp	r4, #0
   80a54:	d1f9      	bne.n	80a4a <__libc_fini_array+0x16>
   80a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80a5a:	f000 b8ab 	b.w	80bb4 <_fini>
   80a5e:	bf00      	nop
   80a60:	00080bc4 	.word	0x00080bc4
   80a64:	00080bc0 	.word	0x00080bc0

00080a68 <__retarget_lock_acquire_recursive>:
   80a68:	4770      	bx	lr
   80a6a:	bf00      	nop

00080a6c <__retarget_lock_release_recursive>:
   80a6c:	4770      	bx	lr
   80a6e:	bf00      	nop

00080a70 <__register_exitproc>:
   80a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80a74:	4d2c      	ldr	r5, [pc, #176]	; (80b28 <__register_exitproc+0xb8>)
   80a76:	4606      	mov	r6, r0
   80a78:	6828      	ldr	r0, [r5, #0]
   80a7a:	4698      	mov	r8, r3
   80a7c:	460f      	mov	r7, r1
   80a7e:	4691      	mov	r9, r2
   80a80:	f7ff fff2 	bl	80a68 <__retarget_lock_acquire_recursive>
   80a84:	4b29      	ldr	r3, [pc, #164]	; (80b2c <__register_exitproc+0xbc>)
   80a86:	681c      	ldr	r4, [r3, #0]
   80a88:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80a8c:	2b00      	cmp	r3, #0
   80a8e:	d03e      	beq.n	80b0e <__register_exitproc+0x9e>
   80a90:	685a      	ldr	r2, [r3, #4]
   80a92:	2a1f      	cmp	r2, #31
   80a94:	dc1c      	bgt.n	80ad0 <__register_exitproc+0x60>
   80a96:	f102 0e01 	add.w	lr, r2, #1
   80a9a:	b176      	cbz	r6, 80aba <__register_exitproc+0x4a>
   80a9c:	2101      	movs	r1, #1
   80a9e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80aa2:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80aa6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80aaa:	4091      	lsls	r1, r2
   80aac:	4308      	orrs	r0, r1
   80aae:	2e02      	cmp	r6, #2
   80ab0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80ab4:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80ab8:	d023      	beq.n	80b02 <__register_exitproc+0x92>
   80aba:	3202      	adds	r2, #2
   80abc:	f8c3 e004 	str.w	lr, [r3, #4]
   80ac0:	6828      	ldr	r0, [r5, #0]
   80ac2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80ac6:	f7ff ffd1 	bl	80a6c <__retarget_lock_release_recursive>
   80aca:	2000      	movs	r0, #0
   80acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80ad0:	4b17      	ldr	r3, [pc, #92]	; (80b30 <__register_exitproc+0xc0>)
   80ad2:	b30b      	cbz	r3, 80b18 <__register_exitproc+0xa8>
   80ad4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80ad8:	f3af 8000 	nop.w
   80adc:	4603      	mov	r3, r0
   80ade:	b1d8      	cbz	r0, 80b18 <__register_exitproc+0xa8>
   80ae0:	2000      	movs	r0, #0
   80ae2:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80ae6:	f04f 0e01 	mov.w	lr, #1
   80aea:	6058      	str	r0, [r3, #4]
   80aec:	6019      	str	r1, [r3, #0]
   80aee:	4602      	mov	r2, r0
   80af0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80af4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80af8:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80afc:	2e00      	cmp	r6, #0
   80afe:	d0dc      	beq.n	80aba <__register_exitproc+0x4a>
   80b00:	e7cc      	b.n	80a9c <__register_exitproc+0x2c>
   80b02:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80b06:	4301      	orrs	r1, r0
   80b08:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80b0c:	e7d5      	b.n	80aba <__register_exitproc+0x4a>
   80b0e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80b12:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80b16:	e7bb      	b.n	80a90 <__register_exitproc+0x20>
   80b18:	6828      	ldr	r0, [r5, #0]
   80b1a:	f7ff ffa7 	bl	80a6c <__retarget_lock_release_recursive>
   80b1e:	f04f 30ff 	mov.w	r0, #4294967295
   80b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80b26:	bf00      	nop
   80b28:	20000430 	.word	0x20000430
   80b2c:	00080b9c 	.word	0x00080b9c
   80b30:	00000000 	.word	0x00000000
   80b34:	304e4143 	.word	0x304e4143
   80b38:	73656d20 	.word	0x73656d20
   80b3c:	65676173 	.word	0x65676173
   80b40:	72726120 	.word	0x72726120
   80b44:	64657669 	.word	0x64657669
   80b48:	206e6920 	.word	0x206e6920
   80b4c:	2d6e6f6e 	.word	0x2d6e6f6e
   80b50:	64657375 	.word	0x64657375
   80b54:	69616d20 	.word	0x69616d20
   80b58:	786f626c 	.word	0x786f626c
   80b5c:	00000d0a 	.word	0x00000d0a
   80b60:	636c6557 	.word	0x636c6557
   80b64:	20656d6f 	.word	0x20656d6f
   80b68:	54547550 	.word	0x54547550
   80b6c:	0a732759 	.word	0x0a732759
   80b70:	0000000d 	.word	0x0000000d
   80b74:	6c756e28 	.word	0x6c756e28
   80b78:	0000296c 	.word	0x0000296c
   80b7c:	3a525245 	.word	0x3a525245
   80b80:	52415520 	.word	0x52415520
   80b84:	58522054 	.word	0x58522054
   80b88:	66756220 	.word	0x66756220
   80b8c:	20726566 	.word	0x20726566
   80b90:	66207369 	.word	0x66207369
   80b94:	0a6c6c75 	.word	0x0a6c6c75
   80b98:	0000000d 	.word	0x0000000d

00080b9c <_global_impure_ptr>:
   80b9c:	20000008                                ... 

00080ba0 <_init>:
   80ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80ba2:	bf00      	nop
   80ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80ba6:	bc08      	pop	{r3}
   80ba8:	469e      	mov	lr, r3
   80baa:	4770      	bx	lr

00080bac <__init_array_start>:
   80bac:	00080a15 	.word	0x00080a15

00080bb0 <__frame_dummy_init_array_entry>:
   80bb0:	00080119                                ....

00080bb4 <_fini>:
   80bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80bb6:	bf00      	nop
   80bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80bba:	bc08      	pop	{r3}
   80bbc:	469e      	mov	lr, r3
   80bbe:	4770      	bx	lr

00080bc0 <__fini_array_start>:
   80bc0:	000800f5 	.word	0x000800f5
