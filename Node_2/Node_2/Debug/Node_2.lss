
Node_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e90  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00081e90  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c0  20000434  000822c4  00020434  2**2
                  ALLOC
  3 .stack        00000404  200004f4  00082384  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008f8  00082788  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00008262  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000156c  00000000  00000000  00028718  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000012dc  00000000  00000000  00029c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000248  00000000  00000000  0002af60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  0002b1a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001329f  00000000  00000000  0002b3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000056ca  00000000  00000000  0003e647  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000552d4  00000000  00000000  00043d11  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000008e4  00000000  00000000  00098fe8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	f8 08 00 20 59 04 08 00 55 04 08 00 55 04 08 00     ... Y...U...U...
   80010:	55 04 08 00 55 04 08 00 55 04 08 00 00 00 00 00     U...U...U.......
	...
   8002c:	55 04 08 00 55 04 08 00 00 00 00 00 55 04 08 00     U...U.......U...
   8003c:	55 04 08 00 55 04 08 00 55 04 08 00 55 04 08 00     U...U...U...U...
   8004c:	55 04 08 00 55 04 08 00 55 04 08 00 55 04 08 00     U...U...U...U...
   8005c:	55 04 08 00 61 0e 08 00 55 04 08 00 00 00 00 00     U...a...U.......
   8006c:	55 04 08 00 55 04 08 00 55 04 08 00 55 04 08 00     U...U...U...U...
	...
   80084:	55 04 08 00 55 04 08 00 55 04 08 00 55 04 08 00     U...U...U...U...
   80094:	55 04 08 00 55 04 08 00 55 04 08 00 55 04 08 00     U...U...U...U...
   800a4:	00 00 00 00 55 04 08 00 d5 0a 08 00 55 04 08 00     ....U.......U...
   800b4:	55 04 08 00 55 04 08 00 55 04 08 00 55 04 08 00     U...U...U...U...
   800c4:	55 04 08 00 55 04 08 00 55 04 08 00 55 04 08 00     U...U...U...U...
   800d4:	55 04 08 00 55 04 08 00 55 04 08 00 55 04 08 00     U...U...U...U...
   800e4:	55 04 08 00 55 04 08 00 91 03 08 00 55 04 08 00     U...U.......U...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00081e90 	.word	0x00081e90

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081e90 	.word	0x00081e90
   80154:	20000438 	.word	0x20000438
   80158:	00081e90 	.word	0x00081e90
   8015c:	00000000 	.word	0x00000000

00080160 <Analog_IO_init>:
#include "Analog_IO.h"
#include "Timer.h"

void Analog_IO_init(void){
	/* Set up IR detection ADC */
	ADC -> ADC_WPMR &= ~ADC_WPMR_WPEN;		// Disable ADC Write protection 
   80160:	4b18      	ldr	r3, [pc, #96]	; (801c4 <Analog_IO_init+0x64>)
   80162:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   80166:	f022 0201 	bic.w	r2, r2, #1
   8016a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC -> PMC_PCER1 |= PMC_PCER1_PID37;	// Enable peripheral clock for ADC
   8016e:	4a16      	ldr	r2, [pc, #88]	; (801c8 <Analog_IO_init+0x68>)
   80170:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   80174:	f041 0120 	orr.w	r1, r1, #32
   80178:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100

	// Define ADC7 on port A PIN 16
	ADC -> ADC_MR = ADC_MR_FREERUN | ADC_MR_PRESCAL(255);		// ADC set to Freerun mode, default single ended mode and prescaler
   8017c:	f64f 7180 	movw	r1, #65408	; 0xff80
   80180:	6059      	str	r1, [r3, #4]
 	ADC -> ADC_CHER |= ADC_CHER_CH7;		// Enables channel 7
   80182:	6919      	ldr	r1, [r3, #16]
   80184:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   80188:	6119      	str	r1, [r3, #16]
	ADC -> ADC_CR |= ADC_CR_START;			// Begins analog-to-digital conversion
   8018a:	6819      	ldr	r1, [r3, #0]
   8018c:	f041 0102 	orr.w	r1, r1, #2
   80190:	6019      	str	r1, [r3, #0]
	//ADC -> ADC_CWR = ADC_CWR_LOWTHRES(800); 	



	/* Set up motor DAC (MJEX) */
	DACC -> DACC_WPMR &= ~ DACC_WPMR_WPEN;	// Disable DAC Write protection 
   80192:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   80196:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
   8019a:	f021 0101 	bic.w	r1, r1, #1
   8019e:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
	PMC -> PMC_PCER1 |= PMC_PCER1_PID38;	// Enable peripheral clock for DAC
   801a2:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   801a6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   801aa:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	
	// Define DAC1 on port B PIN 16
	DACC -> DACC_MR |= DACC_MR_USER_SEL_CHANNEL1;	// Selects channel 1
   801ae:	685a      	ldr	r2, [r3, #4]
   801b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   801b4:	605a      	str	r2, [r3, #4]
	DACC -> DACC_CHER |= DACC_CHER_CH1;				// Enables channel 1
   801b6:	691a      	ldr	r2, [r3, #16]
   801b8:	f042 0202 	orr.w	r2, r2, #2
   801bc:	611a      	str	r2, [r3, #16]
	DACC -> DACC_CDR = 0;							// Set initial value to zero.
   801be:	2200      	movs	r2, #0
   801c0:	621a      	str	r2, [r3, #32]
   801c2:	4770      	bx	lr
   801c4:	400c0000 	.word	0x400c0000
   801c8:	400e0600 	.word	0x400e0600

000801cc <IR_detection>:
//void ADC_Handler(void){
//	game_score = game_score + 1;
//	set_green_LED;
//}

uint8_t IR_detection(void){
   801cc:	b508      	push	{r3, lr}
	uint8_t score = 0;
	if(Read_IR_VALUE < 100){
   801ce:	4b08      	ldr	r3, [pc, #32]	; (801f0 <IR_detection+0x24>)
   801d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   801d2:	2b63      	cmp	r3, #99	; 0x63
   801d4:	d901      	bls.n	801da <IR_detection+0xe>
	uint8_t score = 0;
   801d6:	2000      	movs	r0, #0
		if(Read_IR_VALUE < 400){
			score = 1;
		}
	}
	return score;
}
   801d8:	bd08      	pop	{r3, pc}
		_delay_ms(20);
   801da:	2014      	movs	r0, #20
   801dc:	4b05      	ldr	r3, [pc, #20]	; (801f4 <IR_detection+0x28>)
   801de:	4798      	blx	r3
		if(Read_IR_VALUE < 400){
   801e0:	4b03      	ldr	r3, [pc, #12]	; (801f0 <IR_detection+0x24>)
   801e2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
	uint8_t score = 0;
   801e4:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   801e8:	bf2c      	ite	cs
   801ea:	2000      	movcs	r0, #0
   801ec:	2001      	movcc	r0, #1
   801ee:	bd08      	pop	{r3, pc}
   801f0:	400c0000 	.word	0x400c0000
   801f4:	00080a4d 	.word	0x00080a4d

000801f8 <set_analog_value>:

void set_analog_value(uint16_t value){
	if(value > 4095){
		value = 4095;
	}
	DACC -> DACC_CDR = value;//*4095/100;	 
   801f8:	f640 73ff 	movw	r3, #4095	; 0xfff
   801fc:	4298      	cmp	r0, r3
   801fe:	bf28      	it	cs
   80200:	4618      	movcs	r0, r3
   80202:	4b01      	ldr	r3, [pc, #4]	; (80208 <set_analog_value+0x10>)
   80204:	6218      	str	r0, [r3, #32]
   80206:	4770      	bx	lr
   80208:	400c8000 	.word	0x400c8000

0008020c <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   8020c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80210:	1855      	adds	r5, r2, r1
   80212:	2908      	cmp	r1, #8
   80214:	bf98      	it	ls
   80216:	2a08      	cmpls	r2, #8
   80218:	d864      	bhi.n	802e4 <can_init+0xd8>
   8021a:	460e      	mov	r6, r1
   8021c:	2d08      	cmp	r5, #8
   8021e:	dc61      	bgt.n	802e4 <can_init+0xd8>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   80220:	4a32      	ldr	r2, [pc, #200]	; (802ec <can_init+0xe0>)
   80222:	6813      	ldr	r3, [r2, #0]
   80224:	f023 0301 	bic.w	r3, r3, #1
   80228:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   8022a:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   8022c:	4b30      	ldr	r3, [pc, #192]	; (802f0 <can_init+0xe4>)
   8022e:	f44f 7440 	mov.w	r4, #768	; 0x300
   80232:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   80234:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   80236:	f024 0403 	bic.w	r4, r4, #3
   8023a:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   8023c:	2403      	movs	r4, #3
   8023e:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   80240:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   80242:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80246:	4c2b      	ldr	r4, [pc, #172]	; (802f4 <can_init+0xe8>)
   80248:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   8024c:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   80250:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   80254:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   80258:	6150      	str	r0, [r2, #20]
	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   8025a:	42a9      	cmp	r1, r5
   8025c:	dc40      	bgt.n	802e0 <can_init+0xd4>
   8025e:	460a      	mov	r2, r1
   80260:	2400      	movs	r4, #0
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   80262:	46a1      	mov	r9, r4
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80264:	f8df 8084 	ldr.w	r8, [pc, #132]	; 802ec <can_init+0xe0>
   80268:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   8026c:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   80270:	2701      	movs	r7, #1
   80272:	0153      	lsls	r3, r2, #5
   80274:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   80278:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   8027c:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80280:	4443      	add	r3, r8
   80282:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   80286:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   8028a:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   8028e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80292:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   80296:	fa07 f302 	lsl.w	r3, r7, r2
   8029a:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   8029c:	3201      	adds	r2, #1
   8029e:	4295      	cmp	r5, r2
   802a0:	dae7      	bge.n	80272 <can_init+0x66>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
   802a2:	b181      	cbz	r1, 802c6 <can_init+0xba>
   802a4:	2300      	movs	r3, #0
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   802a6:	4911      	ldr	r1, [pc, #68]	; (802ec <can_init+0xe0>)
   802a8:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   802ac:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   802b0:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   802b4:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   802b8:	f103 0210 	add.w	r2, r3, #16
   802bc:	0152      	lsls	r2, r2, #5
   802be:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   802c0:	3301      	adds	r3, #1
   802c2:	429e      	cmp	r6, r3
   802c4:	d1f4      	bne.n	802b0 <can_init+0xa4>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   802c6:	4b09      	ldr	r3, [pc, #36]	; (802ec <can_init+0xe0>)
   802c8:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   802ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
   802ce:	4a0a      	ldr	r2, [pc, #40]	; (802f8 <can_init+0xec>)
   802d0:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   802d2:	681a      	ldr	r2, [r3, #0]
   802d4:	f042 0201 	orr.w	r2, r2, #1
   802d8:	601a      	str	r2, [r3, #0]

	return 0;
   802da:	2000      	movs	r0, #0
   802dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t can_ier = 0;
   802e0:	2400      	movs	r4, #0
   802e2:	e7de      	b.n	802a2 <can_init+0x96>
		return 1; //Too many mailboxes is configured
   802e4:	2001      	movs	r0, #1
}
   802e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   802ea:	bf00      	nop
   802ec:	400b4000 	.word	0x400b4000
   802f0:	400e0e00 	.word	0x400e0e00
   802f4:	1000102b 	.word	0x1000102b
   802f8:	e000e100 	.word	0xe000e100

000802fc <can_init_def_tx_rx_mb>:
{
   802fc:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   802fe:	2202      	movs	r2, #2
   80300:	2101      	movs	r1, #1
   80302:	4b01      	ldr	r3, [pc, #4]	; (80308 <can_init_def_tx_rx_mb+0xc>)
   80304:	4798      	blx	r3
}
   80306:	bd08      	pop	{r3, pc}
   80308:	0008020d 	.word	0x0008020d

0008030c <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   8030c:	014b      	lsls	r3, r1, #5
   8030e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80312:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80316:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8031a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   8031e:	d033      	beq.n	80388 <can_receive+0x7c>
{
   80320:	b430      	push	{r4, r5}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   80322:	014b      	lsls	r3, r1, #5
   80324:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80328:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8032c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80330:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80334:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80338:	f3c5 458a 	ubfx	r5, r5, #18, #11
   8033c:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   8033e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80342:	f3c3 4303 	ubfx	r3, r3, #16, #4
   80346:	7083      	strb	r3, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   80348:	461d      	mov	r5, r3
   8034a:	b15b      	cbz	r3, 80364 <can_receive+0x58>
   8034c:	3003      	adds	r0, #3
   8034e:	2300      	movs	r3, #0
		{
			if(i < 4)
   80350:	2b03      	cmp	r3, #3
			{
				can_msg->data[i] = (char)(data_low & 0xff);
   80352:	bfd9      	ittee	le
   80354:	7002      	strble	r2, [r0, #0]
				data_low = data_low >> 8;
   80356:	0a12      	lsrle	r2, r2, #8
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   80358:	7004      	strbgt	r4, [r0, #0]
				data_high = data_high >> 8;
   8035a:	0a24      	lsrgt	r4, r4, #8
		for(int i = 0; i < can_msg->data_length;i++)
   8035c:	3301      	adds	r3, #1
   8035e:	3001      	adds	r0, #1
   80360:	42ab      	cmp	r3, r5
   80362:	d1f5      	bne.n	80350 <can_receive+0x44>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   80364:	4b09      	ldr	r3, [pc, #36]	; (8038c <can_receive+0x80>)
   80366:	f101 0210 	add.w	r2, r1, #16
   8036a:	0152      	lsls	r2, r2, #5
   8036c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   80370:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   80372:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   80376:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   8037a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8037e:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   80382:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   80384:	bc30      	pop	{r4, r5}
   80386:	4770      	bx	lr
		return 1;
   80388:	2001      	movs	r0, #1
   8038a:	4770      	bx	lr
   8038c:	400b4000 	.word	0x400b4000

00080390 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   80390:	b510      	push	{r4, lr}
   80392:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   80394:	4b27      	ldr	r3, [pc, #156]	; (80434 <CAN0_Handler+0xa4>)
   80396:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   80398:	f014 0f06 	tst.w	r4, #6
   8039c:	d018      	beq.n	803d0 <CAN0_Handler+0x40>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   8039e:	f014 0f02 	tst.w	r4, #2
   803a2:	d122      	bne.n	803ea <CAN0_Handler+0x5a>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   803a4:	f014 0f04 	tst.w	r4, #4
   803a8:	d024      	beq.n	803f4 <CAN0_Handler+0x64>
		
		{
			can_receive(&message, 2);
   803aa:	2102      	movs	r1, #2
   803ac:	a801      	add	r0, sp, #4
   803ae:	4b22      	ldr	r3, [pc, #136]	; (80438 <CAN0_Handler+0xa8>)
   803b0:	4798      	blx	r3
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}
		
		
		if(message.id == 3){
   803b2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   803b6:	2b03      	cmp	r3, #3
   803b8:	d020      	beq.n	803fc <CAN0_Handler+0x6c>
			set_servo_pos(message.data[1]);
			update_pos_ref(message.data[0]);
		}
		
		if(message.id == 2){
   803ba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   803be:	2b02      	cmp	r3, #2
   803c0:	d025      	beq.n	8040e <CAN0_Handler+0x7e>
			}
		}
			
		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   803c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
   803c6:	b11a      	cbz	r2, 803d0 <CAN0_Handler+0x40>
   803c8:	2300      	movs	r3, #0
   803ca:	3301      	adds	r3, #1
   803cc:	4293      	cmp	r3, r2
   803ce:	d1fc      	bne.n	803ca <CAN0_Handler+0x3a>
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	
	if(can_sr & CAN_SR_MB0)
   803d0:	f014 0f01 	tst.w	r4, #1
   803d4:	d002      	beq.n	803dc <CAN0_Handler+0x4c>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   803d6:	2201      	movs	r2, #1
   803d8:	4b16      	ldr	r3, [pc, #88]	; (80434 <CAN0_Handler+0xa4>)
   803da:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   803dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   803e0:	4b16      	ldr	r3, [pc, #88]	; (8043c <CAN0_Handler+0xac>)
   803e2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   803e6:	b004      	add	sp, #16
   803e8:	bd10      	pop	{r4, pc}
			can_receive(&message, 1);
   803ea:	2101      	movs	r1, #1
   803ec:	a801      	add	r0, sp, #4
   803ee:	4b12      	ldr	r3, [pc, #72]	; (80438 <CAN0_Handler+0xa8>)
   803f0:	4798      	blx	r3
   803f2:	e7de      	b.n	803b2 <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   803f4:	4812      	ldr	r0, [pc, #72]	; (80440 <CAN0_Handler+0xb0>)
   803f6:	4b13      	ldr	r3, [pc, #76]	; (80444 <CAN0_Handler+0xb4>)
   803f8:	4798      	blx	r3
   803fa:	e7da      	b.n	803b2 <CAN0_Handler+0x22>
			set_servo_pos(message.data[1]);
   803fc:	f89d 0008 	ldrb.w	r0, [sp, #8]
   80400:	4b11      	ldr	r3, [pc, #68]	; (80448 <CAN0_Handler+0xb8>)
   80402:	4798      	blx	r3
			update_pos_ref(message.data[0]);
   80404:	f89d 0007 	ldrb.w	r0, [sp, #7]
   80408:	4b10      	ldr	r3, [pc, #64]	; (8044c <CAN0_Handler+0xbc>)
   8040a:	4798      	blx	r3
   8040c:	e7d5      	b.n	803ba <CAN0_Handler+0x2a>
			if(message.data[0] == 1){
   8040e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   80412:	2b01      	cmp	r3, #1
   80414:	d007      	beq.n	80426 <CAN0_Handler+0x96>
			if(message.data[0] == 0){
   80416:	2b00      	cmp	r3, #0
   80418:	d1d3      	bne.n	803c2 <CAN0_Handler+0x32>
				deactivate_solenoid;
   8041a:	4a0d      	ldr	r2, [pc, #52]	; (80450 <CAN0_Handler+0xc0>)
   8041c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8041e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   80422:	6313      	str	r3, [r2, #48]	; 0x30
   80424:	e7cd      	b.n	803c2 <CAN0_Handler+0x32>
				activate_solenoid;		
   80426:	4a0a      	ldr	r2, [pc, #40]	; (80450 <CAN0_Handler+0xc0>)
   80428:	6b53      	ldr	r3, [r2, #52]	; 0x34
   8042a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   8042e:	6353      	str	r3, [r2, #52]	; 0x34
   80430:	e7c7      	b.n	803c2 <CAN0_Handler+0x32>
   80432:	bf00      	nop
   80434:	400b4000 	.word	0x400b4000
   80438:	0008030d 	.word	0x0008030d
   8043c:	e000e100 	.word	0xe000e100
   80440:	00081e08 	.word	0x00081e08
   80444:	00080db1 	.word	0x00080db1
   80448:	000809dd 	.word	0x000809dd
   8044c:	00080875 	.word	0x00080875
   80450:	400e1200 	.word	0x400e1200

00080454 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80454:	e7fe      	b.n	80454 <Dummy_Handler>
	...

00080458 <Reset_Handler>:
{
   80458:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   8045a:	4b18      	ldr	r3, [pc, #96]	; (804bc <Reset_Handler+0x64>)
   8045c:	4a18      	ldr	r2, [pc, #96]	; (804c0 <Reset_Handler+0x68>)
   8045e:	429a      	cmp	r2, r3
   80460:	d010      	beq.n	80484 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
   80462:	4b18      	ldr	r3, [pc, #96]	; (804c4 <Reset_Handler+0x6c>)
   80464:	4a15      	ldr	r2, [pc, #84]	; (804bc <Reset_Handler+0x64>)
   80466:	429a      	cmp	r2, r3
   80468:	d20c      	bcs.n	80484 <Reset_Handler+0x2c>
   8046a:	3b01      	subs	r3, #1
   8046c:	1a9b      	subs	r3, r3, r2
   8046e:	f023 0303 	bic.w	r3, r3, #3
   80472:	3304      	adds	r3, #4
   80474:	4413      	add	r3, r2
   80476:	4912      	ldr	r1, [pc, #72]	; (804c0 <Reset_Handler+0x68>)
                        *pDest++ = *pSrc++;
   80478:	f851 0b04 	ldr.w	r0, [r1], #4
   8047c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
   80480:	429a      	cmp	r2, r3
   80482:	d1f9      	bne.n	80478 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
   80484:	4b10      	ldr	r3, [pc, #64]	; (804c8 <Reset_Handler+0x70>)
   80486:	4a11      	ldr	r2, [pc, #68]	; (804cc <Reset_Handler+0x74>)
   80488:	429a      	cmp	r2, r3
   8048a:	d20a      	bcs.n	804a2 <Reset_Handler+0x4a>
   8048c:	3b01      	subs	r3, #1
   8048e:	1a9b      	subs	r3, r3, r2
   80490:	f023 0303 	bic.w	r3, r3, #3
   80494:	3304      	adds	r3, #4
   80496:	4413      	add	r3, r2
                *pDest++ = 0;
   80498:	2100      	movs	r1, #0
   8049a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
   8049e:	4293      	cmp	r3, r2
   804a0:	d1fb      	bne.n	8049a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   804a2:	4b0b      	ldr	r3, [pc, #44]	; (804d0 <Reset_Handler+0x78>)
   804a4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   804a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   804ac:	4a09      	ldr	r2, [pc, #36]	; (804d4 <Reset_Handler+0x7c>)
   804ae:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   804b0:	4b09      	ldr	r3, [pc, #36]	; (804d8 <Reset_Handler+0x80>)
   804b2:	4798      	blx	r3
        main();
   804b4:	4b09      	ldr	r3, [pc, #36]	; (804dc <Reset_Handler+0x84>)
   804b6:	4798      	blx	r3
   804b8:	e7fe      	b.n	804b8 <Reset_Handler+0x60>
   804ba:	bf00      	nop
   804bc:	20000000 	.word	0x20000000
   804c0:	00081e90 	.word	0x00081e90
   804c4:	20000434 	.word	0x20000434
   804c8:	200004f4 	.word	0x200004f4
   804cc:	20000434 	.word	0x20000434
   804d0:	00080000 	.word	0x00080000
   804d4:	e000ed00 	.word	0xe000ed00
   804d8:	00081c99 	.word	0x00081c99
   804dc:	00080685 	.word	0x00080685

000804e0 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   804e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   804e4:	4a20      	ldr	r2, [pc, #128]	; (80568 <SystemInit+0x88>)
   804e6:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   804e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
   804ec:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   804ee:	4b1f      	ldr	r3, [pc, #124]	; (8056c <SystemInit+0x8c>)
   804f0:	6a1b      	ldr	r3, [r3, #32]
   804f2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   804f6:	d107      	bne.n	80508 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   804f8:	4a1d      	ldr	r2, [pc, #116]	; (80570 <SystemInit+0x90>)
   804fa:	4b1c      	ldr	r3, [pc, #112]	; (8056c <SystemInit+0x8c>)
   804fc:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   804fe:	461a      	mov	r2, r3
   80500:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80502:	f013 0f01 	tst.w	r3, #1
   80506:	d0fb      	beq.n	80500 <SystemInit+0x20>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   80508:	4a1a      	ldr	r2, [pc, #104]	; (80574 <SystemInit+0x94>)
   8050a:	4b18      	ldr	r3, [pc, #96]	; (8056c <SystemInit+0x8c>)
   8050c:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   8050e:	461a      	mov	r2, r3
   80510:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80512:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80516:	d0fb      	beq.n	80510 <SystemInit+0x30>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80518:	4a14      	ldr	r2, [pc, #80]	; (8056c <SystemInit+0x8c>)
   8051a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8051c:	f023 0303 	bic.w	r3, r3, #3
   80520:	f043 0301 	orr.w	r3, r3, #1
   80524:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80526:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80528:	f013 0f08 	tst.w	r3, #8
   8052c:	d0fb      	beq.n	80526 <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   8052e:	4a12      	ldr	r2, [pc, #72]	; (80578 <SystemInit+0x98>)
   80530:	4b0e      	ldr	r3, [pc, #56]	; (8056c <SystemInit+0x8c>)
   80532:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80534:	461a      	mov	r2, r3
   80536:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80538:	f013 0f02 	tst.w	r3, #2
   8053c:	d0fb      	beq.n	80536 <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   8053e:	2211      	movs	r2, #17
   80540:	4b0a      	ldr	r3, [pc, #40]	; (8056c <SystemInit+0x8c>)
   80542:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80544:	461a      	mov	r2, r3
   80546:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80548:	f013 0f08 	tst.w	r3, #8
   8054c:	d0fb      	beq.n	80546 <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   8054e:	2212      	movs	r2, #18
   80550:	4b06      	ldr	r3, [pc, #24]	; (8056c <SystemInit+0x8c>)
   80552:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80554:	461a      	mov	r2, r3
   80556:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80558:	f013 0f08 	tst.w	r3, #8
   8055c:	d0fb      	beq.n	80556 <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   8055e:	4a07      	ldr	r2, [pc, #28]	; (8057c <SystemInit+0x9c>)
   80560:	4b07      	ldr	r3, [pc, #28]	; (80580 <SystemInit+0xa0>)
   80562:	601a      	str	r2, [r3, #0]
   80564:	4770      	bx	lr
   80566:	bf00      	nop
   80568:	400e0a00 	.word	0x400e0a00
   8056c:	400e0600 	.word	0x400e0600
   80570:	00370809 	.word	0x00370809
   80574:	01370809 	.word	0x01370809
   80578:	200d3f01 	.word	0x200d3f01
   8057c:	0501bd00 	.word	0x0501bd00
   80580:	20000000 	.word	0x20000000

00080584 <IO_Init>:
#include "IO.h"

void IO_Init(void){
	
	/* Set up LEDS */
	PIOA -> PIO_WPMR &= ~PIO_WPMR_WPEN;	// Disable IO Write protection PIOA
   80584:	4b3b      	ldr	r3, [pc, #236]	; (80674 <IO_Init+0xf0>)
   80586:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   8058a:	f022 0201 	bic.w	r2, r2, #1
   8058e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER0 |= PMC_PCER0_PID11;  // Enable peripheral clock for PIOA
   80592:	4939      	ldr	r1, [pc, #228]	; (80678 <IO_Init+0xf4>)
   80594:	690a      	ldr	r2, [r1, #16]
   80596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8059a:	610a      	str	r2, [r1, #16]
	// Define Pin 19 on port A as output
	PIOA -> PIO_PER |= PIO_PER_P19;		// PIO enable
   8059c:	681a      	ldr	r2, [r3, #0]
   8059e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   805a2:	601a      	str	r2, [r3, #0]
	PIOA -> PIO_OER |= PIO_OER_P19;		// P19 Configured as output (D1)
   805a4:	691a      	ldr	r2, [r3, #16]
   805a6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   805aa:	611a      	str	r2, [r3, #16]
	// Define Pin 19 on port A as output
	PIOA -> PIO_PER |= PIO_PER_P20;		// PIO enable
   805ac:	681a      	ldr	r2, [r3, #0]
   805ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   805b2:	601a      	str	r2, [r3, #0]
	PIOA -> PIO_OER |= PIO_OER_P20;		// P20 Configured as output (D2)
   805b4:	691a      	ldr	r2, [r3, #16]
   805b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   805ba:	611a      	str	r2, [r3, #16]
	
	
	/* Set up Solenoid */
	PIOC -> PIO_WPMR &= ~PIO_WPMR_WPEN; // Disable IO Write protection PIOC
   805bc:	4a2f      	ldr	r2, [pc, #188]	; (8067c <IO_Init+0xf8>)
   805be:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   805c2:	f023 0301 	bic.w	r3, r3, #1
   805c6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	PMC->PMC_PCER0 |= PMC_PCER0_PID13;  // Enable peripheral clock for PIOC	
   805ca:	690b      	ldr	r3, [r1, #16]
   805cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   805d0:	610b      	str	r3, [r1, #16]
	// Define Pin 19 on port A as output
	PIOC -> PIO_PER |= PIO_PER_P12;		// PIO enable
   805d2:	6813      	ldr	r3, [r2, #0]
   805d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   805d8:	6013      	str	r3, [r2, #0]
	PIOC -> PIO_OER |= PIO_OER_P12;		// P19 Configured as output (D1)
   805da:	6913      	ldr	r3, [r2, #16]
   805dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   805e0:	6113      	str	r3, [r2, #16]
	deactivate_solenoid;
   805e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   805e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   805e8:	6313      	str	r3, [r2, #48]	; 0x30
	
	
	/* Set up MJ1 */
	PIOD -> PIO_WPMR &= ~PIO_WPMR_WPEN;	// Disable IO Write protection PIOD
   805ea:	4b25      	ldr	r3, [pc, #148]	; (80680 <IO_Init+0xfc>)
   805ec:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
   805f0:	f020 0001 	bic.w	r0, r0, #1
   805f4:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
	PMC->PMC_PCER0 |= PMC_PCER0_PID14;  // Enable peripheral clock for PIOD
   805f8:	6908      	ldr	r0, [r1, #16]
   805fa:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
   805fe:	6108      	str	r0, [r1, #16]
	
	// Define Pin 0 on port D as output
	PIOD -> PIO_PER |= PIO_PER_P0;		// PIO enable
   80600:	6819      	ldr	r1, [r3, #0]
   80602:	f041 0101 	orr.w	r1, r1, #1
   80606:	6019      	str	r1, [r3, #0]
	PIOD -> PIO_OER |= PIO_OER_P0;		// P19 Configured as output (!OE enable encoder (Pin3))
   80608:	6919      	ldr	r1, [r3, #16]
   8060a:	f041 0101 	orr.w	r1, r1, #1
   8060e:	6119      	str	r1, [r3, #16]
	disable_encoder;
   80610:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80612:	f041 0101 	orr.w	r1, r1, #1
   80616:	6319      	str	r1, [r3, #48]	; 0x30
	
	// Define Pin 1 on port D as output
	PIOD -> PIO_PER |= PIO_PER_P1;		// PIO enable
   80618:	6819      	ldr	r1, [r3, #0]
   8061a:	f041 0102 	orr.w	r1, r1, #2
   8061e:	6019      	str	r1, [r3, #0]
	PIOD -> PIO_OER |= PIO_OER_P1;		// P19 Configured as output (!RST reset encoder (Pin4))
   80620:	6919      	ldr	r1, [r3, #16]
   80622:	f041 0102 	orr.w	r1, r1, #2
   80626:	6119      	str	r1, [r3, #16]
	disable_encoder_reset;
   80628:	6b19      	ldr	r1, [r3, #48]	; 0x30
   8062a:	f041 0102 	orr.w	r1, r1, #2
   8062e:	6319      	str	r1, [r3, #48]	; 0x30
	
	// Define Pin 2 on port D as output
	PIOD -> PIO_PER |= PIO_PER_P2;		// PIO enable
   80630:	6819      	ldr	r1, [r3, #0]
   80632:	f041 0104 	orr.w	r1, r1, #4
   80636:	6019      	str	r1, [r3, #0]
	PIOD -> PIO_OER |= PIO_OER_P2;		// P19 Configured as output (SEL High/low byte select encoder (pin5))
   80638:	6919      	ldr	r1, [r3, #16]
   8063a:	f041 0104 	orr.w	r1, r1, #4
   8063e:	6119      	str	r1, [r3, #16]
	// Define Pin 9 on port D as output
	PIOD -> PIO_PER |= PIO_PER_P9;		// PIO enable
   80640:	6819      	ldr	r1, [r3, #0]
   80642:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   80646:	6019      	str	r1, [r3, #0]
	PIOD -> PIO_OER |= PIO_OER_P9;		// P19 Configured as output (EN Enables motor (pin6))
   80648:	6919      	ldr	r1, [r3, #16]
   8064a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   8064e:	6119      	str	r1, [r3, #16]
	// Define Pin 10 on port D as output
	PIOD -> PIO_PER |= PIO_PER_P10;		// PIO enable
   80650:	6819      	ldr	r1, [r3, #0]
   80652:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
   80656:	6019      	str	r1, [r3, #0]
	PIOD -> PIO_OER |= PIO_OER_P10;		// P19 Configured as output (DIR Set motor direction (Pin7))
   80658:	6919      	ldr	r1, [r3, #16]
   8065a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
   8065e:	6119      	str	r1, [r3, #16]
	
	
	
	/* Set up MJ2 */
	// Define Pin 1 to 8 on port C as input
	PIOC -> PIO_PER |= 0x1FE;
   80660:	6813      	ldr	r3, [r2, #0]
   80662:	f443 73ff 	orr.w	r3, r3, #510	; 0x1fe
   80666:	6013      	str	r3, [r2, #0]
	PIOC -> PIO_ODR |= 0x1FE;
   80668:	6953      	ldr	r3, [r2, #20]
   8066a:	f443 73ff 	orr.w	r3, r3, #510	; 0x1fe
   8066e:	6153      	str	r3, [r2, #20]
   80670:	4770      	bx	lr
   80672:	bf00      	nop
   80674:	400e0e00 	.word	0x400e0e00
   80678:	400e0600 	.word	0x400e0600
   8067c:	400e1200 	.word	0x400e1200
   80680:	400e1400 	.word	0x400e1400

00080684 <main>:

CAN_MESSAGE game_over;


int main(void)
{
   80684:	b580      	push	{r7, lr}
	/* Initialize the SAM system */
    SystemInit();
   80686:	4b1a      	ldr	r3, [pc, #104]	; (806f0 <main+0x6c>)
   80688:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS; //Disable Watchdog Timer
   8068a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8068e:	4b19      	ldr	r3, [pc, #100]	; (806f4 <main+0x70>)
   80690:	605a      	str	r2, [r3, #4]
		
	configure_uart();
   80692:	4b19      	ldr	r3, [pc, #100]	; (806f8 <main+0x74>)
   80694:	4798      	blx	r3
	can_init_def_tx_rx_mb(0x00290165);		//see can config sheet on github
   80696:	4819      	ldr	r0, [pc, #100]	; (806fc <main+0x78>)
   80698:	4b19      	ldr	r3, [pc, #100]	; (80700 <main+0x7c>)
   8069a:	4798      	blx	r3
	IO_Init();
   8069c:	4b19      	ldr	r3, [pc, #100]	; (80704 <main+0x80>)
   8069e:	4798      	blx	r3
	Analog_IO_init();
   806a0:	4b19      	ldr	r3, [pc, #100]	; (80708 <main+0x84>)
   806a2:	4798      	blx	r3
	PWM_init();
   806a4:	4b19      	ldr	r3, [pc, #100]	; (8070c <main+0x88>)
   806a6:	4798      	blx	r3
	Timer_init();
   806a8:	4b19      	ldr	r3, [pc, #100]	; (80710 <main+0x8c>)
   806aa:	4798      	blx	r3
	motor_init();
   806ac:	4b19      	ldr	r3, [pc, #100]	; (80714 <main+0x90>)
   806ae:	4798      	blx	r3
	
	
	//printf("Welcome PuTTY's\n\r");
	//set_orange_LED;
	
	game_over.id = 1;
   806b0:	4b19      	ldr	r3, [pc, #100]	; (80718 <main+0x94>)
   806b2:	2201      	movs	r2, #1
   806b4:	801a      	strh	r2, [r3, #0]
	game_over.data_length = 1;
   806b6:	709a      	strb	r2, [r3, #2]
	game_over.data[0] = 0;
   806b8:	2200      	movs	r2, #0
   806ba:	70da      	strb	r2, [r3, #3]
	//set_green_LED;
	
	
	game_score = 0;
   806bc:	4b17      	ldr	r3, [pc, #92]	; (8071c <main+0x98>)
   806be:	701a      	strb	r2, [r3, #0]
    while (1) 
    {
		if(IR_detection() == 1){
   806c0:	4d17      	ldr	r5, [pc, #92]	; (80720 <main+0x9c>)
			game_score = game_score + 1;
   806c2:	461e      	mov	r6, r3
			printf("score = %d\n", game_score);
   806c4:	4f17      	ldr	r7, [pc, #92]	; (80724 <main+0xa0>)
			//can_send(game_over, 1);
		//}
		
		
		
		if(TC0_flag == 1){
   806c6:	4c18      	ldr	r4, [pc, #96]	; (80728 <main+0xa4>)
   806c8:	e003      	b.n	806d2 <main+0x4e>
   806ca:	7823      	ldrb	r3, [r4, #0]
   806cc:	b2db      	uxtb	r3, r3
   806ce:	2b01      	cmp	r3, #1
   806d0:	d00a      	beq.n	806e8 <main+0x64>
		if(IR_detection() == 1){
   806d2:	47a8      	blx	r5
   806d4:	2801      	cmp	r0, #1
   806d6:	d1f8      	bne.n	806ca <main+0x46>
			game_score = game_score + 1;
   806d8:	7831      	ldrb	r1, [r6, #0]
   806da:	3101      	adds	r1, #1
   806dc:	b249      	sxtb	r1, r1
   806de:	7031      	strb	r1, [r6, #0]
			printf("score = %d\n", game_score);
   806e0:	4638      	mov	r0, r7
   806e2:	4b12      	ldr	r3, [pc, #72]	; (8072c <main+0xa8>)
   806e4:	4798      	blx	r3
   806e6:	e7f0      	b.n	806ca <main+0x46>
			TC0_flag  == 0;
   806e8:	7823      	ldrb	r3, [r4, #0]
			PID_regulator();	
   806ea:	4b11      	ldr	r3, [pc, #68]	; (80730 <main+0xac>)
   806ec:	4798      	blx	r3
   806ee:	e7f0      	b.n	806d2 <main+0x4e>
   806f0:	000804e1 	.word	0x000804e1
   806f4:	400e1a50 	.word	0x400e1a50
   806f8:	00080dd5 	.word	0x00080dd5
   806fc:	00290165 	.word	0x00290165
   80700:	000802fd 	.word	0x000802fd
   80704:	00080585 	.word	0x00080585
   80708:	00080161 	.word	0x00080161
   8070c:	00080975 	.word	0x00080975
   80710:	00080a6d 	.word	0x00080a6d
   80714:	000807f5 	.word	0x000807f5
   80718:	20000480 	.word	0x20000480
   8071c:	20000454 	.word	0x20000454
   80720:	000801cd 	.word	0x000801cd
   80724:	00081e34 	.word	0x00081e34
   80728:	20000455 	.word	0x20000455
   8072c:	00080db1 	.word	0x00080db1
   80730:	000808b1 	.word	0x000808b1

00080734 <read_encoder>:
	PID.Ki = 0.2;
			
	}
	
	
int16_t read_encoder(void){
   80734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int16_t pos_and_direction = 0;
	enable_encoder;
   80736:	4c0f      	ldr	r4, [pc, #60]	; (80774 <read_encoder+0x40>)
   80738:	6b63      	ldr	r3, [r4, #52]	; 0x34
   8073a:	f043 0301 	orr.w	r3, r3, #1
   8073e:	6363      	str	r3, [r4, #52]	; 0x34
	sel_MSB_encoder;	
   80740:	6b63      	ldr	r3, [r4, #52]	; 0x34
   80742:	f043 0304 	orr.w	r3, r3, #4
   80746:	6363      	str	r3, [r4, #52]	; 0x34
	_delay_us(20);
   80748:	2014      	movs	r0, #20
   8074a:	4f0b      	ldr	r7, [pc, #44]	; (80778 <read_encoder+0x44>)
   8074c:	47b8      	blx	r7
	pos_and_direction |= ((read_encoder_mask >> 1) << 8);
   8074e:	4e0b      	ldr	r6, [pc, #44]	; (8077c <read_encoder+0x48>)
   80750:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
	sel_LSB_encoder;
   80752:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80754:	f043 0304 	orr.w	r3, r3, #4
   80758:	6323      	str	r3, [r4, #48]	; 0x30
	_delay_us(20);
   8075a:	2014      	movs	r0, #20
   8075c:	47b8      	blx	r7
	pos_and_direction |= (read_encoder_mask >> 1);
   8075e:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
	//enable_encoder_reset
	//_delay_us(10);
	//disable_encoder_reset;
	disable_encoder;	
   80760:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80762:	f043 0301 	orr.w	r3, r3, #1
   80766:	6323      	str	r3, [r4, #48]	; 0x30
	pos_and_direction |= (read_encoder_mask >> 1);
   80768:	b2c0      	uxtb	r0, r0
   8076a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	return pos_and_direction;
}
   8076e:	b200      	sxth	r0, r0
   80770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80772:	bf00      	nop
   80774:	400e1400 	.word	0x400e1400
   80778:	00080a09 	.word	0x00080a09
   8077c:	400e1200 	.word	0x400e1200

00080780 <reset_encoder>:


void reset_encoder(void){
   80780:	b510      	push	{r4, lr}
	enable_encoder;
   80782:	4c0a      	ldr	r4, [pc, #40]	; (807ac <reset_encoder+0x2c>)
   80784:	6b63      	ldr	r3, [r4, #52]	; 0x34
   80786:	f043 0301 	orr.w	r3, r3, #1
   8078a:	6363      	str	r3, [r4, #52]	; 0x34
	enable_encoder_reset;
   8078c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   8078e:	f043 0302 	orr.w	r3, r3, #2
   80792:	6363      	str	r3, [r4, #52]	; 0x34
	_delay_us(10);
   80794:	200a      	movs	r0, #10
   80796:	4b06      	ldr	r3, [pc, #24]	; (807b0 <reset_encoder+0x30>)
   80798:	4798      	blx	r3
	disable_encoder_reset;
   8079a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8079c:	f043 0302 	orr.w	r3, r3, #2
   807a0:	6323      	str	r3, [r4, #48]	; 0x30
	disable_encoder;
   807a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   807a4:	f043 0301 	orr.w	r3, r3, #1
   807a8:	6323      	str	r3, [r4, #48]	; 0x30
   807aa:	bd10      	pop	{r4, pc}
   807ac:	400e1400 	.word	0x400e1400
   807b0:	00080a09 	.word	0x00080a09

000807b4 <set_motor_speed>:
}


void set_motor_speed(int16_t speed_and_direction){
   807b4:	b508      	push	{r3, lr}
	if (speed_and_direction < 0){
   807b6:	2800      	cmp	r0, #0
   807b8:	db0b      	blt.n	807d2 <set_motor_speed+0x1e>
		set_neg_motor_dir;
		set_analog_value(abs(speed_and_direction));
	}
	else{
		set_pos_motor_dir;		
   807ba:	4a0c      	ldr	r2, [pc, #48]	; (807ec <set_motor_speed+0x38>)
   807bc:	6b53      	ldr	r3, [r2, #52]	; 0x34
   807be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   807c2:	6353      	str	r3, [r2, #52]	; 0x34
		set_analog_value(abs(speed_and_direction));
   807c4:	2800      	cmp	r0, #0
   807c6:	bfb8      	it	lt
   807c8:	4240      	neglt	r0, r0
   807ca:	b280      	uxth	r0, r0
   807cc:	4b08      	ldr	r3, [pc, #32]	; (807f0 <set_motor_speed+0x3c>)
   807ce:	4798      	blx	r3
   807d0:	bd08      	pop	{r3, pc}
		set_neg_motor_dir;
   807d2:	4a06      	ldr	r2, [pc, #24]	; (807ec <set_motor_speed+0x38>)
   807d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   807d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   807da:	6313      	str	r3, [r2, #48]	; 0x30
		set_analog_value(abs(speed_and_direction));
   807dc:	2800      	cmp	r0, #0
   807de:	bfb8      	it	lt
   807e0:	4240      	neglt	r0, r0
   807e2:	b280      	uxth	r0, r0
   807e4:	4b02      	ldr	r3, [pc, #8]	; (807f0 <set_motor_speed+0x3c>)
   807e6:	4798      	blx	r3
   807e8:	bd08      	pop	{r3, pc}
   807ea:	bf00      	nop
   807ec:	400e1400 	.word	0x400e1400
   807f0:	000801f9 	.word	0x000801f9

000807f4 <motor_init>:
void motor_init(void){
   807f4:	b538      	push	{r3, r4, r5, lr}
	enable_motor;
   807f6:	4a15      	ldr	r2, [pc, #84]	; (8084c <motor_init+0x58>)
   807f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   807fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   807fe:	6313      	str	r3, [r2, #48]	; 0x30
	set_motor_speed(-2000);
   80800:	4813      	ldr	r0, [pc, #76]	; (80850 <motor_init+0x5c>)
   80802:	4c14      	ldr	r4, [pc, #80]	; (80854 <motor_init+0x60>)
   80804:	47a0      	blx	r4
	_delay_ms(1000);
   80806:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   8080a:	4d13      	ldr	r5, [pc, #76]	; (80858 <motor_init+0x64>)
   8080c:	47a8      	blx	r5
	reset_encoder();
   8080e:	4b13      	ldr	r3, [pc, #76]	; (8085c <motor_init+0x68>)
   80810:	4798      	blx	r3
	_delay_ms(200);
   80812:	20c8      	movs	r0, #200	; 0xc8
   80814:	47a8      	blx	r5
	set_motor_speed(2000);
   80816:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   8081a:	47a0      	blx	r4
	_delay_ms(1000);	
   8081c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80820:	47a8      	blx	r5
	encoder_range = read_encoder();
   80822:	4b0f      	ldr	r3, [pc, #60]	; (80860 <motor_init+0x6c>)
   80824:	4798      	blx	r3
   80826:	4d0f      	ldr	r5, [pc, #60]	; (80864 <motor_init+0x70>)
   80828:	8028      	strh	r0, [r5, #0]
	set_motor_speed(0);	
   8082a:	2000      	movs	r0, #0
   8082c:	47a0      	blx	r4
	PID.pos_ref = encoder_range/2;
   8082e:	4c0e      	ldr	r4, [pc, #56]	; (80868 <motor_init+0x74>)
   80830:	f9b5 0000 	ldrsh.w	r0, [r5]
   80834:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   80838:	1040      	asrs	r0, r0, #1
   8083a:	4b0c      	ldr	r3, [pc, #48]	; (8086c <motor_init+0x78>)
   8083c:	4798      	blx	r3
   8083e:	61e0      	str	r0, [r4, #28]
	PID.Kp = 0.5;
   80840:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
   80844:	6023      	str	r3, [r4, #0]
	PID.Ki = 0.2;
   80846:	4b0a      	ldr	r3, [pc, #40]	; (80870 <motor_init+0x7c>)
   80848:	6063      	str	r3, [r4, #4]
   8084a:	bd38      	pop	{r3, r4, r5, pc}
   8084c:	400e1400 	.word	0x400e1400
   80850:	fffff830 	.word	0xfffff830
   80854:	000807b5 	.word	0x000807b5
   80858:	00080a4d 	.word	0x00080a4d
   8085c:	00080781 	.word	0x00080781
   80860:	00080735 	.word	0x00080735
   80864:	20000458 	.word	0x20000458
   80868:	2000045c 	.word	0x2000045c
   8086c:	00081811 	.word	0x00081811
   80870:	3e4ccccd 	.word	0x3e4ccccd

00080874 <update_pos_ref>:
	}
}

void update_pos_ref(uint16_t ref_pos){
   80874:	b508      	push	{r3, lr}
	ref_pos = ref_pos - 38;    //offset compensating for Joystick
   80876:	f1a0 0326 	sub.w	r3, r0, #38	; 0x26
   8087a:	b29b      	uxth	r3, r3
	if (ref_pos < 38){
		ref_pos = 38;
	}
	//printf("ref_pos = %d/n", ref_pos);
	PID.pos_ref = (encoder_range/2)-(ref_pos-130)*90;
   8087c:	2b26      	cmp	r3, #38	; 0x26
   8087e:	bf38      	it	cc
   80880:	2326      	movcc	r3, #38	; 0x26
   80882:	3b82      	subs	r3, #130	; 0x82
   80884:	4a07      	ldr	r2, [pc, #28]	; (808a4 <update_pos_ref+0x30>)
   80886:	f9b2 0000 	ldrsh.w	r0, [r2]
   8088a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   8088e:	1040      	asrs	r0, r0, #1
   80890:	f06f 0259 	mvn.w	r2, #89	; 0x59
   80894:	fb02 0003 	mla	r0, r2, r3, r0
   80898:	4b03      	ldr	r3, [pc, #12]	; (808a8 <update_pos_ref+0x34>)
   8089a:	4798      	blx	r3
   8089c:	4b03      	ldr	r3, [pc, #12]	; (808ac <update_pos_ref+0x38>)
   8089e:	61d8      	str	r0, [r3, #28]
   808a0:	bd08      	pop	{r3, pc}
   808a2:	bf00      	nop
   808a4:	20000458 	.word	0x20000458
   808a8:	00081811 	.word	0x00081811
   808ac:	2000045c 	.word	0x2000045c

000808b0 <PID_regulator>:
}

void PID_regulator(void){
   808b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PID.pos = read_encoder();
   808b2:	4b23      	ldr	r3, [pc, #140]	; (80940 <PID_regulator+0x90>)
   808b4:	4798      	blx	r3
   808b6:	4b23      	ldr	r3, [pc, #140]	; (80944 <PID_regulator+0x94>)
   808b8:	4798      	blx	r3
   808ba:	4604      	mov	r4, r0
   808bc:	4b22      	ldr	r3, [pc, #136]	; (80948 <PID_regulator+0x98>)
   808be:	6198      	str	r0, [r3, #24]
	if (PID.pos < 0){
   808c0:	2100      	movs	r1, #0
   808c2:	4b22      	ldr	r3, [pc, #136]	; (8094c <PID_regulator+0x9c>)
   808c4:	4798      	blx	r3
   808c6:	2800      	cmp	r0, #0
   808c8:	d133      	bne.n	80932 <PID_regulator+0x82>
		PID.pos = 0;
	}
	else if(PID.pos > encoder_range){
   808ca:	4b21      	ldr	r3, [pc, #132]	; (80950 <PID_regulator+0xa0>)
   808cc:	f9b3 0000 	ldrsh.w	r0, [r3]
   808d0:	4b1c      	ldr	r3, [pc, #112]	; (80944 <PID_regulator+0x94>)
   808d2:	4798      	blx	r3
   808d4:	4605      	mov	r5, r0
   808d6:	4601      	mov	r1, r0
   808d8:	4620      	mov	r0, r4
   808da:	4b1e      	ldr	r3, [pc, #120]	; (80954 <PID_regulator+0xa4>)
   808dc:	4798      	blx	r3
   808de:	b108      	cbz	r0, 808e4 <PID_regulator+0x34>
		PID.pos = encoder_range;
   808e0:	4b19      	ldr	r3, [pc, #100]	; (80948 <PID_regulator+0x98>)
   808e2:	619d      	str	r5, [r3, #24]
	}
	
	PID.error = PID.pos_ref - PID.pos;
   808e4:	4c18      	ldr	r4, [pc, #96]	; (80948 <PID_regulator+0x98>)
   808e6:	69a1      	ldr	r1, [r4, #24]
   808e8:	69e0      	ldr	r0, [r4, #28]
   808ea:	4b1b      	ldr	r3, [pc, #108]	; (80958 <PID_regulator+0xa8>)
   808ec:	4798      	blx	r3
   808ee:	4605      	mov	r5, r0
   808f0:	6120      	str	r0, [r4, #16]
	
	if(abs(PID.error) < 100){
   808f2:	4b1a      	ldr	r3, [pc, #104]	; (8095c <PID_regulator+0xac>)
   808f4:	4798      	blx	r3
   808f6:	4b1a      	ldr	r3, [pc, #104]	; (80960 <PID_regulator+0xb0>)
   808f8:	4798      	blx	r3
   808fa:	2863      	cmp	r0, #99	; 0x63
   808fc:	dd1d      	ble.n	8093a <PID_regulator+0x8a>
		PID.error_i = 0;
	}
	else{
		PID.error_i = PID.error_i + PID.error;	
   808fe:	4c12      	ldr	r4, [pc, #72]	; (80948 <PID_regulator+0x98>)
   80900:	4629      	mov	r1, r5
   80902:	6960      	ldr	r0, [r4, #20]
   80904:	4b17      	ldr	r3, [pc, #92]	; (80964 <PID_regulator+0xb4>)
   80906:	4798      	blx	r3
   80908:	6160      	str	r0, [r4, #20]
	}
	
	PID.output = PID.error*PID.Kp + PID.error_i*PID.Ki;
   8090a:	4c0f      	ldr	r4, [pc, #60]	; (80948 <PID_regulator+0x98>)
   8090c:	4e16      	ldr	r6, [pc, #88]	; (80968 <PID_regulator+0xb8>)
   8090e:	6861      	ldr	r1, [r4, #4]
   80910:	6960      	ldr	r0, [r4, #20]
   80912:	47b0      	blx	r6
   80914:	4607      	mov	r7, r0
   80916:	6821      	ldr	r1, [r4, #0]
   80918:	4628      	mov	r0, r5
   8091a:	47b0      	blx	r6
   8091c:	4601      	mov	r1, r0
   8091e:	4638      	mov	r0, r7
   80920:	4b10      	ldr	r3, [pc, #64]	; (80964 <PID_regulator+0xb4>)
   80922:	4798      	blx	r3
   80924:	6220      	str	r0, [r4, #32]
	//printf("pos = %.2\n", PID.pos);
	//printf("posref = %.2\n", PID.pos_ref);
	
	set_motor_speed((int16_t)PID.output);	
   80926:	4b11      	ldr	r3, [pc, #68]	; (8096c <PID_regulator+0xbc>)
   80928:	4798      	blx	r3
   8092a:	b200      	sxth	r0, r0
   8092c:	4b10      	ldr	r3, [pc, #64]	; (80970 <PID_regulator+0xc0>)
   8092e:	4798      	blx	r3
   80930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		PID.pos = 0;
   80932:	2200      	movs	r2, #0
   80934:	4b04      	ldr	r3, [pc, #16]	; (80948 <PID_regulator+0x98>)
   80936:	619a      	str	r2, [r3, #24]
   80938:	e7d4      	b.n	808e4 <PID_regulator+0x34>
		PID.error_i = 0;
   8093a:	2200      	movs	r2, #0
   8093c:	6162      	str	r2, [r4, #20]
   8093e:	e7e4      	b.n	8090a <PID_regulator+0x5a>
   80940:	00080735 	.word	0x00080735
   80944:	00081811 	.word	0x00081811
   80948:	2000045c 	.word	0x2000045c
   8094c:	00081bf5 	.word	0x00081bf5
   80950:	20000458 	.word	0x20000458
   80954:	00081c31 	.word	0x00081c31
   80958:	000816a5 	.word	0x000816a5
   8095c:	00081191 	.word	0x00081191
   80960:	00081c91 	.word	0x00081c91
   80964:	000816a9 	.word	0x000816a9
   80968:	000818b9 	.word	0x000818b9
   8096c:	00081c45 	.word	0x00081c45
   80970:	000807b5 	.word	0x000807b5

00080974 <PWM_init>:

void PWM_init(void){
	
	/* Set up PWM */
	//PMC->PMC_SCER = PMC_SCER_PCK0 | PMC_SCER_PCK1 | PMC_SCER_PCK2;	 // Enable all programmable clocks
	PMC->PMC_PCER1 |= PMC_PCER1_PID36;								 // Enable clock on PWM Controller 
   80974:	4a15      	ldr	r2, [pc, #84]	; (809cc <PWM_init+0x58>)
   80976:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   8097a:	f043 0310 	orr.w	r3, r3, #16
   8097e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	// Define Pin 19 on port C as output
	PIOC->PIO_OER |= PIO_PC19;			// PIO Output enable
   80982:	4b13      	ldr	r3, [pc, #76]	; (809d0 <PWM_init+0x5c>)
   80984:	691a      	ldr	r2, [r3, #16]
   80986:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   8098a:	611a      	str	r2, [r3, #16]
	PIOC->PIO_PDR |= PIO_PC19;			// P19 Configured as output (silk - PIN45)
   8098c:	685a      	ldr	r2, [r3, #4]
   8098e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80992:	605a      	str	r2, [r3, #4]
	PIOC->PIO_ABSR |= PIO_ABSR_P19;		// Set peripheral MUX to channel B (PWM)
   80994:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80996:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   8099a:	671a      	str	r2, [r3, #112]	; 0x70
	
	// Setup PWM servo signal
	PWM->PWM_WPCR &= ~PIO_WPMR_WPEN;		// Disable PWM write protection
   8099c:	4a0d      	ldr	r2, [pc, #52]	; (809d4 <PWM_init+0x60>)
   8099e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   809a2:	f023 0301 	bic.w	r3, r3, #1
   809a6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	REG_PWM_CMR5 = PWM_CMR_CPRE_MCK_DIV_1024 | PWM_CMR_CPOL;	// Set 1024 prescaler and Output wave form start high
   809aa:	f240 220a 	movw	r2, #522	; 0x20a
   809ae:	4b0a      	ldr	r3, [pc, #40]	; (809d8 <PWM_init+0x64>)
   809b0:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD5 = 1640;			//CPRD = 20ms * 84MHz/1024
   809b2:	f44f 62cd 	mov.w	r2, #1640	; 0x668
   809b6:	330c      	adds	r3, #12
   809b8:	601a      	str	r2, [r3, #0]
	REG_PWM_CDTY5 = 123;			//CPRY = 1.5ms * 84MHz/1024 (min = 74/max = 172 values)
   809ba:	227b      	movs	r2, #123	; 0x7b
   809bc:	3b08      	subs	r3, #8
   809be:	601a      	str	r2, [r3, #0]
	REG_PWM_ENA = PWM_ENA_CHID5;	// Enable PWM
   809c0:	2220      	movs	r2, #32
   809c2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
   809c6:	601a      	str	r2, [r3, #0]
   809c8:	4770      	bx	lr
   809ca:	bf00      	nop
   809cc:	400e0600 	.word	0x400e0600
   809d0:	400e1200 	.word	0x400e1200
   809d4:	40094000 	.word	0x40094000
   809d8:	400942a0 	.word	0x400942a0

000809dc <set_servo_pos>:
}


void set_servo_pos(int value){
	value = value - 38;    //offset compensating for Joystick
   809dc:	3826      	subs	r0, #38	; 0x26
 	if (value < 38){	 
		value = 38;
	} 
	REG_PWM_CDTY5 = 74 + value*98/255;	 //CPRY = periode * 84MHz/1024 (min = 74/max = 172 vulues)
   809de:	2826      	cmp	r0, #38	; 0x26
   809e0:	bfb8      	it	lt
   809e2:	2026      	movlt	r0, #38	; 0x26
   809e4:	2362      	movs	r3, #98	; 0x62
   809e6:	fb03 f000 	mul.w	r0, r3, r0
   809ea:	4b05      	ldr	r3, [pc, #20]	; (80a00 <set_servo_pos+0x24>)
   809ec:	fb83 2300 	smull	r2, r3, r3, r0
   809f0:	4403      	add	r3, r0
   809f2:	17c0      	asrs	r0, r0, #31
   809f4:	ebc0 10e3 	rsb	r0, r0, r3, asr #7
   809f8:	304a      	adds	r0, #74	; 0x4a
   809fa:	4b02      	ldr	r3, [pc, #8]	; (80a04 <set_servo_pos+0x28>)
   809fc:	6018      	str	r0, [r3, #0]
   809fe:	4770      	bx	lr
   80a00:	80808081 	.word	0x80808081
   80a04:	400942a4 	.word	0x400942a4

00080a08 <_delay_us>:

#include "Timer.h"


void _delay_us(uint32_t us) //NB max value is 1597 000us
{
   80a08:	b510      	push	{r4, lr}
	SysTick->LOAD = 10.5 * us; //MCK = 10.5MHz
   80a0a:	4b0b      	ldr	r3, [pc, #44]	; (80a38 <_delay_us+0x30>)
   80a0c:	4798      	blx	r3
   80a0e:	2200      	movs	r2, #0
   80a10:	4b0a      	ldr	r3, [pc, #40]	; (80a3c <_delay_us+0x34>)
   80a12:	4c0b      	ldr	r4, [pc, #44]	; (80a40 <_delay_us+0x38>)
   80a14:	47a0      	blx	r4
   80a16:	4b0b      	ldr	r3, [pc, #44]	; (80a44 <_delay_us+0x3c>)
   80a18:	4798      	blx	r3
   80a1a:	4b0b      	ldr	r3, [pc, #44]	; (80a48 <_delay_us+0x40>)
   80a1c:	6058      	str	r0, [r3, #4]
	SysTick->CTRL = SysTick_CTRL_ENABLE_Msk; // Enable SysTick
   80a1e:	2201      	movs	r2, #1
   80a20:	601a      	str	r2, [r3, #0]
	while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // Wait until Systick timer is finished
   80a22:	461a      	mov	r2, r3
   80a24:	6813      	ldr	r3, [r2, #0]
   80a26:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80a2a:	d0fb      	beq.n	80a24 <_delay_us+0x1c>
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk; // Disable SysTick
   80a2c:	4a06      	ldr	r2, [pc, #24]	; (80a48 <_delay_us+0x40>)
   80a2e:	6813      	ldr	r3, [r2, #0]
   80a30:	f023 0301 	bic.w	r3, r3, #1
   80a34:	6013      	str	r3, [r2, #0]
   80a36:	bd10      	pop	{r4, pc}
   80a38:	0008114d 	.word	0x0008114d
   80a3c:	40250000 	.word	0x40250000
   80a40:	00081239 	.word	0x00081239
   80a44:	0008165d 	.word	0x0008165d
   80a48:	e000e010 	.word	0xe000e010

00080a4c <_delay_ms>:
}

void _delay_ms(uint32_t ms) 
{
	for(uint32_t i = 0; i<ms; i++){
   80a4c:	b158      	cbz	r0, 80a66 <_delay_ms+0x1a>
{
   80a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80a50:	4605      	mov	r5, r0
	for(uint32_t i = 0; i<ms; i++){
   80a52:	2400      	movs	r4, #0
		_delay_us(1000);
   80a54:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   80a58:	4e03      	ldr	r6, [pc, #12]	; (80a68 <_delay_ms+0x1c>)
   80a5a:	4638      	mov	r0, r7
   80a5c:	47b0      	blx	r6
	for(uint32_t i = 0; i<ms; i++){
   80a5e:	3401      	adds	r4, #1
   80a60:	42a5      	cmp	r5, r4
   80a62:	d1fa      	bne.n	80a5a <_delay_ms+0xe>
   80a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80a66:	4770      	bx	lr
   80a68:	00080a09 	.word	0x00080a09

00080a6c <Timer_init>:


void Timer_init(void){
									 
	/* Setup Timer 0 */	
	PMC->PMC_PCER0 |= PMC_PCER0_PID27;		// Enable clock on TC0
   80a6c:	4a13      	ldr	r2, [pc, #76]	; (80abc <Timer_init+0x50>)
   80a6e:	6913      	ldr	r3, [r2, #16]
   80a70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   80a74:	6113      	str	r3, [r2, #16]
	TC0->TC_WPMR &= ~TC_WPMR_WPEN;			// Disable TC write protection
   80a76:	4a12      	ldr	r2, [pc, #72]	; (80ac0 <Timer_init+0x54>)
   80a78:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   80a7c:	f023 0301 	bic.w	r3, r3, #1
   80a80:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	REG_TC0_CMR0 |= TC_CMR_TCCLKS_TIMER_CLOCK3 | TC_CMR_CPCTRG;		// Set 32 prescaler and resets on compare match
   80a84:	490f      	ldr	r1, [pc, #60]	; (80ac4 <Timer_init+0x58>)
   80a86:	680b      	ldr	r3, [r1, #0]
   80a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   80a8c:	f043 0302 	orr.w	r3, r3, #2
   80a90:	600b      	str	r3, [r1, #0]
	REG_TC0_IER0 |= TC_IER_CPCS;	// Enable interrupt on compare match
   80a92:	3120      	adds	r1, #32
   80a94:	680b      	ldr	r3, [r1, #0]
   80a96:	f043 0310 	orr.w	r3, r3, #16
   80a9a:	600b      	str	r3, [r1, #0]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80a9c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80aa0:	4b09      	ldr	r3, [pc, #36]	; (80ac8 <Timer_init+0x5c>)
   80aa2:	6019      	str	r1, [r3, #0]
	
	
	NVIC_EnableIRQ(TC0_IRQn);		// Enable timer counter interrupt
	REG_TC0_CCR0 |= TC_CCR_CLKEN| TC_CCR_SWTRG;	// Enable Timer 0
   80aa4:	6813      	ldr	r3, [r2, #0]
   80aa6:	f043 0305 	orr.w	r3, r3, #5
   80aaa:	6013      	str	r3, [r2, #0]
	REG_TC0_RC0 = 2625;				// counts = 1ms/(32/MCK)
   80aac:	f640 2241 	movw	r2, #2625	; 0xa41
   80ab0:	4b06      	ldr	r3, [pc, #24]	; (80acc <Timer_init+0x60>)
   80ab2:	601a      	str	r2, [r3, #0]
	
	game_clock = 0;
   80ab4:	2200      	movs	r2, #0
   80ab6:	4b06      	ldr	r3, [pc, #24]	; (80ad0 <Timer_init+0x64>)
   80ab8:	601a      	str	r2, [r3, #0]
   80aba:	4770      	bx	lr
   80abc:	400e0600 	.word	0x400e0600
   80ac0:	40080000 	.word	0x40080000
   80ac4:	40080004 	.word	0x40080004
   80ac8:	e000e100 	.word	0xe000e100
   80acc:	4008001c 	.word	0x4008001c
   80ad0:	20000450 	.word	0x20000450

00080ad4 <TC0_Handler>:
}



void TC0_Handler(void){
	uint32_t clear_TCO_flag = REG_TC0_SR0;//SR0_flag = REG_TC0_SR0;  // Interrupt flag is cleared by reading  
   80ad4:	4b02      	ldr	r3, [pc, #8]	; (80ae0 <TC0_Handler+0xc>)
   80ad6:	681b      	ldr	r3, [r3, #0]
	//game_clock = game_clock + 1;
	TC0_flag = 1;
   80ad8:	2201      	movs	r2, #1
   80ada:	4b02      	ldr	r3, [pc, #8]	; (80ae4 <TC0_Handler+0x10>)
   80adc:	701a      	strb	r2, [r3, #0]
   80ade:	4770      	bx	lr
   80ae0:	40080020 	.word	0x40080020
   80ae4:	20000455 	.word	0x20000455

00080ae8 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80aec:	460d      	mov	r5, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80aee:	1e16      	subs	r6, r2, #0
   80af0:	dd48      	ble.n	80b84 <prints+0x9c>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   80af2:	780a      	ldrb	r2, [r1, #0]
   80af4:	2a00      	cmp	r2, #0
   80af6:	d035      	beq.n	80b64 <prints+0x7c>
   80af8:	460a      	mov	r2, r1
   80afa:	2400      	movs	r4, #0
   80afc:	3401      	adds	r4, #1
   80afe:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   80b02:	2900      	cmp	r1, #0
   80b04:	d1fa      	bne.n	80afc <prints+0x14>
		if (len >= width) width = 0;
   80b06:	42a6      	cmp	r6, r4
   80b08:	dc2d      	bgt.n	80b66 <prints+0x7e>
   80b0a:	2400      	movs	r4, #0
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
   80b0c:	f003 0202 	and.w	r2, r3, #2
   80b10:	2a00      	cmp	r2, #0
   80b12:	bf0c      	ite	eq
   80b14:	f04f 0820 	moveq.w	r8, #32
   80b18:	f04f 0830 	movne.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
   80b1c:	f013 0301 	ands.w	r3, r3, #1
   80b20:	d123      	bne.n	80b6a <prints+0x82>
		for ( ; width > 0; --width) {
   80b22:	2c00      	cmp	r4, #0
   80b24:	dd28      	ble.n	80b78 <prints+0x90>
   80b26:	4626      	mov	r6, r4
	(void) uart_putchar(c);  //Send characters to uart
   80b28:	fa5f f988 	uxtb.w	r9, r8
   80b2c:	4f18      	ldr	r7, [pc, #96]	; (80b90 <prints+0xa8>)
   80b2e:	4648      	mov	r0, r9
   80b30:	47b8      	blx	r7
		for ( ; width > 0; --width) {
   80b32:	3e01      	subs	r6, #1
   80b34:	d1fb      	bne.n	80b2e <prints+0x46>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   80b36:	7828      	ldrb	r0, [r5, #0]
   80b38:	b188      	cbz	r0, 80b5e <prints+0x76>
	(void) uart_putchar(c);  //Send characters to uart
   80b3a:	4f15      	ldr	r7, [pc, #84]	; (80b90 <prints+0xa8>)
   80b3c:	47b8      	blx	r7
		printchar (out, *string);
		++pc;
   80b3e:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80b40:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80b44:	2800      	cmp	r0, #0
   80b46:	d1f9      	bne.n	80b3c <prints+0x54>
	}
	for ( ; width > 0; --width) {
   80b48:	2e00      	cmp	r6, #0
   80b4a:	dd08      	ble.n	80b5e <prints+0x76>
   80b4c:	4635      	mov	r5, r6
	(void) uart_putchar(c);  //Send characters to uart
   80b4e:	fa5f f888 	uxtb.w	r8, r8
   80b52:	4f0f      	ldr	r7, [pc, #60]	; (80b90 <prints+0xa8>)
   80b54:	4640      	mov	r0, r8
   80b56:	47b8      	blx	r7
	for ( ; width > 0; --width) {
   80b58:	3d01      	subs	r5, #1
   80b5a:	d1fb      	bne.n	80b54 <prints+0x6c>
   80b5c:	4434      	add	r4, r6
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
   80b5e:	4620      	mov	r0, r4
   80b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (ptr = string; *ptr; ++ptr) ++len;
   80b64:	2400      	movs	r4, #0
		else width -= len;
   80b66:	1b34      	subs	r4, r6, r4
   80b68:	e7d0      	b.n	80b0c <prints+0x24>
   80b6a:	4626      	mov	r6, r4
	for ( ; *string ; ++string) {
   80b6c:	7828      	ldrb	r0, [r5, #0]
   80b6e:	b108      	cbz	r0, 80b74 <prints+0x8c>
	register int pc = 0, padchar = ' ';
   80b70:	2400      	movs	r4, #0
   80b72:	e7e2      	b.n	80b3a <prints+0x52>
   80b74:	2400      	movs	r4, #0
   80b76:	e7e7      	b.n	80b48 <prints+0x60>
		for ( ; width > 0; --width) {
   80b78:	4626      	mov	r6, r4
   80b7a:	461c      	mov	r4, r3
   80b7c:	e7db      	b.n	80b36 <prints+0x4e>
	register int pc = 0, padchar = ' ';
   80b7e:	f04f 0820 	mov.w	r8, #32
   80b82:	e7d8      	b.n	80b36 <prints+0x4e>
	if (!(pad & PAD_RIGHT)) {
   80b84:	f013 0401 	ands.w	r4, r3, #1
   80b88:	d0f9      	beq.n	80b7e <prints+0x96>
	register int pc = 0, padchar = ' ';
   80b8a:	f04f 0820 	mov.w	r8, #32
   80b8e:	e7ed      	b.n	80b6c <prints+0x84>
   80b90:	00080e3d 	.word	0x00080e3d

00080b94 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80b94:	b5f0      	push	{r4, r5, r6, r7, lr}
   80b96:	b085      	sub	sp, #20
   80b98:	4607      	mov	r7, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80b9a:	b381      	cbz	r1, 80bfe <printi+0x6a>
   80b9c:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   80b9e:	b10b      	cbz	r3, 80ba4 <printi+0x10>
   80ba0:	2a0a      	cmp	r2, #10
   80ba2:	d038      	beq.n	80c16 <printi+0x82>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   80ba4:	2300      	movs	r3, #0
   80ba6:	f88d 300f 	strb.w	r3, [sp, #15]

	while (u) {
   80baa:	2600      	movs	r6, #0
   80bac:	2900      	cmp	r1, #0
   80bae:	d046      	beq.n	80c3e <printi+0xaa>
   80bb0:	f10d 050f 	add.w	r5, sp, #15
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
   80bb4:	990c      	ldr	r1, [sp, #48]	; 0x30
   80bb6:	393a      	subs	r1, #58	; 0x3a
		t = u % b;
   80bb8:	fbb4 f3f2 	udiv	r3, r4, r2
   80bbc:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   80bc0:	2b09      	cmp	r3, #9
			t += letbase - '0' - 10;
   80bc2:	bfc8      	it	gt
   80bc4:	185b      	addgt	r3, r3, r1
		*--s = t + '0';
   80bc6:	3330      	adds	r3, #48	; 0x30
   80bc8:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   80bcc:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   80bd0:	2c00      	cmp	r4, #0
   80bd2:	d1f1      	bne.n	80bb8 <printi+0x24>
	}

	if (neg) {
   80bd4:	b156      	cbz	r6, 80bec <printi+0x58>
		if( width && (pad & PAD_ZERO) ) {
   80bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80bd8:	b11b      	cbz	r3, 80be2 <printi+0x4e>
   80bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80bdc:	f013 0f02 	tst.w	r3, #2
   80be0:	d125      	bne.n	80c2e <printi+0x9a>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   80be2:	232d      	movs	r3, #45	; 0x2d
   80be4:	f805 3c01 	strb.w	r3, [r5, #-1]
   80be8:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80bea:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80bec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80bee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80bf0:	4629      	mov	r1, r5
   80bf2:	4638      	mov	r0, r7
   80bf4:	4c14      	ldr	r4, [pc, #80]	; (80c48 <printi+0xb4>)
   80bf6:	47a0      	blx	r4
   80bf8:	4430      	add	r0, r6
}
   80bfa:	b005      	add	sp, #20
   80bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_buf[0] = '0';
   80bfe:	2330      	movs	r3, #48	; 0x30
   80c00:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80c04:	2300      	movs	r3, #0
   80c06:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80c0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80c0e:	a901      	add	r1, sp, #4
   80c10:	4c0d      	ldr	r4, [pc, #52]	; (80c48 <printi+0xb4>)
   80c12:	47a0      	blx	r4
   80c14:	e7f1      	b.n	80bfa <printi+0x66>
	if (sg && b == 10 && i < 0) {
   80c16:	2900      	cmp	r1, #0
   80c18:	dac4      	bge.n	80ba4 <printi+0x10>
		u = -i;
   80c1a:	424c      	negs	r4, r1
	*s = '\0';
   80c1c:	2300      	movs	r3, #0
   80c1e:	f88d 300f 	strb.w	r3, [sp, #15]
	s = print_buf + PRINT_BUF_LEN-1;
   80c22:	f10d 050f 	add.w	r5, sp, #15
	while (u) {
   80c26:	2c00      	cmp	r4, #0
   80c28:	d0d5      	beq.n	80bd6 <printi+0x42>
		neg = 1;
   80c2a:	2601      	movs	r6, #1
   80c2c:	e7c0      	b.n	80bb0 <printi+0x1c>
	(void) uart_putchar(c);  //Send characters to uart
   80c2e:	202d      	movs	r0, #45	; 0x2d
   80c30:	4b06      	ldr	r3, [pc, #24]	; (80c4c <printi+0xb8>)
   80c32:	4798      	blx	r3
			--width;
   80c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80c36:	3b01      	subs	r3, #1
   80c38:	930a      	str	r3, [sp, #40]	; 0x28
			++pc;
   80c3a:	2601      	movs	r6, #1
			--width;
   80c3c:	e7d6      	b.n	80bec <printi+0x58>
	register int t, neg = 0, pc = 0;
   80c3e:	461e      	mov	r6, r3
	s = print_buf + PRINT_BUF_LEN-1;
   80c40:	f10d 050f 	add.w	r5, sp, #15
   80c44:	e7d2      	b.n	80bec <printi+0x58>
   80c46:	bf00      	nop
   80c48:	00080ae9 	.word	0x00080ae9
   80c4c:	00080e3d 	.word	0x00080e3d

00080c50 <print>:

static int print( char **out, const char *format, va_list args )
{
   80c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80c54:	b087      	sub	sp, #28
   80c56:	4680      	mov	r8, r0
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   80c58:	780b      	ldrb	r3, [r1, #0]
   80c5a:	2b00      	cmp	r3, #0
   80c5c:	f000 8094 	beq.w	80d88 <print+0x138>
   80c60:	468b      	mov	fp, r1
   80c62:	4617      	mov	r7, r2
   80c64:	2500      	movs	r5, #0
	(void) uart_putchar(c);  //Send characters to uart
   80c66:	4e4e      	ldr	r6, [pc, #312]	; (80da0 <print+0x150>)
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints (out, scr, width, pad);
   80c68:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80da8 <print+0x158>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80c6c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80dac <print+0x15c>
   80c70:	e046      	b.n	80d00 <print+0xb0>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80c72:	2200      	movs	r2, #0
   80c74:	e070      	b.n	80d58 <print+0x108>
				register char *s = (char *)va_arg( args, int );
   80c76:	6839      	ldr	r1, [r7, #0]
   80c78:	3704      	adds	r7, #4
				pc += prints (out, s?s:"(null)", width, pad);
   80c7a:	484a      	ldr	r0, [pc, #296]	; (80da4 <print+0x154>)
   80c7c:	2900      	cmp	r1, #0
   80c7e:	bf08      	it	eq
   80c80:	4601      	moveq	r1, r0
   80c82:	4640      	mov	r0, r8
   80c84:	47d0      	blx	sl
   80c86:	4405      	add	r5, r0
				continue;
   80c88:	e035      	b.n	80cf6 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80c8a:	6839      	ldr	r1, [r7, #0]
   80c8c:	3704      	adds	r7, #4
   80c8e:	2061      	movs	r0, #97	; 0x61
   80c90:	9002      	str	r0, [sp, #8]
   80c92:	9301      	str	r3, [sp, #4]
   80c94:	9200      	str	r2, [sp, #0]
   80c96:	2301      	movs	r3, #1
   80c98:	220a      	movs	r2, #10
   80c9a:	4640      	mov	r0, r8
   80c9c:	47c8      	blx	r9
   80c9e:	4405      	add	r5, r0
				continue;
   80ca0:	e029      	b.n	80cf6 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80ca2:	6839      	ldr	r1, [r7, #0]
   80ca4:	3704      	adds	r7, #4
   80ca6:	2061      	movs	r0, #97	; 0x61
   80ca8:	9002      	str	r0, [sp, #8]
   80caa:	9301      	str	r3, [sp, #4]
   80cac:	9200      	str	r2, [sp, #0]
   80cae:	2300      	movs	r3, #0
   80cb0:	2210      	movs	r2, #16
   80cb2:	4640      	mov	r0, r8
   80cb4:	47c8      	blx	r9
   80cb6:	4405      	add	r5, r0
				continue;
   80cb8:	e01d      	b.n	80cf6 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80cba:	6839      	ldr	r1, [r7, #0]
   80cbc:	3704      	adds	r7, #4
   80cbe:	2041      	movs	r0, #65	; 0x41
   80cc0:	9002      	str	r0, [sp, #8]
   80cc2:	9301      	str	r3, [sp, #4]
   80cc4:	9200      	str	r2, [sp, #0]
   80cc6:	2300      	movs	r3, #0
   80cc8:	2210      	movs	r2, #16
   80cca:	4640      	mov	r0, r8
   80ccc:	47c8      	blx	r9
   80cce:	4405      	add	r5, r0
				continue;
   80cd0:	e011      	b.n	80cf6 <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80cd2:	6839      	ldr	r1, [r7, #0]
   80cd4:	3704      	adds	r7, #4
   80cd6:	2061      	movs	r0, #97	; 0x61
   80cd8:	9002      	str	r0, [sp, #8]
   80cda:	9301      	str	r3, [sp, #4]
   80cdc:	9200      	str	r2, [sp, #0]
   80cde:	2300      	movs	r3, #0
   80ce0:	220a      	movs	r2, #10
   80ce2:	4640      	mov	r0, r8
   80ce4:	47c8      	blx	r9
   80ce6:	4405      	add	r5, r0
				continue;
   80ce8:	e005      	b.n	80cf6 <print+0xa6>
			++format;
   80cea:	46a3      	mov	fp, r4
	(void) uart_putchar(c);  //Send characters to uart
   80cec:	f89b 0000 	ldrb.w	r0, [fp]
   80cf0:	47b0      	blx	r6
			}
		}
		else {
		out:
			printchar (out, *format);
			++pc;
   80cf2:	3501      	adds	r5, #1
   80cf4:	465c      	mov	r4, fp
	for (; *format != 0; ++format) {
   80cf6:	f104 0b01 	add.w	fp, r4, #1
   80cfa:	7863      	ldrb	r3, [r4, #1]
   80cfc:	2b00      	cmp	r3, #0
   80cfe:	d044      	beq.n	80d8a <print+0x13a>
		if (*format == '%') {
   80d00:	2b25      	cmp	r3, #37	; 0x25
   80d02:	d1f3      	bne.n	80cec <print+0x9c>
			++format;
   80d04:	f10b 0401 	add.w	r4, fp, #1
			if (*format == '\0') break;
   80d08:	f89b 3001 	ldrb.w	r3, [fp, #1]
   80d0c:	2b00      	cmp	r3, #0
   80d0e:	d03c      	beq.n	80d8a <print+0x13a>
			if (*format == '%') goto out;
   80d10:	2b25      	cmp	r3, #37	; 0x25
   80d12:	d0ea      	beq.n	80cea <print+0x9a>
			if (*format == '-') {
   80d14:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
   80d16:	bf06      	itte	eq
   80d18:	f10b 0402 	addeq.w	r4, fp, #2
				pad = PAD_RIGHT;
   80d1c:	2301      	moveq	r3, #1
			width = pad = 0;
   80d1e:	2300      	movne	r3, #0
			while (*format == '0') {
   80d20:	7822      	ldrb	r2, [r4, #0]
   80d22:	2a30      	cmp	r2, #48	; 0x30
   80d24:	d105      	bne.n	80d32 <print+0xe2>
				pad |= PAD_ZERO;
   80d26:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80d2a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   80d2e:	2a30      	cmp	r2, #48	; 0x30
   80d30:	d0f9      	beq.n	80d26 <print+0xd6>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80d32:	7821      	ldrb	r1, [r4, #0]
   80d34:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80d38:	b2d2      	uxtb	r2, r2
   80d3a:	2a09      	cmp	r2, #9
   80d3c:	d899      	bhi.n	80c72 <print+0x22>
   80d3e:	2200      	movs	r2, #0
				width *= 10;
   80d40:	eb02 0282 	add.w	r2, r2, r2, lsl #2
				width += *format - '0';
   80d44:	3930      	subs	r1, #48	; 0x30
   80d46:	eb01 0242 	add.w	r2, r1, r2, lsl #1
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80d4a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80d4e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80d52:	b2c0      	uxtb	r0, r0
   80d54:	2809      	cmp	r0, #9
   80d56:	d9f3      	bls.n	80d40 <print+0xf0>
			if( *format == 's' ) {
   80d58:	2973      	cmp	r1, #115	; 0x73
   80d5a:	d08c      	beq.n	80c76 <print+0x26>
			if( *format == 'd' ) {
   80d5c:	2964      	cmp	r1, #100	; 0x64
   80d5e:	d094      	beq.n	80c8a <print+0x3a>
			if( *format == 'x' ) {
   80d60:	2978      	cmp	r1, #120	; 0x78
   80d62:	d09e      	beq.n	80ca2 <print+0x52>
			if( *format == 'X' ) {
   80d64:	2958      	cmp	r1, #88	; 0x58
   80d66:	d0a8      	beq.n	80cba <print+0x6a>
			if( *format == 'u' ) {
   80d68:	2975      	cmp	r1, #117	; 0x75
   80d6a:	d0b2      	beq.n	80cd2 <print+0x82>
			if( *format == 'c' ) {
   80d6c:	2963      	cmp	r1, #99	; 0x63
   80d6e:	d1c2      	bne.n	80cf6 <print+0xa6>
				scr[0] = (char)va_arg( args, int );
   80d70:	6839      	ldr	r1, [r7, #0]
   80d72:	3704      	adds	r7, #4
   80d74:	f88d 1014 	strb.w	r1, [sp, #20]
				scr[1] = '\0';
   80d78:	2100      	movs	r1, #0
   80d7a:	f88d 1015 	strb.w	r1, [sp, #21]
				pc += prints (out, scr, width, pad);
   80d7e:	a905      	add	r1, sp, #20
   80d80:	4640      	mov	r0, r8
   80d82:	47d0      	blx	sl
   80d84:	4405      	add	r5, r0
				continue;
   80d86:	e7b6      	b.n	80cf6 <print+0xa6>
	register int pc = 0;
   80d88:	2500      	movs	r5, #0
		}
	}
	if (out) **out = '\0';
   80d8a:	f1b8 0f00 	cmp.w	r8, #0
   80d8e:	d003      	beq.n	80d98 <print+0x148>
   80d90:	f8d8 3000 	ldr.w	r3, [r8]
   80d94:	2200      	movs	r2, #0
   80d96:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80d98:	4628      	mov	r0, r5
   80d9a:	b007      	add	sp, #28
   80d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80da0:	00080e3d 	.word	0x00080e3d
   80da4:	00081e40 	.word	0x00081e40
   80da8:	00080ae9 	.word	0x00080ae9
   80dac:	00080b95 	.word	0x00080b95

00080db0 <printf>:

int printf(const char *format, ...)
{
   80db0:	b40f      	push	{r0, r1, r2, r3}
   80db2:	b500      	push	{lr}
   80db4:	b083      	sub	sp, #12
   80db6:	aa04      	add	r2, sp, #16
   80db8:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80dbc:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80dbe:	2000      	movs	r0, #0
   80dc0:	4b03      	ldr	r3, [pc, #12]	; (80dd0 <printf+0x20>)
   80dc2:	4798      	blx	r3
}
   80dc4:	b003      	add	sp, #12
   80dc6:	f85d eb04 	ldr.w	lr, [sp], #4
   80dca:	b004      	add	sp, #16
   80dcc:	4770      	bx	lr
   80dce:	bf00      	nop
   80dd0:	00080c51 	.word	0x00080c51

00080dd4 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80dd4:	4b16      	ldr	r3, [pc, #88]	; (80e30 <configure_uart+0x5c>)
   80dd6:	2200      	movs	r2, #0
   80dd8:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80dda:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80ddc:	4b15      	ldr	r3, [pc, #84]	; (80e34 <configure_uart+0x60>)
   80dde:	f44f 7140 	mov.w	r1, #768	; 0x300
   80de2:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80de4:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80de6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80de8:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80dea:	4002      	ands	r2, r0
   80dec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80df0:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80df2:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80df4:	f44f 7280 	mov.w	r2, #256	; 0x100
   80df8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80dfc:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80dfe:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80e02:	21ac      	movs	r1, #172	; 0xac
   80e04:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80e06:	f240 2123 	movw	r1, #547	; 0x223
   80e0a:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80e0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80e10:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80e12:	f240 2102 	movw	r1, #514	; 0x202
   80e16:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80e1a:	f04f 31ff 	mov.w	r1, #4294967295
   80e1e:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80e20:	21e1      	movs	r1, #225	; 0xe1
   80e22:	6099      	str	r1, [r3, #8]
   80e24:	4904      	ldr	r1, [pc, #16]	; (80e38 <configure_uart+0x64>)
   80e26:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80e28:	2250      	movs	r2, #80	; 0x50
   80e2a:	601a      	str	r2, [r3, #0]
   80e2c:	4770      	bx	lr
   80e2e:	bf00      	nop
   80e30:	2000048c 	.word	0x2000048c
   80e34:	400e0e00 	.word	0x400e0e00
   80e38:	e000e100 	.word	0xe000e100

00080e3c <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80e3c:	4b07      	ldr	r3, [pc, #28]	; (80e5c <uart_putchar+0x20>)
   80e3e:	695b      	ldr	r3, [r3, #20]
   80e40:	f013 0f02 	tst.w	r3, #2
   80e44:	d008      	beq.n	80e58 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80e46:	4b05      	ldr	r3, [pc, #20]	; (80e5c <uart_putchar+0x20>)
   80e48:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80e4a:	461a      	mov	r2, r3
   80e4c:	6953      	ldr	r3, [r2, #20]
   80e4e:	f413 7f00 	tst.w	r3, #512	; 0x200
   80e52:	d0fb      	beq.n	80e4c <uart_putchar+0x10>
	return 0;
   80e54:	2000      	movs	r0, #0
   80e56:	4770      	bx	lr
	return 1;
   80e58:	2001      	movs	r0, #1
}
   80e5a:	4770      	bx	lr
   80e5c:	400e0800 	.word	0x400e0800

00080e60 <UART_Handler>:

void UART_Handler(void)
{
   80e60:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80e62:	4b15      	ldr	r3, [pc, #84]	; (80eb8 <UART_Handler+0x58>)
   80e64:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80e66:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80e6a:	d003      	beq.n	80e74 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80e6c:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80e70:	4a11      	ldr	r2, [pc, #68]	; (80eb8 <UART_Handler+0x58>)
   80e72:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80e74:	f013 0f01 	tst.w	r3, #1
   80e78:	d012      	beq.n	80ea0 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80e7a:	4810      	ldr	r0, [pc, #64]	; (80ebc <UART_Handler+0x5c>)
   80e7c:	7842      	ldrb	r2, [r0, #1]
   80e7e:	1c53      	adds	r3, r2, #1
   80e80:	4259      	negs	r1, r3
   80e82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80e86:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80e8a:	bf58      	it	pl
   80e8c:	424b      	negpl	r3, r1
   80e8e:	7801      	ldrb	r1, [r0, #0]
   80e90:	428b      	cmp	r3, r1
   80e92:	d006      	beq.n	80ea2 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80e94:	4908      	ldr	r1, [pc, #32]	; (80eb8 <UART_Handler+0x58>)
   80e96:	6988      	ldr	r0, [r1, #24]
   80e98:	4908      	ldr	r1, [pc, #32]	; (80ebc <UART_Handler+0x5c>)
   80e9a:	440a      	add	r2, r1
   80e9c:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80e9e:	704b      	strb	r3, [r1, #1]
   80ea0:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80ea2:	4807      	ldr	r0, [pc, #28]	; (80ec0 <UART_Handler+0x60>)
   80ea4:	4b07      	ldr	r3, [pc, #28]	; (80ec4 <UART_Handler+0x64>)
   80ea6:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80ea8:	4b03      	ldr	r3, [pc, #12]	; (80eb8 <UART_Handler+0x58>)
   80eaa:	699a      	ldr	r2, [r3, #24]
   80eac:	4b03      	ldr	r3, [pc, #12]	; (80ebc <UART_Handler+0x5c>)
   80eae:	7859      	ldrb	r1, [r3, #1]
   80eb0:	440b      	add	r3, r1
   80eb2:	709a      	strb	r2, [r3, #2]
			return;
   80eb4:	bd08      	pop	{r3, pc}
   80eb6:	bf00      	nop
   80eb8:	400e0800 	.word	0x400e0800
   80ebc:	2000048c 	.word	0x2000048c
   80ec0:	00081e48 	.word	0x00081e48
   80ec4:	00080db1 	.word	0x00080db1

00080ec8 <__aeabi_drsub>:
   80ec8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80ecc:	e002      	b.n	80ed4 <__adddf3>
   80ece:	bf00      	nop

00080ed0 <__aeabi_dsub>:
   80ed0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080ed4 <__adddf3>:
   80ed4:	b530      	push	{r4, r5, lr}
   80ed6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80eda:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80ede:	ea94 0f05 	teq	r4, r5
   80ee2:	bf08      	it	eq
   80ee4:	ea90 0f02 	teqeq	r0, r2
   80ee8:	bf1f      	itttt	ne
   80eea:	ea54 0c00 	orrsne.w	ip, r4, r0
   80eee:	ea55 0c02 	orrsne.w	ip, r5, r2
   80ef2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80ef6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80efa:	f000 80e2 	beq.w	810c2 <__adddf3+0x1ee>
   80efe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80f02:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80f06:	bfb8      	it	lt
   80f08:	426d      	neglt	r5, r5
   80f0a:	dd0c      	ble.n	80f26 <__adddf3+0x52>
   80f0c:	442c      	add	r4, r5
   80f0e:	ea80 0202 	eor.w	r2, r0, r2
   80f12:	ea81 0303 	eor.w	r3, r1, r3
   80f16:	ea82 0000 	eor.w	r0, r2, r0
   80f1a:	ea83 0101 	eor.w	r1, r3, r1
   80f1e:	ea80 0202 	eor.w	r2, r0, r2
   80f22:	ea81 0303 	eor.w	r3, r1, r3
   80f26:	2d36      	cmp	r5, #54	; 0x36
   80f28:	bf88      	it	hi
   80f2a:	bd30      	pophi	{r4, r5, pc}
   80f2c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80f30:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80f34:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80f38:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80f3c:	d002      	beq.n	80f44 <__adddf3+0x70>
   80f3e:	4240      	negs	r0, r0
   80f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80f44:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80f48:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80f4c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80f50:	d002      	beq.n	80f58 <__adddf3+0x84>
   80f52:	4252      	negs	r2, r2
   80f54:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80f58:	ea94 0f05 	teq	r4, r5
   80f5c:	f000 80a7 	beq.w	810ae <__adddf3+0x1da>
   80f60:	f1a4 0401 	sub.w	r4, r4, #1
   80f64:	f1d5 0e20 	rsbs	lr, r5, #32
   80f68:	db0d      	blt.n	80f86 <__adddf3+0xb2>
   80f6a:	fa02 fc0e 	lsl.w	ip, r2, lr
   80f6e:	fa22 f205 	lsr.w	r2, r2, r5
   80f72:	1880      	adds	r0, r0, r2
   80f74:	f141 0100 	adc.w	r1, r1, #0
   80f78:	fa03 f20e 	lsl.w	r2, r3, lr
   80f7c:	1880      	adds	r0, r0, r2
   80f7e:	fa43 f305 	asr.w	r3, r3, r5
   80f82:	4159      	adcs	r1, r3
   80f84:	e00e      	b.n	80fa4 <__adddf3+0xd0>
   80f86:	f1a5 0520 	sub.w	r5, r5, #32
   80f8a:	f10e 0e20 	add.w	lr, lr, #32
   80f8e:	2a01      	cmp	r2, #1
   80f90:	fa03 fc0e 	lsl.w	ip, r3, lr
   80f94:	bf28      	it	cs
   80f96:	f04c 0c02 	orrcs.w	ip, ip, #2
   80f9a:	fa43 f305 	asr.w	r3, r3, r5
   80f9e:	18c0      	adds	r0, r0, r3
   80fa0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80fa4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80fa8:	d507      	bpl.n	80fba <__adddf3+0xe6>
   80faa:	f04f 0e00 	mov.w	lr, #0
   80fae:	f1dc 0c00 	rsbs	ip, ip, #0
   80fb2:	eb7e 0000 	sbcs.w	r0, lr, r0
   80fb6:	eb6e 0101 	sbc.w	r1, lr, r1
   80fba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80fbe:	d31b      	bcc.n	80ff8 <__adddf3+0x124>
   80fc0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80fc4:	d30c      	bcc.n	80fe0 <__adddf3+0x10c>
   80fc6:	0849      	lsrs	r1, r1, #1
   80fc8:	ea5f 0030 	movs.w	r0, r0, rrx
   80fcc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80fd0:	f104 0401 	add.w	r4, r4, #1
   80fd4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80fd8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80fdc:	f080 809a 	bcs.w	81114 <__adddf3+0x240>
   80fe0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80fe4:	bf08      	it	eq
   80fe6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80fea:	f150 0000 	adcs.w	r0, r0, #0
   80fee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80ff2:	ea41 0105 	orr.w	r1, r1, r5
   80ff6:	bd30      	pop	{r4, r5, pc}
   80ff8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80ffc:	4140      	adcs	r0, r0
   80ffe:	eb41 0101 	adc.w	r1, r1, r1
   81002:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81006:	f1a4 0401 	sub.w	r4, r4, #1
   8100a:	d1e9      	bne.n	80fe0 <__adddf3+0x10c>
   8100c:	f091 0f00 	teq	r1, #0
   81010:	bf04      	itt	eq
   81012:	4601      	moveq	r1, r0
   81014:	2000      	moveq	r0, #0
   81016:	fab1 f381 	clz	r3, r1
   8101a:	bf08      	it	eq
   8101c:	3320      	addeq	r3, #32
   8101e:	f1a3 030b 	sub.w	r3, r3, #11
   81022:	f1b3 0220 	subs.w	r2, r3, #32
   81026:	da0c      	bge.n	81042 <__adddf3+0x16e>
   81028:	320c      	adds	r2, #12
   8102a:	dd08      	ble.n	8103e <__adddf3+0x16a>
   8102c:	f102 0c14 	add.w	ip, r2, #20
   81030:	f1c2 020c 	rsb	r2, r2, #12
   81034:	fa01 f00c 	lsl.w	r0, r1, ip
   81038:	fa21 f102 	lsr.w	r1, r1, r2
   8103c:	e00c      	b.n	81058 <__adddf3+0x184>
   8103e:	f102 0214 	add.w	r2, r2, #20
   81042:	bfd8      	it	le
   81044:	f1c2 0c20 	rsble	ip, r2, #32
   81048:	fa01 f102 	lsl.w	r1, r1, r2
   8104c:	fa20 fc0c 	lsr.w	ip, r0, ip
   81050:	bfdc      	itt	le
   81052:	ea41 010c 	orrle.w	r1, r1, ip
   81056:	4090      	lslle	r0, r2
   81058:	1ae4      	subs	r4, r4, r3
   8105a:	bfa2      	ittt	ge
   8105c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   81060:	4329      	orrge	r1, r5
   81062:	bd30      	popge	{r4, r5, pc}
   81064:	ea6f 0404 	mvn.w	r4, r4
   81068:	3c1f      	subs	r4, #31
   8106a:	da1c      	bge.n	810a6 <__adddf3+0x1d2>
   8106c:	340c      	adds	r4, #12
   8106e:	dc0e      	bgt.n	8108e <__adddf3+0x1ba>
   81070:	f104 0414 	add.w	r4, r4, #20
   81074:	f1c4 0220 	rsb	r2, r4, #32
   81078:	fa20 f004 	lsr.w	r0, r0, r4
   8107c:	fa01 f302 	lsl.w	r3, r1, r2
   81080:	ea40 0003 	orr.w	r0, r0, r3
   81084:	fa21 f304 	lsr.w	r3, r1, r4
   81088:	ea45 0103 	orr.w	r1, r5, r3
   8108c:	bd30      	pop	{r4, r5, pc}
   8108e:	f1c4 040c 	rsb	r4, r4, #12
   81092:	f1c4 0220 	rsb	r2, r4, #32
   81096:	fa20 f002 	lsr.w	r0, r0, r2
   8109a:	fa01 f304 	lsl.w	r3, r1, r4
   8109e:	ea40 0003 	orr.w	r0, r0, r3
   810a2:	4629      	mov	r1, r5
   810a4:	bd30      	pop	{r4, r5, pc}
   810a6:	fa21 f004 	lsr.w	r0, r1, r4
   810aa:	4629      	mov	r1, r5
   810ac:	bd30      	pop	{r4, r5, pc}
   810ae:	f094 0f00 	teq	r4, #0
   810b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   810b6:	bf06      	itte	eq
   810b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   810bc:	3401      	addeq	r4, #1
   810be:	3d01      	subne	r5, #1
   810c0:	e74e      	b.n	80f60 <__adddf3+0x8c>
   810c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   810c6:	bf18      	it	ne
   810c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   810cc:	d029      	beq.n	81122 <__adddf3+0x24e>
   810ce:	ea94 0f05 	teq	r4, r5
   810d2:	bf08      	it	eq
   810d4:	ea90 0f02 	teqeq	r0, r2
   810d8:	d005      	beq.n	810e6 <__adddf3+0x212>
   810da:	ea54 0c00 	orrs.w	ip, r4, r0
   810de:	bf04      	itt	eq
   810e0:	4619      	moveq	r1, r3
   810e2:	4610      	moveq	r0, r2
   810e4:	bd30      	pop	{r4, r5, pc}
   810e6:	ea91 0f03 	teq	r1, r3
   810ea:	bf1e      	ittt	ne
   810ec:	2100      	movne	r1, #0
   810ee:	2000      	movne	r0, #0
   810f0:	bd30      	popne	{r4, r5, pc}
   810f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   810f6:	d105      	bne.n	81104 <__adddf3+0x230>
   810f8:	0040      	lsls	r0, r0, #1
   810fa:	4149      	adcs	r1, r1
   810fc:	bf28      	it	cs
   810fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   81102:	bd30      	pop	{r4, r5, pc}
   81104:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   81108:	bf3c      	itt	cc
   8110a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8110e:	bd30      	popcc	{r4, r5, pc}
   81110:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81114:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   81118:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8111c:	f04f 0000 	mov.w	r0, #0
   81120:	bd30      	pop	{r4, r5, pc}
   81122:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81126:	bf1a      	itte	ne
   81128:	4619      	movne	r1, r3
   8112a:	4610      	movne	r0, r2
   8112c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   81130:	bf1c      	itt	ne
   81132:	460b      	movne	r3, r1
   81134:	4602      	movne	r2, r0
   81136:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8113a:	bf06      	itte	eq
   8113c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   81140:	ea91 0f03 	teqeq	r1, r3
   81144:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   81148:	bd30      	pop	{r4, r5, pc}
   8114a:	bf00      	nop

0008114c <__aeabi_ui2d>:
   8114c:	f090 0f00 	teq	r0, #0
   81150:	bf04      	itt	eq
   81152:	2100      	moveq	r1, #0
   81154:	4770      	bxeq	lr
   81156:	b530      	push	{r4, r5, lr}
   81158:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8115c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81160:	f04f 0500 	mov.w	r5, #0
   81164:	f04f 0100 	mov.w	r1, #0
   81168:	e750      	b.n	8100c <__adddf3+0x138>
   8116a:	bf00      	nop

0008116c <__aeabi_i2d>:
   8116c:	f090 0f00 	teq	r0, #0
   81170:	bf04      	itt	eq
   81172:	2100      	moveq	r1, #0
   81174:	4770      	bxeq	lr
   81176:	b530      	push	{r4, r5, lr}
   81178:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8117c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81180:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81184:	bf48      	it	mi
   81186:	4240      	negmi	r0, r0
   81188:	f04f 0100 	mov.w	r1, #0
   8118c:	e73e      	b.n	8100c <__adddf3+0x138>
   8118e:	bf00      	nop

00081190 <__aeabi_f2d>:
   81190:	0042      	lsls	r2, r0, #1
   81192:	ea4f 01e2 	mov.w	r1, r2, asr #3
   81196:	ea4f 0131 	mov.w	r1, r1, rrx
   8119a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8119e:	bf1f      	itttt	ne
   811a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   811a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   811a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   811ac:	4770      	bxne	lr
   811ae:	f092 0f00 	teq	r2, #0
   811b2:	bf14      	ite	ne
   811b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   811b8:	4770      	bxeq	lr
   811ba:	b530      	push	{r4, r5, lr}
   811bc:	f44f 7460 	mov.w	r4, #896	; 0x380
   811c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   811c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   811c8:	e720      	b.n	8100c <__adddf3+0x138>
   811ca:	bf00      	nop

000811cc <__aeabi_ul2d>:
   811cc:	ea50 0201 	orrs.w	r2, r0, r1
   811d0:	bf08      	it	eq
   811d2:	4770      	bxeq	lr
   811d4:	b530      	push	{r4, r5, lr}
   811d6:	f04f 0500 	mov.w	r5, #0
   811da:	e00a      	b.n	811f2 <__aeabi_l2d+0x16>

000811dc <__aeabi_l2d>:
   811dc:	ea50 0201 	orrs.w	r2, r0, r1
   811e0:	bf08      	it	eq
   811e2:	4770      	bxeq	lr
   811e4:	b530      	push	{r4, r5, lr}
   811e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   811ea:	d502      	bpl.n	811f2 <__aeabi_l2d+0x16>
   811ec:	4240      	negs	r0, r0
   811ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   811f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   811f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   811fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   811fe:	f43f aedc 	beq.w	80fba <__adddf3+0xe6>
   81202:	f04f 0203 	mov.w	r2, #3
   81206:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8120a:	bf18      	it	ne
   8120c:	3203      	addne	r2, #3
   8120e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81212:	bf18      	it	ne
   81214:	3203      	addne	r2, #3
   81216:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8121a:	f1c2 0320 	rsb	r3, r2, #32
   8121e:	fa00 fc03 	lsl.w	ip, r0, r3
   81222:	fa20 f002 	lsr.w	r0, r0, r2
   81226:	fa01 fe03 	lsl.w	lr, r1, r3
   8122a:	ea40 000e 	orr.w	r0, r0, lr
   8122e:	fa21 f102 	lsr.w	r1, r1, r2
   81232:	4414      	add	r4, r2
   81234:	e6c1      	b.n	80fba <__adddf3+0xe6>
   81236:	bf00      	nop

00081238 <__aeabi_dmul>:
   81238:	b570      	push	{r4, r5, r6, lr}
   8123a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8123e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81242:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81246:	bf1d      	ittte	ne
   81248:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8124c:	ea94 0f0c 	teqne	r4, ip
   81250:	ea95 0f0c 	teqne	r5, ip
   81254:	f000 f8de 	bleq	81414 <__aeabi_dmul+0x1dc>
   81258:	442c      	add	r4, r5
   8125a:	ea81 0603 	eor.w	r6, r1, r3
   8125e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   81262:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   81266:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8126a:	bf18      	it	ne
   8126c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81270:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81278:	d038      	beq.n	812ec <__aeabi_dmul+0xb4>
   8127a:	fba0 ce02 	umull	ip, lr, r0, r2
   8127e:	f04f 0500 	mov.w	r5, #0
   81282:	fbe1 e502 	umlal	lr, r5, r1, r2
   81286:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8128a:	fbe0 e503 	umlal	lr, r5, r0, r3
   8128e:	f04f 0600 	mov.w	r6, #0
   81292:	fbe1 5603 	umlal	r5, r6, r1, r3
   81296:	f09c 0f00 	teq	ip, #0
   8129a:	bf18      	it	ne
   8129c:	f04e 0e01 	orrne.w	lr, lr, #1
   812a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   812a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   812a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   812ac:	d204      	bcs.n	812b8 <__aeabi_dmul+0x80>
   812ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   812b2:	416d      	adcs	r5, r5
   812b4:	eb46 0606 	adc.w	r6, r6, r6
   812b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   812bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   812c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   812c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   812c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   812cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   812d0:	bf88      	it	hi
   812d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   812d6:	d81e      	bhi.n	81316 <__aeabi_dmul+0xde>
   812d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   812dc:	bf08      	it	eq
   812de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   812e2:	f150 0000 	adcs.w	r0, r0, #0
   812e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   812ea:	bd70      	pop	{r4, r5, r6, pc}
   812ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   812f0:	ea46 0101 	orr.w	r1, r6, r1
   812f4:	ea40 0002 	orr.w	r0, r0, r2
   812f8:	ea81 0103 	eor.w	r1, r1, r3
   812fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81300:	bfc2      	ittt	gt
   81302:	ebd4 050c 	rsbsgt	r5, r4, ip
   81306:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8130a:	bd70      	popgt	{r4, r5, r6, pc}
   8130c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81310:	f04f 0e00 	mov.w	lr, #0
   81314:	3c01      	subs	r4, #1
   81316:	f300 80ab 	bgt.w	81470 <__aeabi_dmul+0x238>
   8131a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8131e:	bfde      	ittt	le
   81320:	2000      	movle	r0, #0
   81322:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81326:	bd70      	pople	{r4, r5, r6, pc}
   81328:	f1c4 0400 	rsb	r4, r4, #0
   8132c:	3c20      	subs	r4, #32
   8132e:	da35      	bge.n	8139c <__aeabi_dmul+0x164>
   81330:	340c      	adds	r4, #12
   81332:	dc1b      	bgt.n	8136c <__aeabi_dmul+0x134>
   81334:	f104 0414 	add.w	r4, r4, #20
   81338:	f1c4 0520 	rsb	r5, r4, #32
   8133c:	fa00 f305 	lsl.w	r3, r0, r5
   81340:	fa20 f004 	lsr.w	r0, r0, r4
   81344:	fa01 f205 	lsl.w	r2, r1, r5
   81348:	ea40 0002 	orr.w	r0, r0, r2
   8134c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   81350:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81358:	fa21 f604 	lsr.w	r6, r1, r4
   8135c:	eb42 0106 	adc.w	r1, r2, r6
   81360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81364:	bf08      	it	eq
   81366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8136a:	bd70      	pop	{r4, r5, r6, pc}
   8136c:	f1c4 040c 	rsb	r4, r4, #12
   81370:	f1c4 0520 	rsb	r5, r4, #32
   81374:	fa00 f304 	lsl.w	r3, r0, r4
   81378:	fa20 f005 	lsr.w	r0, r0, r5
   8137c:	fa01 f204 	lsl.w	r2, r1, r4
   81380:	ea40 0002 	orr.w	r0, r0, r2
   81384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81388:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8138c:	f141 0100 	adc.w	r1, r1, #0
   81390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81394:	bf08      	it	eq
   81396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8139a:	bd70      	pop	{r4, r5, r6, pc}
   8139c:	f1c4 0520 	rsb	r5, r4, #32
   813a0:	fa00 f205 	lsl.w	r2, r0, r5
   813a4:	ea4e 0e02 	orr.w	lr, lr, r2
   813a8:	fa20 f304 	lsr.w	r3, r0, r4
   813ac:	fa01 f205 	lsl.w	r2, r1, r5
   813b0:	ea43 0302 	orr.w	r3, r3, r2
   813b4:	fa21 f004 	lsr.w	r0, r1, r4
   813b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   813bc:	fa21 f204 	lsr.w	r2, r1, r4
   813c0:	ea20 0002 	bic.w	r0, r0, r2
   813c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   813c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   813cc:	bf08      	it	eq
   813ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   813d2:	bd70      	pop	{r4, r5, r6, pc}
   813d4:	f094 0f00 	teq	r4, #0
   813d8:	d10f      	bne.n	813fa <__aeabi_dmul+0x1c2>
   813da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   813de:	0040      	lsls	r0, r0, #1
   813e0:	eb41 0101 	adc.w	r1, r1, r1
   813e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   813e8:	bf08      	it	eq
   813ea:	3c01      	subeq	r4, #1
   813ec:	d0f7      	beq.n	813de <__aeabi_dmul+0x1a6>
   813ee:	ea41 0106 	orr.w	r1, r1, r6
   813f2:	f095 0f00 	teq	r5, #0
   813f6:	bf18      	it	ne
   813f8:	4770      	bxne	lr
   813fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   813fe:	0052      	lsls	r2, r2, #1
   81400:	eb43 0303 	adc.w	r3, r3, r3
   81404:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   81408:	bf08      	it	eq
   8140a:	3d01      	subeq	r5, #1
   8140c:	d0f7      	beq.n	813fe <__aeabi_dmul+0x1c6>
   8140e:	ea43 0306 	orr.w	r3, r3, r6
   81412:	4770      	bx	lr
   81414:	ea94 0f0c 	teq	r4, ip
   81418:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8141c:	bf18      	it	ne
   8141e:	ea95 0f0c 	teqne	r5, ip
   81422:	d00c      	beq.n	8143e <__aeabi_dmul+0x206>
   81424:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81428:	bf18      	it	ne
   8142a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8142e:	d1d1      	bne.n	813d4 <__aeabi_dmul+0x19c>
   81430:	ea81 0103 	eor.w	r1, r1, r3
   81434:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81438:	f04f 0000 	mov.w	r0, #0
   8143c:	bd70      	pop	{r4, r5, r6, pc}
   8143e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81442:	bf06      	itte	eq
   81444:	4610      	moveq	r0, r2
   81446:	4619      	moveq	r1, r3
   81448:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8144c:	d019      	beq.n	81482 <__aeabi_dmul+0x24a>
   8144e:	ea94 0f0c 	teq	r4, ip
   81452:	d102      	bne.n	8145a <__aeabi_dmul+0x222>
   81454:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   81458:	d113      	bne.n	81482 <__aeabi_dmul+0x24a>
   8145a:	ea95 0f0c 	teq	r5, ip
   8145e:	d105      	bne.n	8146c <__aeabi_dmul+0x234>
   81460:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81464:	bf1c      	itt	ne
   81466:	4610      	movne	r0, r2
   81468:	4619      	movne	r1, r3
   8146a:	d10a      	bne.n	81482 <__aeabi_dmul+0x24a>
   8146c:	ea81 0103 	eor.w	r1, r1, r3
   81470:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81474:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8147c:	f04f 0000 	mov.w	r0, #0
   81480:	bd70      	pop	{r4, r5, r6, pc}
   81482:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81486:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8148a:	bd70      	pop	{r4, r5, r6, pc}

0008148c <__aeabi_ddiv>:
   8148c:	b570      	push	{r4, r5, r6, lr}
   8148e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81492:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81496:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8149a:	bf1d      	ittte	ne
   8149c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   814a0:	ea94 0f0c 	teqne	r4, ip
   814a4:	ea95 0f0c 	teqne	r5, ip
   814a8:	f000 f8a7 	bleq	815fa <__aeabi_ddiv+0x16e>
   814ac:	eba4 0405 	sub.w	r4, r4, r5
   814b0:	ea81 0e03 	eor.w	lr, r1, r3
   814b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   814b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   814bc:	f000 8088 	beq.w	815d0 <__aeabi_ddiv+0x144>
   814c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   814c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   814c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   814cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   814d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   814d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   814d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   814dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   814e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   814e4:	429d      	cmp	r5, r3
   814e6:	bf08      	it	eq
   814e8:	4296      	cmpeq	r6, r2
   814ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   814ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
   814f2:	d202      	bcs.n	814fa <__aeabi_ddiv+0x6e>
   814f4:	085b      	lsrs	r3, r3, #1
   814f6:	ea4f 0232 	mov.w	r2, r2, rrx
   814fa:	1ab6      	subs	r6, r6, r2
   814fc:	eb65 0503 	sbc.w	r5, r5, r3
   81500:	085b      	lsrs	r3, r3, #1
   81502:	ea4f 0232 	mov.w	r2, r2, rrx
   81506:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8150a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8150e:	ebb6 0e02 	subs.w	lr, r6, r2
   81512:	eb75 0e03 	sbcs.w	lr, r5, r3
   81516:	bf22      	ittt	cs
   81518:	1ab6      	subcs	r6, r6, r2
   8151a:	4675      	movcs	r5, lr
   8151c:	ea40 000c 	orrcs.w	r0, r0, ip
   81520:	085b      	lsrs	r3, r3, #1
   81522:	ea4f 0232 	mov.w	r2, r2, rrx
   81526:	ebb6 0e02 	subs.w	lr, r6, r2
   8152a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8152e:	bf22      	ittt	cs
   81530:	1ab6      	subcs	r6, r6, r2
   81532:	4675      	movcs	r5, lr
   81534:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81538:	085b      	lsrs	r3, r3, #1
   8153a:	ea4f 0232 	mov.w	r2, r2, rrx
   8153e:	ebb6 0e02 	subs.w	lr, r6, r2
   81542:	eb75 0e03 	sbcs.w	lr, r5, r3
   81546:	bf22      	ittt	cs
   81548:	1ab6      	subcs	r6, r6, r2
   8154a:	4675      	movcs	r5, lr
   8154c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81550:	085b      	lsrs	r3, r3, #1
   81552:	ea4f 0232 	mov.w	r2, r2, rrx
   81556:	ebb6 0e02 	subs.w	lr, r6, r2
   8155a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8155e:	bf22      	ittt	cs
   81560:	1ab6      	subcs	r6, r6, r2
   81562:	4675      	movcs	r5, lr
   81564:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81568:	ea55 0e06 	orrs.w	lr, r5, r6
   8156c:	d018      	beq.n	815a0 <__aeabi_ddiv+0x114>
   8156e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   81572:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   81576:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8157a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8157e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   81582:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   81586:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8158a:	d1c0      	bne.n	8150e <__aeabi_ddiv+0x82>
   8158c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81590:	d10b      	bne.n	815aa <__aeabi_ddiv+0x11e>
   81592:	ea41 0100 	orr.w	r1, r1, r0
   81596:	f04f 0000 	mov.w	r0, #0
   8159a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8159e:	e7b6      	b.n	8150e <__aeabi_ddiv+0x82>
   815a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   815a4:	bf04      	itt	eq
   815a6:	4301      	orreq	r1, r0
   815a8:	2000      	moveq	r0, #0
   815aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   815ae:	bf88      	it	hi
   815b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   815b4:	f63f aeaf 	bhi.w	81316 <__aeabi_dmul+0xde>
   815b8:	ebb5 0c03 	subs.w	ip, r5, r3
   815bc:	bf04      	itt	eq
   815be:	ebb6 0c02 	subseq.w	ip, r6, r2
   815c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   815c6:	f150 0000 	adcs.w	r0, r0, #0
   815ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   815ce:	bd70      	pop	{r4, r5, r6, pc}
   815d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   815d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   815d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   815dc:	bfc2      	ittt	gt
   815de:	ebd4 050c 	rsbsgt	r5, r4, ip
   815e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   815e6:	bd70      	popgt	{r4, r5, r6, pc}
   815e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   815ec:	f04f 0e00 	mov.w	lr, #0
   815f0:	3c01      	subs	r4, #1
   815f2:	e690      	b.n	81316 <__aeabi_dmul+0xde>
   815f4:	ea45 0e06 	orr.w	lr, r5, r6
   815f8:	e68d      	b.n	81316 <__aeabi_dmul+0xde>
   815fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   815fe:	ea94 0f0c 	teq	r4, ip
   81602:	bf08      	it	eq
   81604:	ea95 0f0c 	teqeq	r5, ip
   81608:	f43f af3b 	beq.w	81482 <__aeabi_dmul+0x24a>
   8160c:	ea94 0f0c 	teq	r4, ip
   81610:	d10a      	bne.n	81628 <__aeabi_ddiv+0x19c>
   81612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81616:	f47f af34 	bne.w	81482 <__aeabi_dmul+0x24a>
   8161a:	ea95 0f0c 	teq	r5, ip
   8161e:	f47f af25 	bne.w	8146c <__aeabi_dmul+0x234>
   81622:	4610      	mov	r0, r2
   81624:	4619      	mov	r1, r3
   81626:	e72c      	b.n	81482 <__aeabi_dmul+0x24a>
   81628:	ea95 0f0c 	teq	r5, ip
   8162c:	d106      	bne.n	8163c <__aeabi_ddiv+0x1b0>
   8162e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81632:	f43f aefd 	beq.w	81430 <__aeabi_dmul+0x1f8>
   81636:	4610      	mov	r0, r2
   81638:	4619      	mov	r1, r3
   8163a:	e722      	b.n	81482 <__aeabi_dmul+0x24a>
   8163c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81640:	bf18      	it	ne
   81642:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81646:	f47f aec5 	bne.w	813d4 <__aeabi_dmul+0x19c>
   8164a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8164e:	f47f af0d 	bne.w	8146c <__aeabi_dmul+0x234>
   81652:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   81656:	f47f aeeb 	bne.w	81430 <__aeabi_dmul+0x1f8>
   8165a:	e712      	b.n	81482 <__aeabi_dmul+0x24a>

0008165c <__aeabi_d2uiz>:
   8165c:	004a      	lsls	r2, r1, #1
   8165e:	d211      	bcs.n	81684 <__aeabi_d2uiz+0x28>
   81660:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81664:	d211      	bcs.n	8168a <__aeabi_d2uiz+0x2e>
   81666:	d50d      	bpl.n	81684 <__aeabi_d2uiz+0x28>
   81668:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8166c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81670:	d40e      	bmi.n	81690 <__aeabi_d2uiz+0x34>
   81672:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81676:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8167a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8167e:	fa23 f002 	lsr.w	r0, r3, r2
   81682:	4770      	bx	lr
   81684:	f04f 0000 	mov.w	r0, #0
   81688:	4770      	bx	lr
   8168a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8168e:	d102      	bne.n	81696 <__aeabi_d2uiz+0x3a>
   81690:	f04f 30ff 	mov.w	r0, #4294967295
   81694:	4770      	bx	lr
   81696:	f04f 0000 	mov.w	r0, #0
   8169a:	4770      	bx	lr

0008169c <__aeabi_frsub>:
   8169c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   816a0:	e002      	b.n	816a8 <__addsf3>
   816a2:	bf00      	nop

000816a4 <__aeabi_fsub>:
   816a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000816a8 <__addsf3>:
   816a8:	0042      	lsls	r2, r0, #1
   816aa:	bf1f      	itttt	ne
   816ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   816b0:	ea92 0f03 	teqne	r2, r3
   816b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   816b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   816bc:	d06a      	beq.n	81794 <__addsf3+0xec>
   816be:	ea4f 6212 	mov.w	r2, r2, lsr #24
   816c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   816c6:	bfc1      	itttt	gt
   816c8:	18d2      	addgt	r2, r2, r3
   816ca:	4041      	eorgt	r1, r0
   816cc:	4048      	eorgt	r0, r1
   816ce:	4041      	eorgt	r1, r0
   816d0:	bfb8      	it	lt
   816d2:	425b      	neglt	r3, r3
   816d4:	2b19      	cmp	r3, #25
   816d6:	bf88      	it	hi
   816d8:	4770      	bxhi	lr
   816da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   816de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   816e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   816e6:	bf18      	it	ne
   816e8:	4240      	negne	r0, r0
   816ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   816ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   816f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   816f6:	bf18      	it	ne
   816f8:	4249      	negne	r1, r1
   816fa:	ea92 0f03 	teq	r2, r3
   816fe:	d03f      	beq.n	81780 <__addsf3+0xd8>
   81700:	f1a2 0201 	sub.w	r2, r2, #1
   81704:	fa41 fc03 	asr.w	ip, r1, r3
   81708:	eb10 000c 	adds.w	r0, r0, ip
   8170c:	f1c3 0320 	rsb	r3, r3, #32
   81710:	fa01 f103 	lsl.w	r1, r1, r3
   81714:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   81718:	d502      	bpl.n	81720 <__addsf3+0x78>
   8171a:	4249      	negs	r1, r1
   8171c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   81720:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   81724:	d313      	bcc.n	8174e <__addsf3+0xa6>
   81726:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   8172a:	d306      	bcc.n	8173a <__addsf3+0x92>
   8172c:	0840      	lsrs	r0, r0, #1
   8172e:	ea4f 0131 	mov.w	r1, r1, rrx
   81732:	f102 0201 	add.w	r2, r2, #1
   81736:	2afe      	cmp	r2, #254	; 0xfe
   81738:	d251      	bcs.n	817de <__addsf3+0x136>
   8173a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   8173e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81742:	bf08      	it	eq
   81744:	f020 0001 	biceq.w	r0, r0, #1
   81748:	ea40 0003 	orr.w	r0, r0, r3
   8174c:	4770      	bx	lr
   8174e:	0049      	lsls	r1, r1, #1
   81750:	eb40 0000 	adc.w	r0, r0, r0
   81754:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   81758:	f1a2 0201 	sub.w	r2, r2, #1
   8175c:	d1ed      	bne.n	8173a <__addsf3+0x92>
   8175e:	fab0 fc80 	clz	ip, r0
   81762:	f1ac 0c08 	sub.w	ip, ip, #8
   81766:	ebb2 020c 	subs.w	r2, r2, ip
   8176a:	fa00 f00c 	lsl.w	r0, r0, ip
   8176e:	bfaa      	itet	ge
   81770:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   81774:	4252      	neglt	r2, r2
   81776:	4318      	orrge	r0, r3
   81778:	bfbc      	itt	lt
   8177a:	40d0      	lsrlt	r0, r2
   8177c:	4318      	orrlt	r0, r3
   8177e:	4770      	bx	lr
   81780:	f092 0f00 	teq	r2, #0
   81784:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   81788:	bf06      	itte	eq
   8178a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   8178e:	3201      	addeq	r2, #1
   81790:	3b01      	subne	r3, #1
   81792:	e7b5      	b.n	81700 <__addsf3+0x58>
   81794:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81798:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   8179c:	bf18      	it	ne
   8179e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   817a2:	d021      	beq.n	817e8 <__addsf3+0x140>
   817a4:	ea92 0f03 	teq	r2, r3
   817a8:	d004      	beq.n	817b4 <__addsf3+0x10c>
   817aa:	f092 0f00 	teq	r2, #0
   817ae:	bf08      	it	eq
   817b0:	4608      	moveq	r0, r1
   817b2:	4770      	bx	lr
   817b4:	ea90 0f01 	teq	r0, r1
   817b8:	bf1c      	itt	ne
   817ba:	2000      	movne	r0, #0
   817bc:	4770      	bxne	lr
   817be:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   817c2:	d104      	bne.n	817ce <__addsf3+0x126>
   817c4:	0040      	lsls	r0, r0, #1
   817c6:	bf28      	it	cs
   817c8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   817cc:	4770      	bx	lr
   817ce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   817d2:	bf3c      	itt	cc
   817d4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   817d8:	4770      	bxcc	lr
   817da:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   817de:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   817e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   817e6:	4770      	bx	lr
   817e8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   817ec:	bf16      	itet	ne
   817ee:	4608      	movne	r0, r1
   817f0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   817f4:	4601      	movne	r1, r0
   817f6:	0242      	lsls	r2, r0, #9
   817f8:	bf06      	itte	eq
   817fa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   817fe:	ea90 0f01 	teqeq	r0, r1
   81802:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   81806:	4770      	bx	lr

00081808 <__aeabi_ui2f>:
   81808:	f04f 0300 	mov.w	r3, #0
   8180c:	e004      	b.n	81818 <__aeabi_i2f+0x8>
   8180e:	bf00      	nop

00081810 <__aeabi_i2f>:
   81810:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   81814:	bf48      	it	mi
   81816:	4240      	negmi	r0, r0
   81818:	ea5f 0c00 	movs.w	ip, r0
   8181c:	bf08      	it	eq
   8181e:	4770      	bxeq	lr
   81820:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   81824:	4601      	mov	r1, r0
   81826:	f04f 0000 	mov.w	r0, #0
   8182a:	e01c      	b.n	81866 <__aeabi_l2f+0x2a>

0008182c <__aeabi_ul2f>:
   8182c:	ea50 0201 	orrs.w	r2, r0, r1
   81830:	bf08      	it	eq
   81832:	4770      	bxeq	lr
   81834:	f04f 0300 	mov.w	r3, #0
   81838:	e00a      	b.n	81850 <__aeabi_l2f+0x14>
   8183a:	bf00      	nop

0008183c <__aeabi_l2f>:
   8183c:	ea50 0201 	orrs.w	r2, r0, r1
   81840:	bf08      	it	eq
   81842:	4770      	bxeq	lr
   81844:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   81848:	d502      	bpl.n	81850 <__aeabi_l2f+0x14>
   8184a:	4240      	negs	r0, r0
   8184c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81850:	ea5f 0c01 	movs.w	ip, r1
   81854:	bf02      	ittt	eq
   81856:	4684      	moveq	ip, r0
   81858:	4601      	moveq	r1, r0
   8185a:	2000      	moveq	r0, #0
   8185c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   81860:	bf08      	it	eq
   81862:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   81866:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   8186a:	fabc f28c 	clz	r2, ip
   8186e:	3a08      	subs	r2, #8
   81870:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   81874:	db10      	blt.n	81898 <__aeabi_l2f+0x5c>
   81876:	fa01 fc02 	lsl.w	ip, r1, r2
   8187a:	4463      	add	r3, ip
   8187c:	fa00 fc02 	lsl.w	ip, r0, r2
   81880:	f1c2 0220 	rsb	r2, r2, #32
   81884:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81888:	fa20 f202 	lsr.w	r2, r0, r2
   8188c:	eb43 0002 	adc.w	r0, r3, r2
   81890:	bf08      	it	eq
   81892:	f020 0001 	biceq.w	r0, r0, #1
   81896:	4770      	bx	lr
   81898:	f102 0220 	add.w	r2, r2, #32
   8189c:	fa01 fc02 	lsl.w	ip, r1, r2
   818a0:	f1c2 0220 	rsb	r2, r2, #32
   818a4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   818a8:	fa21 f202 	lsr.w	r2, r1, r2
   818ac:	eb43 0002 	adc.w	r0, r3, r2
   818b0:	bf08      	it	eq
   818b2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   818b6:	4770      	bx	lr

000818b8 <__aeabi_fmul>:
   818b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   818bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   818c0:	bf1e      	ittt	ne
   818c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   818c6:	ea92 0f0c 	teqne	r2, ip
   818ca:	ea93 0f0c 	teqne	r3, ip
   818ce:	d06f      	beq.n	819b0 <__aeabi_fmul+0xf8>
   818d0:	441a      	add	r2, r3
   818d2:	ea80 0c01 	eor.w	ip, r0, r1
   818d6:	0240      	lsls	r0, r0, #9
   818d8:	bf18      	it	ne
   818da:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   818de:	d01e      	beq.n	8191e <__aeabi_fmul+0x66>
   818e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   818e4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   818e8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   818ec:	fba0 3101 	umull	r3, r1, r0, r1
   818f0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   818f4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   818f8:	bf3e      	ittt	cc
   818fa:	0049      	lslcc	r1, r1, #1
   818fc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   81900:	005b      	lslcc	r3, r3, #1
   81902:	ea40 0001 	orr.w	r0, r0, r1
   81906:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   8190a:	2afd      	cmp	r2, #253	; 0xfd
   8190c:	d81d      	bhi.n	8194a <__aeabi_fmul+0x92>
   8190e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   81912:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81916:	bf08      	it	eq
   81918:	f020 0001 	biceq.w	r0, r0, #1
   8191c:	4770      	bx	lr
   8191e:	f090 0f00 	teq	r0, #0
   81922:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81926:	bf08      	it	eq
   81928:	0249      	lsleq	r1, r1, #9
   8192a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   8192e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   81932:	3a7f      	subs	r2, #127	; 0x7f
   81934:	bfc2      	ittt	gt
   81936:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   8193a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   8193e:	4770      	bxgt	lr
   81940:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81944:	f04f 0300 	mov.w	r3, #0
   81948:	3a01      	subs	r2, #1
   8194a:	dc5d      	bgt.n	81a08 <__aeabi_fmul+0x150>
   8194c:	f112 0f19 	cmn.w	r2, #25
   81950:	bfdc      	itt	le
   81952:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   81956:	4770      	bxle	lr
   81958:	f1c2 0200 	rsb	r2, r2, #0
   8195c:	0041      	lsls	r1, r0, #1
   8195e:	fa21 f102 	lsr.w	r1, r1, r2
   81962:	f1c2 0220 	rsb	r2, r2, #32
   81966:	fa00 fc02 	lsl.w	ip, r0, r2
   8196a:	ea5f 0031 	movs.w	r0, r1, rrx
   8196e:	f140 0000 	adc.w	r0, r0, #0
   81972:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   81976:	bf08      	it	eq
   81978:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8197c:	4770      	bx	lr
   8197e:	f092 0f00 	teq	r2, #0
   81982:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81986:	bf02      	ittt	eq
   81988:	0040      	lsleq	r0, r0, #1
   8198a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8198e:	3a01      	subeq	r2, #1
   81990:	d0f9      	beq.n	81986 <__aeabi_fmul+0xce>
   81992:	ea40 000c 	orr.w	r0, r0, ip
   81996:	f093 0f00 	teq	r3, #0
   8199a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8199e:	bf02      	ittt	eq
   819a0:	0049      	lsleq	r1, r1, #1
   819a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   819a6:	3b01      	subeq	r3, #1
   819a8:	d0f9      	beq.n	8199e <__aeabi_fmul+0xe6>
   819aa:	ea41 010c 	orr.w	r1, r1, ip
   819ae:	e78f      	b.n	818d0 <__aeabi_fmul+0x18>
   819b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   819b4:	ea92 0f0c 	teq	r2, ip
   819b8:	bf18      	it	ne
   819ba:	ea93 0f0c 	teqne	r3, ip
   819be:	d00a      	beq.n	819d6 <__aeabi_fmul+0x11e>
   819c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   819c4:	bf18      	it	ne
   819c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   819ca:	d1d8      	bne.n	8197e <__aeabi_fmul+0xc6>
   819cc:	ea80 0001 	eor.w	r0, r0, r1
   819d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   819d4:	4770      	bx	lr
   819d6:	f090 0f00 	teq	r0, #0
   819da:	bf17      	itett	ne
   819dc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   819e0:	4608      	moveq	r0, r1
   819e2:	f091 0f00 	teqne	r1, #0
   819e6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   819ea:	d014      	beq.n	81a16 <__aeabi_fmul+0x15e>
   819ec:	ea92 0f0c 	teq	r2, ip
   819f0:	d101      	bne.n	819f6 <__aeabi_fmul+0x13e>
   819f2:	0242      	lsls	r2, r0, #9
   819f4:	d10f      	bne.n	81a16 <__aeabi_fmul+0x15e>
   819f6:	ea93 0f0c 	teq	r3, ip
   819fa:	d103      	bne.n	81a04 <__aeabi_fmul+0x14c>
   819fc:	024b      	lsls	r3, r1, #9
   819fe:	bf18      	it	ne
   81a00:	4608      	movne	r0, r1
   81a02:	d108      	bne.n	81a16 <__aeabi_fmul+0x15e>
   81a04:	ea80 0001 	eor.w	r0, r0, r1
   81a08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81a0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81a10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81a14:	4770      	bx	lr
   81a16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81a1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   81a1e:	4770      	bx	lr

00081a20 <__aeabi_fdiv>:
   81a20:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81a24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81a28:	bf1e      	ittt	ne
   81a2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81a2e:	ea92 0f0c 	teqne	r2, ip
   81a32:	ea93 0f0c 	teqne	r3, ip
   81a36:	d069      	beq.n	81b0c <__aeabi_fdiv+0xec>
   81a38:	eba2 0203 	sub.w	r2, r2, r3
   81a3c:	ea80 0c01 	eor.w	ip, r0, r1
   81a40:	0249      	lsls	r1, r1, #9
   81a42:	ea4f 2040 	mov.w	r0, r0, lsl #9
   81a46:	d037      	beq.n	81ab8 <__aeabi_fdiv+0x98>
   81a48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81a4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   81a50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   81a54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81a58:	428b      	cmp	r3, r1
   81a5a:	bf38      	it	cc
   81a5c:	005b      	lslcc	r3, r3, #1
   81a5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   81a62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   81a66:	428b      	cmp	r3, r1
   81a68:	bf24      	itt	cs
   81a6a:	1a5b      	subcs	r3, r3, r1
   81a6c:	ea40 000c 	orrcs.w	r0, r0, ip
   81a70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81a74:	bf24      	itt	cs
   81a76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   81a7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81a7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   81a82:	bf24      	itt	cs
   81a84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81a88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81a8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   81a90:	bf24      	itt	cs
   81a92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   81a96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81a9a:	011b      	lsls	r3, r3, #4
   81a9c:	bf18      	it	ne
   81a9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   81aa2:	d1e0      	bne.n	81a66 <__aeabi_fdiv+0x46>
   81aa4:	2afd      	cmp	r2, #253	; 0xfd
   81aa6:	f63f af50 	bhi.w	8194a <__aeabi_fmul+0x92>
   81aaa:	428b      	cmp	r3, r1
   81aac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81ab0:	bf08      	it	eq
   81ab2:	f020 0001 	biceq.w	r0, r0, #1
   81ab6:	4770      	bx	lr
   81ab8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81abc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81ac0:	327f      	adds	r2, #127	; 0x7f
   81ac2:	bfc2      	ittt	gt
   81ac4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81ac8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81acc:	4770      	bxgt	lr
   81ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81ad2:	f04f 0300 	mov.w	r3, #0
   81ad6:	3a01      	subs	r2, #1
   81ad8:	e737      	b.n	8194a <__aeabi_fmul+0x92>
   81ada:	f092 0f00 	teq	r2, #0
   81ade:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81ae2:	bf02      	ittt	eq
   81ae4:	0040      	lsleq	r0, r0, #1
   81ae6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81aea:	3a01      	subeq	r2, #1
   81aec:	d0f9      	beq.n	81ae2 <__aeabi_fdiv+0xc2>
   81aee:	ea40 000c 	orr.w	r0, r0, ip
   81af2:	f093 0f00 	teq	r3, #0
   81af6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81afa:	bf02      	ittt	eq
   81afc:	0049      	lsleq	r1, r1, #1
   81afe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81b02:	3b01      	subeq	r3, #1
   81b04:	d0f9      	beq.n	81afa <__aeabi_fdiv+0xda>
   81b06:	ea41 010c 	orr.w	r1, r1, ip
   81b0a:	e795      	b.n	81a38 <__aeabi_fdiv+0x18>
   81b0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81b10:	ea92 0f0c 	teq	r2, ip
   81b14:	d108      	bne.n	81b28 <__aeabi_fdiv+0x108>
   81b16:	0242      	lsls	r2, r0, #9
   81b18:	f47f af7d 	bne.w	81a16 <__aeabi_fmul+0x15e>
   81b1c:	ea93 0f0c 	teq	r3, ip
   81b20:	f47f af70 	bne.w	81a04 <__aeabi_fmul+0x14c>
   81b24:	4608      	mov	r0, r1
   81b26:	e776      	b.n	81a16 <__aeabi_fmul+0x15e>
   81b28:	ea93 0f0c 	teq	r3, ip
   81b2c:	d104      	bne.n	81b38 <__aeabi_fdiv+0x118>
   81b2e:	024b      	lsls	r3, r1, #9
   81b30:	f43f af4c 	beq.w	819cc <__aeabi_fmul+0x114>
   81b34:	4608      	mov	r0, r1
   81b36:	e76e      	b.n	81a16 <__aeabi_fmul+0x15e>
   81b38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81b3c:	bf18      	it	ne
   81b3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81b42:	d1ca      	bne.n	81ada <__aeabi_fdiv+0xba>
   81b44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81b48:	f47f af5c 	bne.w	81a04 <__aeabi_fmul+0x14c>
   81b4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81b50:	f47f af3c 	bne.w	819cc <__aeabi_fmul+0x114>
   81b54:	e75f      	b.n	81a16 <__aeabi_fmul+0x15e>
   81b56:	bf00      	nop

00081b58 <__gesf2>:
   81b58:	f04f 3cff 	mov.w	ip, #4294967295
   81b5c:	e006      	b.n	81b6c <__cmpsf2+0x4>
   81b5e:	bf00      	nop

00081b60 <__lesf2>:
   81b60:	f04f 0c01 	mov.w	ip, #1
   81b64:	e002      	b.n	81b6c <__cmpsf2+0x4>
   81b66:	bf00      	nop

00081b68 <__cmpsf2>:
   81b68:	f04f 0c01 	mov.w	ip, #1
   81b6c:	f84d cd04 	str.w	ip, [sp, #-4]!
   81b70:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81b74:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81b78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81b7c:	bf18      	it	ne
   81b7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81b82:	d011      	beq.n	81ba8 <__cmpsf2+0x40>
   81b84:	b001      	add	sp, #4
   81b86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   81b8a:	bf18      	it	ne
   81b8c:	ea90 0f01 	teqne	r0, r1
   81b90:	bf58      	it	pl
   81b92:	ebb2 0003 	subspl.w	r0, r2, r3
   81b96:	bf88      	it	hi
   81b98:	17c8      	asrhi	r0, r1, #31
   81b9a:	bf38      	it	cc
   81b9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   81ba0:	bf18      	it	ne
   81ba2:	f040 0001 	orrne.w	r0, r0, #1
   81ba6:	4770      	bx	lr
   81ba8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81bac:	d102      	bne.n	81bb4 <__cmpsf2+0x4c>
   81bae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   81bb2:	d105      	bne.n	81bc0 <__cmpsf2+0x58>
   81bb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   81bb8:	d1e4      	bne.n	81b84 <__cmpsf2+0x1c>
   81bba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   81bbe:	d0e1      	beq.n	81b84 <__cmpsf2+0x1c>
   81bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
   81bc4:	4770      	bx	lr
   81bc6:	bf00      	nop

00081bc8 <__aeabi_cfrcmple>:
   81bc8:	4684      	mov	ip, r0
   81bca:	4608      	mov	r0, r1
   81bcc:	4661      	mov	r1, ip
   81bce:	e7ff      	b.n	81bd0 <__aeabi_cfcmpeq>

00081bd0 <__aeabi_cfcmpeq>:
   81bd0:	b50f      	push	{r0, r1, r2, r3, lr}
   81bd2:	f7ff ffc9 	bl	81b68 <__cmpsf2>
   81bd6:	2800      	cmp	r0, #0
   81bd8:	bf48      	it	mi
   81bda:	f110 0f00 	cmnmi.w	r0, #0
   81bde:	bd0f      	pop	{r0, r1, r2, r3, pc}

00081be0 <__aeabi_fcmpeq>:
   81be0:	f84d ed08 	str.w	lr, [sp, #-8]!
   81be4:	f7ff fff4 	bl	81bd0 <__aeabi_cfcmpeq>
   81be8:	bf0c      	ite	eq
   81bea:	2001      	moveq	r0, #1
   81bec:	2000      	movne	r0, #0
   81bee:	f85d fb08 	ldr.w	pc, [sp], #8
   81bf2:	bf00      	nop

00081bf4 <__aeabi_fcmplt>:
   81bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
   81bf8:	f7ff ffea 	bl	81bd0 <__aeabi_cfcmpeq>
   81bfc:	bf34      	ite	cc
   81bfe:	2001      	movcc	r0, #1
   81c00:	2000      	movcs	r0, #0
   81c02:	f85d fb08 	ldr.w	pc, [sp], #8
   81c06:	bf00      	nop

00081c08 <__aeabi_fcmple>:
   81c08:	f84d ed08 	str.w	lr, [sp, #-8]!
   81c0c:	f7ff ffe0 	bl	81bd0 <__aeabi_cfcmpeq>
   81c10:	bf94      	ite	ls
   81c12:	2001      	movls	r0, #1
   81c14:	2000      	movhi	r0, #0
   81c16:	f85d fb08 	ldr.w	pc, [sp], #8
   81c1a:	bf00      	nop

00081c1c <__aeabi_fcmpge>:
   81c1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   81c20:	f7ff ffd2 	bl	81bc8 <__aeabi_cfrcmple>
   81c24:	bf94      	ite	ls
   81c26:	2001      	movls	r0, #1
   81c28:	2000      	movhi	r0, #0
   81c2a:	f85d fb08 	ldr.w	pc, [sp], #8
   81c2e:	bf00      	nop

00081c30 <__aeabi_fcmpgt>:
   81c30:	f84d ed08 	str.w	lr, [sp, #-8]!
   81c34:	f7ff ffc8 	bl	81bc8 <__aeabi_cfrcmple>
   81c38:	bf34      	ite	cc
   81c3a:	2001      	movcc	r0, #1
   81c3c:	2000      	movcs	r0, #0
   81c3e:	f85d fb08 	ldr.w	pc, [sp], #8
   81c42:	bf00      	nop

00081c44 <__aeabi_f2iz>:
   81c44:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81c48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81c4c:	d30f      	bcc.n	81c6e <__aeabi_f2iz+0x2a>
   81c4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81c52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81c56:	d90d      	bls.n	81c74 <__aeabi_f2iz+0x30>
   81c58:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81c5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81c60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   81c64:	fa23 f002 	lsr.w	r0, r3, r2
   81c68:	bf18      	it	ne
   81c6a:	4240      	negne	r0, r0
   81c6c:	4770      	bx	lr
   81c6e:	f04f 0000 	mov.w	r0, #0
   81c72:	4770      	bx	lr
   81c74:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81c78:	d101      	bne.n	81c7e <__aeabi_f2iz+0x3a>
   81c7a:	0242      	lsls	r2, r0, #9
   81c7c:	d105      	bne.n	81c8a <__aeabi_f2iz+0x46>
   81c7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   81c82:	bf08      	it	eq
   81c84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81c88:	4770      	bx	lr
   81c8a:	f04f 0000 	mov.w	r0, #0
   81c8e:	4770      	bx	lr

00081c90 <abs>:
   81c90:	2800      	cmp	r0, #0
   81c92:	bfb8      	it	lt
   81c94:	4240      	neglt	r0, r0
   81c96:	4770      	bx	lr

00081c98 <__libc_init_array>:
   81c98:	b570      	push	{r4, r5, r6, lr}
   81c9a:	4e0f      	ldr	r6, [pc, #60]	; (81cd8 <__libc_init_array+0x40>)
   81c9c:	4d0f      	ldr	r5, [pc, #60]	; (81cdc <__libc_init_array+0x44>)
   81c9e:	1b76      	subs	r6, r6, r5
   81ca0:	10b6      	asrs	r6, r6, #2
   81ca2:	bf18      	it	ne
   81ca4:	2400      	movne	r4, #0
   81ca6:	d005      	beq.n	81cb4 <__libc_init_array+0x1c>
   81ca8:	3401      	adds	r4, #1
   81caa:	f855 3b04 	ldr.w	r3, [r5], #4
   81cae:	4798      	blx	r3
   81cb0:	42a6      	cmp	r6, r4
   81cb2:	d1f9      	bne.n	81ca8 <__libc_init_array+0x10>
   81cb4:	4e0a      	ldr	r6, [pc, #40]	; (81ce0 <__libc_init_array+0x48>)
   81cb6:	4d0b      	ldr	r5, [pc, #44]	; (81ce4 <__libc_init_array+0x4c>)
   81cb8:	f000 f8d8 	bl	81e6c <_init>
   81cbc:	1b76      	subs	r6, r6, r5
   81cbe:	10b6      	asrs	r6, r6, #2
   81cc0:	bf18      	it	ne
   81cc2:	2400      	movne	r4, #0
   81cc4:	d006      	beq.n	81cd4 <__libc_init_array+0x3c>
   81cc6:	3401      	adds	r4, #1
   81cc8:	f855 3b04 	ldr.w	r3, [r5], #4
   81ccc:	4798      	blx	r3
   81cce:	42a6      	cmp	r6, r4
   81cd0:	d1f9      	bne.n	81cc6 <__libc_init_array+0x2e>
   81cd2:	bd70      	pop	{r4, r5, r6, pc}
   81cd4:	bd70      	pop	{r4, r5, r6, pc}
   81cd6:	bf00      	nop
   81cd8:	00081e78 	.word	0x00081e78
   81cdc:	00081e78 	.word	0x00081e78
   81ce0:	00081e80 	.word	0x00081e80
   81ce4:	00081e78 	.word	0x00081e78

00081ce8 <register_fini>:
   81ce8:	4b02      	ldr	r3, [pc, #8]	; (81cf4 <register_fini+0xc>)
   81cea:	b113      	cbz	r3, 81cf2 <register_fini+0xa>
   81cec:	4802      	ldr	r0, [pc, #8]	; (81cf8 <register_fini+0x10>)
   81cee:	f000 b805 	b.w	81cfc <atexit>
   81cf2:	4770      	bx	lr
   81cf4:	00000000 	.word	0x00000000
   81cf8:	00081d09 	.word	0x00081d09

00081cfc <atexit>:
   81cfc:	2300      	movs	r3, #0
   81cfe:	4601      	mov	r1, r0
   81d00:	461a      	mov	r2, r3
   81d02:	4618      	mov	r0, r3
   81d04:	f000 b81e 	b.w	81d44 <__register_exitproc>

00081d08 <__libc_fini_array>:
   81d08:	b538      	push	{r3, r4, r5, lr}
   81d0a:	4c0a      	ldr	r4, [pc, #40]	; (81d34 <__libc_fini_array+0x2c>)
   81d0c:	4d0a      	ldr	r5, [pc, #40]	; (81d38 <__libc_fini_array+0x30>)
   81d0e:	1b64      	subs	r4, r4, r5
   81d10:	10a4      	asrs	r4, r4, #2
   81d12:	d00a      	beq.n	81d2a <__libc_fini_array+0x22>
   81d14:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81d18:	3b01      	subs	r3, #1
   81d1a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81d1e:	3c01      	subs	r4, #1
   81d20:	f855 3904 	ldr.w	r3, [r5], #-4
   81d24:	4798      	blx	r3
   81d26:	2c00      	cmp	r4, #0
   81d28:	d1f9      	bne.n	81d1e <__libc_fini_array+0x16>
   81d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81d2e:	f000 b8a7 	b.w	81e80 <_fini>
   81d32:	bf00      	nop
   81d34:	00081e90 	.word	0x00081e90
   81d38:	00081e8c 	.word	0x00081e8c

00081d3c <__retarget_lock_acquire_recursive>:
   81d3c:	4770      	bx	lr
   81d3e:	bf00      	nop

00081d40 <__retarget_lock_release_recursive>:
   81d40:	4770      	bx	lr
   81d42:	bf00      	nop

00081d44 <__register_exitproc>:
   81d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81d48:	4d2c      	ldr	r5, [pc, #176]	; (81dfc <__register_exitproc+0xb8>)
   81d4a:	4606      	mov	r6, r0
   81d4c:	6828      	ldr	r0, [r5, #0]
   81d4e:	4698      	mov	r8, r3
   81d50:	460f      	mov	r7, r1
   81d52:	4691      	mov	r9, r2
   81d54:	f7ff fff2 	bl	81d3c <__retarget_lock_acquire_recursive>
   81d58:	4b29      	ldr	r3, [pc, #164]	; (81e00 <__register_exitproc+0xbc>)
   81d5a:	681c      	ldr	r4, [r3, #0]
   81d5c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81d60:	2b00      	cmp	r3, #0
   81d62:	d03e      	beq.n	81de2 <__register_exitproc+0x9e>
   81d64:	685a      	ldr	r2, [r3, #4]
   81d66:	2a1f      	cmp	r2, #31
   81d68:	dc1c      	bgt.n	81da4 <__register_exitproc+0x60>
   81d6a:	f102 0e01 	add.w	lr, r2, #1
   81d6e:	b176      	cbz	r6, 81d8e <__register_exitproc+0x4a>
   81d70:	2101      	movs	r1, #1
   81d72:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81d76:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81d7a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81d7e:	4091      	lsls	r1, r2
   81d80:	4308      	orrs	r0, r1
   81d82:	2e02      	cmp	r6, #2
   81d84:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81d88:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81d8c:	d023      	beq.n	81dd6 <__register_exitproc+0x92>
   81d8e:	3202      	adds	r2, #2
   81d90:	f8c3 e004 	str.w	lr, [r3, #4]
   81d94:	6828      	ldr	r0, [r5, #0]
   81d96:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81d9a:	f7ff ffd1 	bl	81d40 <__retarget_lock_release_recursive>
   81d9e:	2000      	movs	r0, #0
   81da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81da4:	4b17      	ldr	r3, [pc, #92]	; (81e04 <__register_exitproc+0xc0>)
   81da6:	b30b      	cbz	r3, 81dec <__register_exitproc+0xa8>
   81da8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81dac:	f3af 8000 	nop.w
   81db0:	4603      	mov	r3, r0
   81db2:	b1d8      	cbz	r0, 81dec <__register_exitproc+0xa8>
   81db4:	2000      	movs	r0, #0
   81db6:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81dba:	f04f 0e01 	mov.w	lr, #1
   81dbe:	6058      	str	r0, [r3, #4]
   81dc0:	6019      	str	r1, [r3, #0]
   81dc2:	4602      	mov	r2, r0
   81dc4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81dc8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81dcc:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81dd0:	2e00      	cmp	r6, #0
   81dd2:	d0dc      	beq.n	81d8e <__register_exitproc+0x4a>
   81dd4:	e7cc      	b.n	81d70 <__register_exitproc+0x2c>
   81dd6:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   81dda:	4301      	orrs	r1, r0
   81ddc:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81de0:	e7d5      	b.n	81d8e <__register_exitproc+0x4a>
   81de2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   81de6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81dea:	e7bb      	b.n	81d64 <__register_exitproc+0x20>
   81dec:	6828      	ldr	r0, [r5, #0]
   81dee:	f7ff ffa7 	bl	81d40 <__retarget_lock_release_recursive>
   81df2:	f04f 30ff 	mov.w	r0, #4294967295
   81df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81dfa:	bf00      	nop
   81dfc:	20000430 	.word	0x20000430
   81e00:	00081e68 	.word	0x00081e68
   81e04:	00000000 	.word	0x00000000
   81e08:	304e4143 	.word	0x304e4143
   81e0c:	73656d20 	.word	0x73656d20
   81e10:	65676173 	.word	0x65676173
   81e14:	72726120 	.word	0x72726120
   81e18:	64657669 	.word	0x64657669
   81e1c:	206e6920 	.word	0x206e6920
   81e20:	2d6e6f6e 	.word	0x2d6e6f6e
   81e24:	64657375 	.word	0x64657375
   81e28:	69616d20 	.word	0x69616d20
   81e2c:	786f626c 	.word	0x786f626c
   81e30:	00000d0a 	.word	0x00000d0a
   81e34:	726f6373 	.word	0x726f6373
   81e38:	203d2065 	.word	0x203d2065
   81e3c:	000a6425 	.word	0x000a6425
   81e40:	6c756e28 	.word	0x6c756e28
   81e44:	0000296c 	.word	0x0000296c
   81e48:	3a525245 	.word	0x3a525245
   81e4c:	52415520 	.word	0x52415520
   81e50:	58522054 	.word	0x58522054
   81e54:	66756220 	.word	0x66756220
   81e58:	20726566 	.word	0x20726566
   81e5c:	66207369 	.word	0x66207369
   81e60:	0a6c6c75 	.word	0x0a6c6c75
   81e64:	0000000d 	.word	0x0000000d

00081e68 <_global_impure_ptr>:
   81e68:	20000008                                ... 

00081e6c <_init>:
   81e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81e6e:	bf00      	nop
   81e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81e72:	bc08      	pop	{r3}
   81e74:	469e      	mov	lr, r3
   81e76:	4770      	bx	lr

00081e78 <__init_array_start>:
   81e78:	00081ce9 	.word	0x00081ce9

00081e7c <__frame_dummy_init_array_entry>:
   81e7c:	00080119                                ....

00081e80 <_fini>:
   81e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81e82:	bf00      	nop
   81e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81e86:	bc08      	pop	{r3}
   81e88:	469e      	mov	lr, r3
   81e8a:	4770      	bx	lr

00081e8c <__fini_array_start>:
   81e8c:	000800f5 	.word	0x000800f5
