
Node_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fa4  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00081fa4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c4  20000434  000823d8  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004f8  0008249c  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008f8  0008289c  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   000098f5  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000169a  00000000  00000000  00029dab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000012d2  00000000  00000000  0002b445  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000248  00000000  00000000  0002c717  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  0002c95f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00013391  00000000  00000000  0002cb47  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000586f  00000000  00000000  0003fed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00054b47  00000000  00000000  00045747  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000008c4  00000000  00000000  0009a290  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	f8 08 00 20 e9 04 08 00 e5 04 08 00 e5 04 08 00     ... ............
   80010:	e5 04 08 00 e5 04 08 00 e5 04 08 00 00 00 00 00     ................
	...
   8002c:	e5 04 08 00 e5 04 08 00 00 00 00 00 e5 04 08 00     ................
   8003c:	e5 04 08 00 e5 04 08 00 e5 04 08 00 e5 04 08 00     ................
   8004c:	e5 04 08 00 e5 04 08 00 e5 04 08 00 e5 04 08 00     ................
   8005c:	e5 04 08 00 55 0f 08 00 e5 04 08 00 00 00 00 00     ....U...........
   8006c:	e5 04 08 00 e5 04 08 00 e5 04 08 00 e5 04 08 00     ................
	...
   80084:	e5 04 08 00 e5 04 08 00 e5 04 08 00 e5 04 08 00     ................
   80094:	e5 04 08 00 e5 04 08 00 e5 04 08 00 e5 04 08 00     ................
   800a4:	00 00 00 00 e5 04 08 00 bd 0b 08 00 e5 04 08 00     ................
   800b4:	e5 04 08 00 e5 04 08 00 e5 04 08 00 e5 04 08 00     ................
   800c4:	e5 04 08 00 e5 04 08 00 e5 04 08 00 e5 04 08 00     ................
   800d4:	e5 04 08 00 e5 04 08 00 e5 04 08 00 e5 04 08 00     ................
   800e4:	e5 04 08 00 e5 04 08 00 05 04 08 00 e5 04 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00081fa4 	.word	0x00081fa4

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081fa4 	.word	0x00081fa4
   80154:	20000438 	.word	0x20000438
   80158:	00081fa4 	.word	0x00081fa4
   8015c:	00000000 	.word	0x00000000

00080160 <Analog_IO_init>:
#include "Analog_IO.h"
#include "Timer.h"

void Analog_IO_init(void){
	/* Set up IR detection ADC */
	ADC -> ADC_WPMR &= ~ADC_WPMR_WPEN;		// Disable ADC Write protection 
   80160:	4b18      	ldr	r3, [pc, #96]	; (801c4 <Analog_IO_init+0x64>)
   80162:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   80166:	f022 0201 	bic.w	r2, r2, #1
   8016a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC -> PMC_PCER1 |= PMC_PCER1_PID37;	// Enable peripheral clock for ADC
   8016e:	4a16      	ldr	r2, [pc, #88]	; (801c8 <Analog_IO_init+0x68>)
   80170:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   80174:	f041 0120 	orr.w	r1, r1, #32
   80178:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100

	// Define ADC7 on port A PIN 16
	ADC -> ADC_MR = ADC_MR_FREERUN | ADC_MR_PRESCAL(255);		// ADC set to Freerun mode, default single ended mode and prescaler
   8017c:	f64f 7180 	movw	r1, #65408	; 0xff80
   80180:	6059      	str	r1, [r3, #4]
 	ADC -> ADC_CHER |= ADC_CHER_CH7;		// Enables channel 7
   80182:	6919      	ldr	r1, [r3, #16]
   80184:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   80188:	6119      	str	r1, [r3, #16]
	ADC -> ADC_CR |= ADC_CR_START;			// Begins analog-to-digital conversion
   8018a:	6819      	ldr	r1, [r3, #0]
   8018c:	f041 0102 	orr.w	r1, r1, #2
   80190:	6019      	str	r1, [r3, #0]
	//ADC -> ADC_IER |= ADC_IER_COMPE;		// Enables channel 7
	//ADC -> ADC_EMR = ADC_EMR_CMPMODE_LOW| ADC_EMR_CMPSEL(7) | ADC_EMR_CMPFILTER(5); 
	//ADC -> ADC_CWR = ADC_CWR_LOWTHRES(800); 	

	/* Set up motor DAC (MJEX) */
	DACC -> DACC_WPMR &= ~ DACC_WPMR_WPEN;	// Disable DAC Write protection 
   80192:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   80196:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
   8019a:	f021 0101 	bic.w	r1, r1, #1
   8019e:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
	PMC -> PMC_PCER1 |= PMC_PCER1_PID38;	// Enable peripheral clock for DAC
   801a2:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   801a6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   801aa:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	
	// Define DAC1 on port B PIN 16
	DACC -> DACC_MR |= DACC_MR_USER_SEL_CHANNEL1;	// Selects channel 1
   801ae:	685a      	ldr	r2, [r3, #4]
   801b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   801b4:	605a      	str	r2, [r3, #4]
	DACC -> DACC_CHER |= DACC_CHER_CH1;				// Enables channel 1
   801b6:	691a      	ldr	r2, [r3, #16]
   801b8:	f042 0202 	orr.w	r2, r2, #2
   801bc:	611a      	str	r2, [r3, #16]
	DACC -> DACC_CDR = 0;							// Set initial value to zero.
   801be:	2200      	movs	r2, #0
   801c0:	621a      	str	r2, [r3, #32]
   801c2:	4770      	bx	lr
   801c4:	400c0000 	.word	0x400c0000
   801c8:	400e0600 	.word	0x400e0600

000801cc <IR_detection>:
//	set_green_LED;
//}

uint8_t IR_detection(uint16_t threshold){
	//uint8_t ir_blocked = 0;
	if(Read_IR_VALUE < threshold){
   801cc:	4b03      	ldr	r3, [pc, #12]	; (801dc <IR_detection+0x10>)
   801ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
		return 1;
	}
	return 0;
}
   801d0:	4283      	cmp	r3, r0
   801d2:	bf2c      	ite	cs
   801d4:	2000      	movcs	r0, #0
   801d6:	2001      	movcc	r0, #1
   801d8:	4770      	bx	lr
   801da:	bf00      	nop
   801dc:	400c0000 	.word	0x400c0000

000801e0 <set_analog_value>:

void set_analog_value(uint16_t value){
	if(value > 4095){
		value = 4095;
	}
	DACC -> DACC_CDR = value;//*4095/100;	 
   801e0:	f640 73ff 	movw	r3, #4095	; 0xfff
   801e4:	4298      	cmp	r0, r3
   801e6:	bf28      	it	cs
   801e8:	4618      	movcs	r0, r3
   801ea:	4b01      	ldr	r3, [pc, #4]	; (801f0 <set_analog_value+0x10>)
   801ec:	6218      	str	r0, [r3, #32]
   801ee:	4770      	bx	lr
   801f0:	400c8000 	.word	0x400c8000

000801f4 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   801f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   801f8:	1855      	adds	r5, r2, r1
   801fa:	2908      	cmp	r1, #8
   801fc:	bf98      	it	ls
   801fe:	2a08      	cmpls	r2, #8
   80200:	d864      	bhi.n	802cc <can_init+0xd8>
   80202:	460e      	mov	r6, r1
   80204:	2d08      	cmp	r5, #8
   80206:	dc61      	bgt.n	802cc <can_init+0xd8>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   80208:	4a32      	ldr	r2, [pc, #200]	; (802d4 <can_init+0xe0>)
   8020a:	6813      	ldr	r3, [r2, #0]
   8020c:	f023 0301 	bic.w	r3, r3, #1
   80210:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   80212:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80214:	4b30      	ldr	r3, [pc, #192]	; (802d8 <can_init+0xe4>)
   80216:	f44f 7440 	mov.w	r4, #768	; 0x300
   8021a:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   8021c:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   8021e:	f024 0403 	bic.w	r4, r4, #3
   80222:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80224:	2403      	movs	r4, #3
   80226:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   80228:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   8022a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8022e:	4c2b      	ldr	r4, [pc, #172]	; (802dc <can_init+0xe8>)
   80230:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   80234:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   80238:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   8023c:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   80240:	6150      	str	r0, [r2, #20]
	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   80242:	42a9      	cmp	r1, r5
   80244:	dc40      	bgt.n	802c8 <can_init+0xd4>
   80246:	460a      	mov	r2, r1
   80248:	2400      	movs	r4, #0
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   8024a:	46a1      	mov	r9, r4
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   8024c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 802d4 <can_init+0xe0>
   80250:	f04f 5c00 	mov.w	ip, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   80254:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   80258:	2701      	movs	r7, #1
   8025a:	0153      	lsls	r3, r2, #5
   8025c:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   80260:	f500 2030 	add.w	r0, r0, #720896	; 0xb0000
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   80264:	f8c0 9204 	str.w	r9, [r0, #516]	; 0x204
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80268:	4443      	add	r3, r8
   8026a:	f8c3 c208 	str.w	ip, [r3, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   8026e:	f8c0 e200 	str.w	lr, [r0, #512]	; 0x200
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   80272:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
   80276:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8027a:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   8027e:	fa07 f302 	lsl.w	r3, r7, r2
   80282:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   80284:	3201      	adds	r2, #1
   80286:	4295      	cmp	r5, r2
   80288:	dae7      	bge.n	8025a <can_init+0x66>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
   8028a:	b181      	cbz	r1, 802ae <can_init+0xba>
   8028c:	2300      	movs	r3, #0
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   8028e:	4911      	ldr	r1, [pc, #68]	; (802d4 <can_init+0xe0>)
   80290:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80294:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   80298:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   8029c:	f8c2 5208 	str.w	r5, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   802a0:	f103 0210 	add.w	r2, r3, #16
   802a4:	0152      	lsls	r2, r2, #5
   802a6:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   802a8:	3301      	adds	r3, #1
   802aa:	429e      	cmp	r6, r3
   802ac:	d1f4      	bne.n	80298 <can_init+0xa4>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   802ae:	4b09      	ldr	r3, [pc, #36]	; (802d4 <can_init+0xe0>)
   802b0:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   802b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
   802b6:	4a0a      	ldr	r2, [pc, #40]	; (802e0 <can_init+0xec>)
   802b8:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   802ba:	681a      	ldr	r2, [r3, #0]
   802bc:	f042 0201 	orr.w	r2, r2, #1
   802c0:	601a      	str	r2, [r3, #0]

	return 0;
   802c2:	2000      	movs	r0, #0
   802c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t can_ier = 0;
   802c8:	2400      	movs	r4, #0
   802ca:	e7de      	b.n	8028a <can_init+0x96>
		return 1; //Too many mailboxes is configured
   802cc:	2001      	movs	r0, #1
}
   802ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   802d2:	bf00      	nop
   802d4:	400b4000 	.word	0x400b4000
   802d8:	400e0e00 	.word	0x400e0e00
   802dc:	1000102b 	.word	0x1000102b
   802e0:	e000e100 	.word	0xe000e100

000802e4 <can_init_def_tx_rx_mb>:
{
   802e4:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   802e6:	2202      	movs	r2, #2
   802e8:	2101      	movs	r1, #1
   802ea:	4b01      	ldr	r3, [pc, #4]	; (802f0 <can_init_def_tx_rx_mb+0xc>)
   802ec:	4798      	blx	r3
}
   802ee:	bd08      	pop	{r3, pc}
   802f0:	000801f5 	.word	0x000801f5

000802f4 <can_send>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_send(CAN_MESSAGE* can_msg, uint8_t tx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[tx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   802f4:	014b      	lsls	r3, r1, #5
   802f6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802fa:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80302:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80306:	d036      	beq.n	80376 <can_send+0x82>
	{
		//Set message ID and use CAN 2.0B protocol
		CAN0->CAN_MB[tx_mb_id].CAN_MID = CAN_MID_MIDvA(can_msg->id) | CAN_MID_MIDE ;
   80308:	8803      	ldrh	r3, [r0, #0]
   8030a:	4a1c      	ldr	r2, [pc, #112]	; (8037c <can_send+0x88>)
   8030c:	ea02 4283 	and.w	r2, r2, r3, lsl #18
   80310:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80314:	014b      	lsls	r3, r1, #5
   80316:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8031a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8031e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		
		//Make sure message is not to long
		if(can_msg->data_length > 7){
   80322:	7883      	ldrb	r3, [r0, #2]
   80324:	2b07      	cmp	r3, #7
			can_msg->data_length = 7;
   80326:	bf84      	itt	hi
   80328:	2307      	movhi	r3, #7
   8032a:	7083      	strbhi	r3, [r0, #2]
			//Message is to long, sending only the first 8 bytes
		}
		//Put message in can data registers
		CAN0->CAN_MB[tx_mb_id].CAN_MDL = can_msg->data[3] << 24 | can_msg->data[2] << 16 | can_msg->data[1] << 8 | can_msg->data[0];
   8032c:	7982      	ldrb	r2, [r0, #6]
   8032e:	7943      	ldrb	r3, [r0, #5]
   80330:	041b      	lsls	r3, r3, #16
   80332:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   80336:	78c2      	ldrb	r2, [r0, #3]
   80338:	4313      	orrs	r3, r2
   8033a:	7902      	ldrb	r2, [r0, #4]
   8033c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   80340:	0149      	lsls	r1, r1, #5
   80342:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   80346:	f501 2130 	add.w	r1, r1, #720896	; 0xb0000
   8034a:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
		CAN0->CAN_MB[tx_mb_id].CAN_MDH = can_msg->data[7] << 24 | can_msg->data[6] << 16 | can_msg->data[5] << 8 | can_msg->data[4];
   8034e:	7a82      	ldrb	r2, [r0, #10]
   80350:	7a43      	ldrb	r3, [r0, #9]
   80352:	041b      	lsls	r3, r3, #16
   80354:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   80358:	79c2      	ldrb	r2, [r0, #7]
   8035a:	4313      	orrs	r3, r2
   8035c:	7a02      	ldrb	r2, [r0, #8]
   8035e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   80362:	f8c1 3218 	str.w	r3, [r1, #536]	; 0x218
		
		//Set message length and mailbox ready to send
		CAN0->CAN_MB[tx_mb_id].CAN_MCR = (can_msg->data_length << CAN_MCR_MDLC_Pos) | CAN_MCR_MTCR;
   80366:	7883      	ldrb	r3, [r0, #2]
   80368:	041b      	lsls	r3, r3, #16
   8036a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8036e:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   80372:	2000      	movs	r0, #0
   80374:	4770      	bx	lr
	}
	
	else //Mailbox busy
	{
		return 1;
   80376:	2001      	movs	r0, #1
	}
	
}
   80378:	4770      	bx	lr
   8037a:	bf00      	nop
   8037c:	1ffc0000 	.word	0x1ffc0000

00080380 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80380:	014b      	lsls	r3, r1, #5
   80382:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80386:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8038a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8038e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80392:	d033      	beq.n	803fc <can_receive+0x7c>
{
   80394:	b430      	push	{r4, r5}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   80396:	014b      	lsls	r3, r1, #5
   80398:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8039c:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   803a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   803a4:	f8d3 4218 	ldr.w	r4, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   803a8:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   803ac:	f3c5 458a 	ubfx	r5, r5, #18, #11
   803b0:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   803b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   803b6:	f3c3 4303 	ubfx	r3, r3, #16, #4
   803ba:	7083      	strb	r3, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   803bc:	461d      	mov	r5, r3
   803be:	b15b      	cbz	r3, 803d8 <can_receive+0x58>
   803c0:	3003      	adds	r0, #3
   803c2:	2300      	movs	r3, #0
		{
			if(i < 4)
   803c4:	2b03      	cmp	r3, #3
			{
				can_msg->data[i] = (char)(data_low & 0xff);
   803c6:	bfd9      	ittee	le
   803c8:	7002      	strble	r2, [r0, #0]
				data_low = data_low >> 8;
   803ca:	0a12      	lsrle	r2, r2, #8
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   803cc:	7004      	strbgt	r4, [r0, #0]
				data_high = data_high >> 8;
   803ce:	0a24      	lsrgt	r4, r4, #8
		for(int i = 0; i < can_msg->data_length;i++)
   803d0:	3301      	adds	r3, #1
   803d2:	3001      	adds	r0, #1
   803d4:	42ab      	cmp	r3, r5
   803d6:	d1f5      	bne.n	803c4 <can_receive+0x44>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   803d8:	4b09      	ldr	r3, [pc, #36]	; (80400 <can_receive+0x80>)
   803da:	f101 0210 	add.w	r2, r1, #16
   803de:	0152      	lsls	r2, r2, #5
   803e0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   803e4:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   803e6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   803ea:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   803ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   803f2:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   803f6:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   803f8:	bc30      	pop	{r4, r5}
   803fa:	4770      	bx	lr
		return 1;
   803fc:	2001      	movs	r0, #1
   803fe:	4770      	bx	lr
   80400:	400b4000 	.word	0x400b4000

00080404 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   80404:	b510      	push	{r4, lr}
   80406:	b084      	sub	sp, #16
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   80408:	4b2b      	ldr	r3, [pc, #172]	; (804b8 <CAN0_Handler+0xb4>)
   8040a:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   8040c:	f014 0f06 	tst.w	r4, #6
   80410:	d018      	beq.n	80444 <CAN0_Handler+0x40>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   80412:	f014 0f02 	tst.w	r4, #2
   80416:	d122      	bne.n	8045e <CAN0_Handler+0x5a>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80418:	f014 0f04 	tst.w	r4, #4
   8041c:	d024      	beq.n	80468 <CAN0_Handler+0x64>
		
		{
			can_receive(&message, 2);
   8041e:	2102      	movs	r1, #2
   80420:	a801      	add	r0, sp, #4
   80422:	4b26      	ldr	r3, [pc, #152]	; (804bc <CAN0_Handler+0xb8>)
   80424:	4798      	blx	r3
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}
		
		
		if(message.id == 4){
   80426:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   8042a:	2b04      	cmp	r3, #4
   8042c:	d020      	beq.n	80470 <CAN0_Handler+0x6c>
			game_clock = message.data[0];
			game_score = message.data[0];
			game_ended = message.data[0];
		}
		if(message.id == 2){
   8042e:	2b02      	cmp	r3, #2
   80430:	d027      	beq.n	80482 <CAN0_Handler+0x7e>
			}
			if(message.data[0] == 0){
				deactivate_solenoid;
			}
		}
		if(message.id == 3){
   80432:	2b03      	cmp	r3, #3
   80434:	d037      	beq.n	804a6 <CAN0_Handler+0xa2>
		

			
		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   80436:	f89d 2006 	ldrb.w	r2, [sp, #6]
   8043a:	b11a      	cbz	r2, 80444 <CAN0_Handler+0x40>
   8043c:	2300      	movs	r3, #0
   8043e:	3301      	adds	r3, #1
   80440:	4293      	cmp	r3, r2
   80442:	d1fc      	bne.n	8043e <CAN0_Handler+0x3a>
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	
	if(can_sr & CAN_SR_MB0)
   80444:	f014 0f01 	tst.w	r4, #1
   80448:	d002      	beq.n	80450 <CAN0_Handler+0x4c>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   8044a:	2201      	movs	r2, #1
   8044c:	4b1a      	ldr	r3, [pc, #104]	; (804b8 <CAN0_Handler+0xb4>)
   8044e:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80450:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80454:	4b1a      	ldr	r3, [pc, #104]	; (804c0 <CAN0_Handler+0xbc>)
   80456:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   8045a:	b004      	add	sp, #16
   8045c:	bd10      	pop	{r4, pc}
			can_receive(&message, 1);
   8045e:	2101      	movs	r1, #1
   80460:	a801      	add	r0, sp, #4
   80462:	4b16      	ldr	r3, [pc, #88]	; (804bc <CAN0_Handler+0xb8>)
   80464:	4798      	blx	r3
   80466:	e7de      	b.n	80426 <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80468:	4816      	ldr	r0, [pc, #88]	; (804c4 <CAN0_Handler+0xc0>)
   8046a:	4b17      	ldr	r3, [pc, #92]	; (804c8 <CAN0_Handler+0xc4>)
   8046c:	4798      	blx	r3
   8046e:	e7da      	b.n	80426 <CAN0_Handler+0x22>
			game_clock = message.data[0];
   80470:	f89d 3007 	ldrb.w	r3, [sp, #7]
   80474:	4a15      	ldr	r2, [pc, #84]	; (804cc <CAN0_Handler+0xc8>)
   80476:	6013      	str	r3, [r2, #0]
			game_score = message.data[0];
   80478:	4a15      	ldr	r2, [pc, #84]	; (804d0 <CAN0_Handler+0xcc>)
   8047a:	7013      	strb	r3, [r2, #0]
			game_ended = message.data[0];
   8047c:	4a15      	ldr	r2, [pc, #84]	; (804d4 <CAN0_Handler+0xd0>)
   8047e:	7013      	strb	r3, [r2, #0]
   80480:	e7d9      	b.n	80436 <CAN0_Handler+0x32>
			if(message.data[0] == 1){
   80482:	f89d 3007 	ldrb.w	r3, [sp, #7]
   80486:	2b01      	cmp	r3, #1
   80488:	d007      	beq.n	8049a <CAN0_Handler+0x96>
			if(message.data[0] == 0){
   8048a:	2b00      	cmp	r3, #0
   8048c:	d1d3      	bne.n	80436 <CAN0_Handler+0x32>
				deactivate_solenoid;
   8048e:	4a12      	ldr	r2, [pc, #72]	; (804d8 <CAN0_Handler+0xd4>)
   80490:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80492:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   80496:	6313      	str	r3, [r2, #48]	; 0x30
   80498:	e7cd      	b.n	80436 <CAN0_Handler+0x32>
				activate_solenoid;
   8049a:	4a0f      	ldr	r2, [pc, #60]	; (804d8 <CAN0_Handler+0xd4>)
   8049c:	6b53      	ldr	r3, [r2, #52]	; 0x34
   8049e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   804a2:	6353      	str	r3, [r2, #52]	; 0x34
   804a4:	e7c7      	b.n	80436 <CAN0_Handler+0x32>
			set_servo_pos(message.data[1]);
   804a6:	f89d 0008 	ldrb.w	r0, [sp, #8]
   804aa:	4b0c      	ldr	r3, [pc, #48]	; (804dc <CAN0_Handler+0xd8>)
   804ac:	4798      	blx	r3
			update_pos_ref(message.data[0]);
   804ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
   804b2:	4b0b      	ldr	r3, [pc, #44]	; (804e0 <CAN0_Handler+0xdc>)
   804b4:	4798      	blx	r3
   804b6:	e7be      	b.n	80436 <CAN0_Handler+0x32>
   804b8:	400b4000 	.word	0x400b4000
   804bc:	00080381 	.word	0x00080381
   804c0:	e000e100 	.word	0xe000e100
   804c4:	00081ef4 	.word	0x00081ef4
   804c8:	00080ea5 	.word	0x00080ea5
   804cc:	20000450 	.word	0x20000450
   804d0:	2000048c 	.word	0x2000048c
   804d4:	2000048d 	.word	0x2000048d
   804d8:	400e1200 	.word	0x400e1200
   804dc:	00080ac5 	.word	0x00080ac5
   804e0:	00080965 	.word	0x00080965

000804e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   804e4:	e7fe      	b.n	804e4 <Dummy_Handler>
	...

000804e8 <Reset_Handler>:
{
   804e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   804ea:	4b18      	ldr	r3, [pc, #96]	; (8054c <Reset_Handler+0x64>)
   804ec:	4a18      	ldr	r2, [pc, #96]	; (80550 <Reset_Handler+0x68>)
   804ee:	429a      	cmp	r2, r3
   804f0:	d010      	beq.n	80514 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
   804f2:	4b18      	ldr	r3, [pc, #96]	; (80554 <Reset_Handler+0x6c>)
   804f4:	4a15      	ldr	r2, [pc, #84]	; (8054c <Reset_Handler+0x64>)
   804f6:	429a      	cmp	r2, r3
   804f8:	d20c      	bcs.n	80514 <Reset_Handler+0x2c>
   804fa:	3b01      	subs	r3, #1
   804fc:	1a9b      	subs	r3, r3, r2
   804fe:	f023 0303 	bic.w	r3, r3, #3
   80502:	3304      	adds	r3, #4
   80504:	4413      	add	r3, r2
   80506:	4912      	ldr	r1, [pc, #72]	; (80550 <Reset_Handler+0x68>)
                        *pDest++ = *pSrc++;
   80508:	f851 0b04 	ldr.w	r0, [r1], #4
   8050c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
   80510:	429a      	cmp	r2, r3
   80512:	d1f9      	bne.n	80508 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
   80514:	4b10      	ldr	r3, [pc, #64]	; (80558 <Reset_Handler+0x70>)
   80516:	4a11      	ldr	r2, [pc, #68]	; (8055c <Reset_Handler+0x74>)
   80518:	429a      	cmp	r2, r3
   8051a:	d20a      	bcs.n	80532 <Reset_Handler+0x4a>
   8051c:	3b01      	subs	r3, #1
   8051e:	1a9b      	subs	r3, r3, r2
   80520:	f023 0303 	bic.w	r3, r3, #3
   80524:	3304      	adds	r3, #4
   80526:	4413      	add	r3, r2
                *pDest++ = 0;
   80528:	2100      	movs	r1, #0
   8052a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
   8052e:	4293      	cmp	r3, r2
   80530:	d1fb      	bne.n	8052a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80532:	4b0b      	ldr	r3, [pc, #44]	; (80560 <Reset_Handler+0x78>)
   80534:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80538:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8053c:	4a09      	ldr	r2, [pc, #36]	; (80564 <Reset_Handler+0x7c>)
   8053e:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   80540:	4b09      	ldr	r3, [pc, #36]	; (80568 <Reset_Handler+0x80>)
   80542:	4798      	blx	r3
        main();
   80544:	4b09      	ldr	r3, [pc, #36]	; (8056c <Reset_Handler+0x84>)
   80546:	4798      	blx	r3
   80548:	e7fe      	b.n	80548 <Reset_Handler+0x60>
   8054a:	bf00      	nop
   8054c:	20000000 	.word	0x20000000
   80550:	00081fa4 	.word	0x00081fa4
   80554:	20000434 	.word	0x20000434
   80558:	200004f8 	.word	0x200004f8
   8055c:	20000434 	.word	0x20000434
   80560:	00080000 	.word	0x00080000
   80564:	e000ed00 	.word	0xe000ed00
   80568:	00081d85 	.word	0x00081d85
   8056c:	00080715 	.word	0x00080715

00080570 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80570:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80574:	4a20      	ldr	r2, [pc, #128]	; (805f8 <SystemInit+0x88>)
   80576:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   80578:	f502 7200 	add.w	r2, r2, #512	; 0x200
   8057c:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   8057e:	4b1f      	ldr	r3, [pc, #124]	; (805fc <SystemInit+0x8c>)
   80580:	6a1b      	ldr	r3, [r3, #32]
   80582:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80586:	d107      	bne.n	80598 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   80588:	4a1d      	ldr	r2, [pc, #116]	; (80600 <SystemInit+0x90>)
   8058a:	4b1c      	ldr	r3, [pc, #112]	; (805fc <SystemInit+0x8c>)
   8058c:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   8058e:	461a      	mov	r2, r3
   80590:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80592:	f013 0f01 	tst.w	r3, #1
   80596:	d0fb      	beq.n	80590 <SystemInit+0x20>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   80598:	4a1a      	ldr	r2, [pc, #104]	; (80604 <SystemInit+0x94>)
   8059a:	4b18      	ldr	r3, [pc, #96]	; (805fc <SystemInit+0x8c>)
   8059c:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   8059e:	461a      	mov	r2, r3
   805a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805a2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   805a6:	d0fb      	beq.n	805a0 <SystemInit+0x30>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   805a8:	4a14      	ldr	r2, [pc, #80]	; (805fc <SystemInit+0x8c>)
   805aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
   805ac:	f023 0303 	bic.w	r3, r3, #3
   805b0:	f043 0301 	orr.w	r3, r3, #1
   805b4:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   805b6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805b8:	f013 0f08 	tst.w	r3, #8
   805bc:	d0fb      	beq.n	805b6 <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   805be:	4a12      	ldr	r2, [pc, #72]	; (80608 <SystemInit+0x98>)
   805c0:	4b0e      	ldr	r3, [pc, #56]	; (805fc <SystemInit+0x8c>)
   805c2:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   805c4:	461a      	mov	r2, r3
   805c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805c8:	f013 0f02 	tst.w	r3, #2
   805cc:	d0fb      	beq.n	805c6 <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   805ce:	2211      	movs	r2, #17
   805d0:	4b0a      	ldr	r3, [pc, #40]	; (805fc <SystemInit+0x8c>)
   805d2:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   805d4:	461a      	mov	r2, r3
   805d6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805d8:	f013 0f08 	tst.w	r3, #8
   805dc:	d0fb      	beq.n	805d6 <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   805de:	2212      	movs	r2, #18
   805e0:	4b06      	ldr	r3, [pc, #24]	; (805fc <SystemInit+0x8c>)
   805e2:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   805e4:	461a      	mov	r2, r3
   805e6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805e8:	f013 0f08 	tst.w	r3, #8
   805ec:	d0fb      	beq.n	805e6 <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   805ee:	4a07      	ldr	r2, [pc, #28]	; (8060c <SystemInit+0x9c>)
   805f0:	4b07      	ldr	r3, [pc, #28]	; (80610 <SystemInit+0xa0>)
   805f2:	601a      	str	r2, [r3, #0]
   805f4:	4770      	bx	lr
   805f6:	bf00      	nop
   805f8:	400e0a00 	.word	0x400e0a00
   805fc:	400e0600 	.word	0x400e0600
   80600:	00370809 	.word	0x00370809
   80604:	01370809 	.word	0x01370809
   80608:	200d3f01 	.word	0x200d3f01
   8060c:	0501bd00 	.word	0x0501bd00
   80610:	20000000 	.word	0x20000000

00080614 <IO_Init>:
#include "IO.h"

void IO_Init(void){
	
	/* Set up LEDS */
	PIOA -> PIO_WPMR &= ~PIO_WPMR_WPEN;	// Disable IO Write protection PIOA
   80614:	4b3b      	ldr	r3, [pc, #236]	; (80704 <IO_Init+0xf0>)
   80616:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   8061a:	f022 0201 	bic.w	r2, r2, #1
   8061e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER0 |= PMC_PCER0_PID11;  // Enable peripheral clock for PIOA
   80622:	4939      	ldr	r1, [pc, #228]	; (80708 <IO_Init+0xf4>)
   80624:	690a      	ldr	r2, [r1, #16]
   80626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8062a:	610a      	str	r2, [r1, #16]
	// Define Pin 19 on port A as output
	PIOA -> PIO_PER |= PIO_PER_P19;		// PIO enable
   8062c:	681a      	ldr	r2, [r3, #0]
   8062e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80632:	601a      	str	r2, [r3, #0]
	PIOA -> PIO_OER |= PIO_OER_P19;		// P19 Configured as output (D1)
   80634:	691a      	ldr	r2, [r3, #16]
   80636:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   8063a:	611a      	str	r2, [r3, #16]
	// Define Pin 19 on port A as output
	PIOA -> PIO_PER |= PIO_PER_P20;		// PIO enable
   8063c:	681a      	ldr	r2, [r3, #0]
   8063e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80642:	601a      	str	r2, [r3, #0]
	PIOA -> PIO_OER |= PIO_OER_P20;		// P20 Configured as output (D2)
   80644:	691a      	ldr	r2, [r3, #16]
   80646:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   8064a:	611a      	str	r2, [r3, #16]
	
	
	/* Set up Solenoid */
	PIOC -> PIO_WPMR &= ~PIO_WPMR_WPEN; // Disable IO Write protection PIOC
   8064c:	4a2f      	ldr	r2, [pc, #188]	; (8070c <IO_Init+0xf8>)
   8064e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   80652:	f023 0301 	bic.w	r3, r3, #1
   80656:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	PMC->PMC_PCER0 |= PMC_PCER0_PID13;  // Enable peripheral clock for PIOC	
   8065a:	690b      	ldr	r3, [r1, #16]
   8065c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   80660:	610b      	str	r3, [r1, #16]
	// Define Pin 19 on port A as output
	PIOC -> PIO_PER |= PIO_PER_P12;		// PIO enable
   80662:	6813      	ldr	r3, [r2, #0]
   80664:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   80668:	6013      	str	r3, [r2, #0]
	PIOC -> PIO_OER |= PIO_OER_P12;		// P19 Configured as output (D1)
   8066a:	6913      	ldr	r3, [r2, #16]
   8066c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   80670:	6113      	str	r3, [r2, #16]
	deactivate_solenoid;
   80672:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80674:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   80678:	6313      	str	r3, [r2, #48]	; 0x30
	
	
	/* Set up MJ1 */
	PIOD -> PIO_WPMR &= ~PIO_WPMR_WPEN;	// Disable IO Write protection PIOD
   8067a:	4b25      	ldr	r3, [pc, #148]	; (80710 <IO_Init+0xfc>)
   8067c:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
   80680:	f020 0001 	bic.w	r0, r0, #1
   80684:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
	PMC->PMC_PCER0 |= PMC_PCER0_PID14;  // Enable peripheral clock for PIOD
   80688:	6908      	ldr	r0, [r1, #16]
   8068a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
   8068e:	6108      	str	r0, [r1, #16]
	
	// Define Pin 0 on port D as output
	PIOD -> PIO_PER |= PIO_PER_P0;		// PIO enable
   80690:	6819      	ldr	r1, [r3, #0]
   80692:	f041 0101 	orr.w	r1, r1, #1
   80696:	6019      	str	r1, [r3, #0]
	PIOD -> PIO_OER |= PIO_OER_P0;		// P19 Configured as output (!OE enable encoder (Pin3))
   80698:	6919      	ldr	r1, [r3, #16]
   8069a:	f041 0101 	orr.w	r1, r1, #1
   8069e:	6119      	str	r1, [r3, #16]
	disable_encoder;
   806a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
   806a2:	f041 0101 	orr.w	r1, r1, #1
   806a6:	6319      	str	r1, [r3, #48]	; 0x30
	
	// Define Pin 1 on port D as output
	PIOD -> PIO_PER |= PIO_PER_P1;		// PIO enable
   806a8:	6819      	ldr	r1, [r3, #0]
   806aa:	f041 0102 	orr.w	r1, r1, #2
   806ae:	6019      	str	r1, [r3, #0]
	PIOD -> PIO_OER |= PIO_OER_P1;		// P19 Configured as output (!RST reset encoder (Pin4))
   806b0:	6919      	ldr	r1, [r3, #16]
   806b2:	f041 0102 	orr.w	r1, r1, #2
   806b6:	6119      	str	r1, [r3, #16]
	disable_encoder_reset;
   806b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
   806ba:	f041 0102 	orr.w	r1, r1, #2
   806be:	6319      	str	r1, [r3, #48]	; 0x30
	
	// Define Pin 2 on port D as output
	PIOD -> PIO_PER |= PIO_PER_P2;		// PIO enable
   806c0:	6819      	ldr	r1, [r3, #0]
   806c2:	f041 0104 	orr.w	r1, r1, #4
   806c6:	6019      	str	r1, [r3, #0]
	PIOD -> PIO_OER |= PIO_OER_P2;		// P19 Configured as output (SEL High/low byte select encoder (pin5))
   806c8:	6919      	ldr	r1, [r3, #16]
   806ca:	f041 0104 	orr.w	r1, r1, #4
   806ce:	6119      	str	r1, [r3, #16]
	// Define Pin 9 on port D as output
	PIOD -> PIO_PER |= PIO_PER_P9;		// PIO enable
   806d0:	6819      	ldr	r1, [r3, #0]
   806d2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   806d6:	6019      	str	r1, [r3, #0]
	PIOD -> PIO_OER |= PIO_OER_P9;		// P19 Configured as output (EN Enables motor (pin6))
   806d8:	6919      	ldr	r1, [r3, #16]
   806da:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   806de:	6119      	str	r1, [r3, #16]
	// Define Pin 10 on port D as output
	PIOD -> PIO_PER |= PIO_PER_P10;		// PIO enable
   806e0:	6819      	ldr	r1, [r3, #0]
   806e2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
   806e6:	6019      	str	r1, [r3, #0]
	PIOD -> PIO_OER |= PIO_OER_P10;		// P19 Configured as output (DIR Set motor direction (Pin7))
   806e8:	6919      	ldr	r1, [r3, #16]
   806ea:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
   806ee:	6119      	str	r1, [r3, #16]
	
	
	
	/* Set up MJ2 */
	// Define Pin 1 to 8 on port C as input
	PIOC -> PIO_PER |= 0x1FE;
   806f0:	6813      	ldr	r3, [r2, #0]
   806f2:	f443 73ff 	orr.w	r3, r3, #510	; 0x1fe
   806f6:	6013      	str	r3, [r2, #0]
	PIOC -> PIO_ODR |= 0x1FE;
   806f8:	6953      	ldr	r3, [r2, #20]
   806fa:	f443 73ff 	orr.w	r3, r3, #510	; 0x1fe
   806fe:	6153      	str	r3, [r2, #20]
   80700:	4770      	bx	lr
   80702:	bf00      	nop
   80704:	400e0e00 	.word	0x400e0e00
   80708:	400e0600 	.word	0x400e0600
   8070c:	400e1200 	.word	0x400e1200
   80710:	400e1400 	.word	0x400e1400

00080714 <main>:




int main(void)
{
   80714:	b580      	push	{r7, lr}
	/* Initialize the SAM system */
    SystemInit();
   80716:	4b2e      	ldr	r3, [pc, #184]	; (807d0 <main+0xbc>)
   80718:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS; //Disable Watchdog Timer
   8071a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8071e:	4b2d      	ldr	r3, [pc, #180]	; (807d4 <main+0xc0>)
   80720:	605a      	str	r2, [r3, #4]
		
	configure_uart();
   80722:	4b2d      	ldr	r3, [pc, #180]	; (807d8 <main+0xc4>)
   80724:	4798      	blx	r3
	can_init_def_tx_rx_mb(0x00290165);		//see can config sheet on github
   80726:	482d      	ldr	r0, [pc, #180]	; (807dc <main+0xc8>)
   80728:	4b2d      	ldr	r3, [pc, #180]	; (807e0 <main+0xcc>)
   8072a:	4798      	blx	r3
	IO_Init();
   8072c:	4b2d      	ldr	r3, [pc, #180]	; (807e4 <main+0xd0>)
   8072e:	4798      	blx	r3
	Analog_IO_init();
   80730:	4b2d      	ldr	r3, [pc, #180]	; (807e8 <main+0xd4>)
   80732:	4798      	blx	r3
	PWM_init();
   80734:	4b2d      	ldr	r3, [pc, #180]	; (807ec <main+0xd8>)
   80736:	4798      	blx	r3
	motor_init();
   80738:	4b2d      	ldr	r3, [pc, #180]	; (807f0 <main+0xdc>)
   8073a:	4798      	blx	r3
	Timer_init();
   8073c:	4b2d      	ldr	r3, [pc, #180]	; (807f4 <main+0xe0>)
   8073e:	4798      	blx	r3
	
	
	//printf("Welcome PuTTY's\n\r");
	//set_orange_LED;
	set_green_LED;
   80740:	4a2d      	ldr	r2, [pc, #180]	; (807f8 <main+0xe4>)
   80742:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   80748:	6313      	str	r3, [r2, #48]	; 0x30
	//game.id = 1;
	//game.data_length = 2;
	//game.data[0] = 0;
	//game.data[1] = 0;
		
	game_score = 0;
   8074a:	2200      	movs	r2, #0
   8074c:	4b2b      	ldr	r3, [pc, #172]	; (807fc <main+0xe8>)
   8074e:	701a      	strb	r2, [r3, #0]
    game_ended = 1;
   80750:	2201      	movs	r2, #1
   80752:	4b2b      	ldr	r3, [pc, #172]	; (80800 <main+0xec>)
   80754:	701a      	strb	r2, [r3, #0]
	
	while (1) 
    {
		if(IR_detection(300) == 1){
			while(IR_detection(1500) == 1);
			game_score = game_score + 1;
   80756:	4f29      	ldr	r7, [pc, #164]	; (807fc <main+0xe8>)
		}
		
		
		if(game_clock >= 6000 && game_ended == 0){ //game time = 1 min
   80758:	4e2a      	ldr	r6, [pc, #168]	; (80804 <main+0xf0>)
   8075a:	4698      	mov	r8, r3
   8075c:	e015      	b.n	8078a <main+0x76>
			while(IR_detection(1500) == 1);
   8075e:	f240 55dc 	movw	r5, #1500	; 0x5dc
   80762:	4c29      	ldr	r4, [pc, #164]	; (80808 <main+0xf4>)
   80764:	4628      	mov	r0, r5
   80766:	47a0      	blx	r4
   80768:	2801      	cmp	r0, #1
   8076a:	d0fb      	beq.n	80764 <main+0x50>
			game_score = game_score + 1;
   8076c:	783b      	ldrb	r3, [r7, #0]
   8076e:	3301      	adds	r3, #1
   80770:	703b      	strb	r3, [r7, #0]
   80772:	e010      	b.n	80796 <main+0x82>
			game.data[0] = game_score;
			game.data[1] = game_ended;
			while(can_send(&game, 0) == 1);
		}
	
		printf("score = %d\n", game_score);
   80774:	7839      	ldrb	r1, [r7, #0]
   80776:	4825      	ldr	r0, [pc, #148]	; (8080c <main+0xf8>)
   80778:	4c25      	ldr	r4, [pc, #148]	; (80810 <main+0xfc>)
   8077a:	47a0      	blx	r4
		printf("Game clock = %d\n", game_clock);
   8077c:	6831      	ldr	r1, [r6, #0]
   8077e:	4825      	ldr	r0, [pc, #148]	; (80814 <main+0x100>)
   80780:	47a0      	blx	r4
		printf("Game ended = %d\n", game_ended);
   80782:	f898 1000 	ldrb.w	r1, [r8]
   80786:	4824      	ldr	r0, [pc, #144]	; (80818 <main+0x104>)
   80788:	47a0      	blx	r4
		if(IR_detection(300) == 1){
   8078a:	f44f 7096 	mov.w	r0, #300	; 0x12c
   8078e:	4b1e      	ldr	r3, [pc, #120]	; (80808 <main+0xf4>)
   80790:	4798      	blx	r3
   80792:	2801      	cmp	r0, #1
   80794:	d0e3      	beq.n	8075e <main+0x4a>
		if(game_clock >= 6000 && game_ended == 0){ //game time = 1 min
   80796:	6832      	ldr	r2, [r6, #0]
   80798:	f241 736f 	movw	r3, #5999	; 0x176f
   8079c:	429a      	cmp	r2, r3
   8079e:	d9e9      	bls.n	80774 <main+0x60>
   807a0:	f898 3000 	ldrb.w	r3, [r8]
   807a4:	2b00      	cmp	r3, #0
   807a6:	d1e5      	bne.n	80774 <main+0x60>
			game_ended = 1;
   807a8:	2201      	movs	r2, #1
   807aa:	f888 2000 	strb.w	r2, [r8]
			game.id = 1;
   807ae:	4b1b      	ldr	r3, [pc, #108]	; (8081c <main+0x108>)
   807b0:	801a      	strh	r2, [r3, #0]
			game.data_length = 2;
   807b2:	2102      	movs	r1, #2
   807b4:	7099      	strb	r1, [r3, #2]
			game.data[0] = game_score;
   807b6:	7839      	ldrb	r1, [r7, #0]
   807b8:	70d9      	strb	r1, [r3, #3]
			game.data[1] = game_ended;
   807ba:	711a      	strb	r2, [r3, #4]
			while(can_send(&game, 0) == 1);
   807bc:	4699      	mov	r9, r3
   807be:	2500      	movs	r5, #0
   807c0:	4c17      	ldr	r4, [pc, #92]	; (80820 <main+0x10c>)
   807c2:	4629      	mov	r1, r5
   807c4:	4648      	mov	r0, r9
   807c6:	47a0      	blx	r4
   807c8:	2801      	cmp	r0, #1
   807ca:	d0fa      	beq.n	807c2 <main+0xae>
   807cc:	e7d2      	b.n	80774 <main+0x60>
   807ce:	bf00      	nop
   807d0:	00080571 	.word	0x00080571
   807d4:	400e1a50 	.word	0x400e1a50
   807d8:	00080ec9 	.word	0x00080ec9
   807dc:	00290165 	.word	0x00290165
   807e0:	000802e5 	.word	0x000802e5
   807e4:	00080615 	.word	0x00080615
   807e8:	00080161 	.word	0x00080161
   807ec:	00080a5d 	.word	0x00080a5d
   807f0:	000808e5 	.word	0x000808e5
   807f4:	00080b55 	.word	0x00080b55
   807f8:	400e0e00 	.word	0x400e0e00
   807fc:	2000048c 	.word	0x2000048c
   80800:	2000048d 	.word	0x2000048d
   80804:	20000450 	.word	0x20000450
   80808:	000801cd 	.word	0x000801cd
   8080c:	00081f20 	.word	0x00081f20
   80810:	00080ea5 	.word	0x00080ea5
   80814:	00081f2c 	.word	0x00081f2c
   80818:	00081f40 	.word	0x00081f40
   8081c:	20000480 	.word	0x20000480
   80820:	000802f5 	.word	0x000802f5

00080824 <read_encoder>:
	PID.Ki = 0.00;//0.2;
			
	}
	
	
int16_t read_encoder(void){
   80824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int16_t pos_and_direction = 0;
	enable_encoder;
   80826:	4c0f      	ldr	r4, [pc, #60]	; (80864 <read_encoder+0x40>)
   80828:	6b63      	ldr	r3, [r4, #52]	; 0x34
   8082a:	f043 0301 	orr.w	r3, r3, #1
   8082e:	6363      	str	r3, [r4, #52]	; 0x34
	sel_MSB_encoder;	
   80830:	6b63      	ldr	r3, [r4, #52]	; 0x34
   80832:	f043 0304 	orr.w	r3, r3, #4
   80836:	6363      	str	r3, [r4, #52]	; 0x34
	_delay_us(20);
   80838:	2014      	movs	r0, #20
   8083a:	4f0b      	ldr	r7, [pc, #44]	; (80868 <read_encoder+0x44>)
   8083c:	47b8      	blx	r7
	pos_and_direction |= ((read_encoder_mask >> 1) << 8);
   8083e:	4e0b      	ldr	r6, [pc, #44]	; (8086c <read_encoder+0x48>)
   80840:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
	sel_LSB_encoder;
   80842:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80844:	f043 0304 	orr.w	r3, r3, #4
   80848:	6323      	str	r3, [r4, #48]	; 0x30
	_delay_us(20);
   8084a:	2014      	movs	r0, #20
   8084c:	47b8      	blx	r7
	pos_and_direction |= (read_encoder_mask >> 1);
   8084e:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
	//enable_encoder_reset
	//_delay_us(10);
	//disable_encoder_reset;
	disable_encoder;	
   80850:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80852:	f043 0301 	orr.w	r3, r3, #1
   80856:	6323      	str	r3, [r4, #48]	; 0x30
	pos_and_direction |= (read_encoder_mask >> 1);
   80858:	b2c0      	uxtb	r0, r0
   8085a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	return pos_and_direction;
}
   8085e:	b200      	sxth	r0, r0
   80860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80862:	bf00      	nop
   80864:	400e1400 	.word	0x400e1400
   80868:	00080af1 	.word	0x00080af1
   8086c:	400e1200 	.word	0x400e1200

00080870 <reset_encoder>:


void reset_encoder(void){
   80870:	b510      	push	{r4, lr}
	enable_encoder;
   80872:	4c0a      	ldr	r4, [pc, #40]	; (8089c <reset_encoder+0x2c>)
   80874:	6b63      	ldr	r3, [r4, #52]	; 0x34
   80876:	f043 0301 	orr.w	r3, r3, #1
   8087a:	6363      	str	r3, [r4, #52]	; 0x34
	enable_encoder_reset;
   8087c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   8087e:	f043 0302 	orr.w	r3, r3, #2
   80882:	6363      	str	r3, [r4, #52]	; 0x34
	_delay_us(10);
   80884:	200a      	movs	r0, #10
   80886:	4b06      	ldr	r3, [pc, #24]	; (808a0 <reset_encoder+0x30>)
   80888:	4798      	blx	r3
	disable_encoder_reset;
   8088a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8088c:	f043 0302 	orr.w	r3, r3, #2
   80890:	6323      	str	r3, [r4, #48]	; 0x30
	disable_encoder;
   80892:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80894:	f043 0301 	orr.w	r3, r3, #1
   80898:	6323      	str	r3, [r4, #48]	; 0x30
   8089a:	bd10      	pop	{r4, pc}
   8089c:	400e1400 	.word	0x400e1400
   808a0:	00080af1 	.word	0x00080af1

000808a4 <set_motor_speed>:
}


void set_motor_speed(int16_t speed_and_direction){
   808a4:	b508      	push	{r3, lr}
	if (speed_and_direction < 0){
   808a6:	2800      	cmp	r0, #0
   808a8:	db0b      	blt.n	808c2 <set_motor_speed+0x1e>
		set_neg_motor_dir;
		set_analog_value(abs(speed_and_direction));
	}
	else{
		set_pos_motor_dir;		
   808aa:	4a0c      	ldr	r2, [pc, #48]	; (808dc <set_motor_speed+0x38>)
   808ac:	6b53      	ldr	r3, [r2, #52]	; 0x34
   808ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   808b2:	6353      	str	r3, [r2, #52]	; 0x34
		set_analog_value(abs(speed_and_direction));
   808b4:	2800      	cmp	r0, #0
   808b6:	bfb8      	it	lt
   808b8:	4240      	neglt	r0, r0
   808ba:	b280      	uxth	r0, r0
   808bc:	4b08      	ldr	r3, [pc, #32]	; (808e0 <set_motor_speed+0x3c>)
   808be:	4798      	blx	r3
   808c0:	bd08      	pop	{r3, pc}
		set_neg_motor_dir;
   808c2:	4a06      	ldr	r2, [pc, #24]	; (808dc <set_motor_speed+0x38>)
   808c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   808c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   808ca:	6313      	str	r3, [r2, #48]	; 0x30
		set_analog_value(abs(speed_and_direction));
   808cc:	2800      	cmp	r0, #0
   808ce:	bfb8      	it	lt
   808d0:	4240      	neglt	r0, r0
   808d2:	b280      	uxth	r0, r0
   808d4:	4b02      	ldr	r3, [pc, #8]	; (808e0 <set_motor_speed+0x3c>)
   808d6:	4798      	blx	r3
   808d8:	bd08      	pop	{r3, pc}
   808da:	bf00      	nop
   808dc:	400e1400 	.word	0x400e1400
   808e0:	000801e1 	.word	0x000801e1

000808e4 <motor_init>:
void motor_init(void){
   808e4:	b538      	push	{r3, r4, r5, lr}
	enable_motor;
   808e6:	4a15      	ldr	r2, [pc, #84]	; (8093c <motor_init+0x58>)
   808e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   808ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   808ee:	6313      	str	r3, [r2, #48]	; 0x30
	set_motor_speed(-2000);
   808f0:	4813      	ldr	r0, [pc, #76]	; (80940 <motor_init+0x5c>)
   808f2:	4c14      	ldr	r4, [pc, #80]	; (80944 <motor_init+0x60>)
   808f4:	47a0      	blx	r4
	_delay_ms(1000);
   808f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   808fa:	4d13      	ldr	r5, [pc, #76]	; (80948 <motor_init+0x64>)
   808fc:	47a8      	blx	r5
	reset_encoder();
   808fe:	4b13      	ldr	r3, [pc, #76]	; (8094c <motor_init+0x68>)
   80900:	4798      	blx	r3
	_delay_ms(200);
   80902:	20c8      	movs	r0, #200	; 0xc8
   80904:	47a8      	blx	r5
	set_motor_speed(2000);
   80906:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   8090a:	47a0      	blx	r4
	_delay_ms(1000);	
   8090c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80910:	47a8      	blx	r5
	encoder_range = read_encoder();
   80912:	4b0f      	ldr	r3, [pc, #60]	; (80950 <motor_init+0x6c>)
   80914:	4798      	blx	r3
   80916:	4d0f      	ldr	r5, [pc, #60]	; (80954 <motor_init+0x70>)
   80918:	8028      	strh	r0, [r5, #0]
	set_motor_speed(0);	
   8091a:	2000      	movs	r0, #0
   8091c:	47a0      	blx	r4
	PID.pos_ref = encoder_range/2;
   8091e:	4c0e      	ldr	r4, [pc, #56]	; (80958 <motor_init+0x74>)
   80920:	f9b5 0000 	ldrsh.w	r0, [r5]
   80924:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   80928:	1040      	asrs	r0, r0, #1
   8092a:	4b0c      	ldr	r3, [pc, #48]	; (8095c <motor_init+0x78>)
   8092c:	4798      	blx	r3
   8092e:	61e0      	str	r0, [r4, #28]
	PID.Kp = 0.7;
   80930:	4b0b      	ldr	r3, [pc, #44]	; (80960 <motor_init+0x7c>)
   80932:	6023      	str	r3, [r4, #0]
	PID.Ki = 0.00;//0.2;
   80934:	2300      	movs	r3, #0
   80936:	6063      	str	r3, [r4, #4]
   80938:	bd38      	pop	{r3, r4, r5, pc}
   8093a:	bf00      	nop
   8093c:	400e1400 	.word	0x400e1400
   80940:	fffff830 	.word	0xfffff830
   80944:	000808a5 	.word	0x000808a5
   80948:	00080b35 	.word	0x00080b35
   8094c:	00080871 	.word	0x00080871
   80950:	00080825 	.word	0x00080825
   80954:	20000454 	.word	0x20000454
   80958:	20000458 	.word	0x20000458
   8095c:	00081905 	.word	0x00081905
   80960:	3f333333 	.word	0x3f333333

00080964 <update_pos_ref>:
	}
}

void update_pos_ref(uint16_t ref_pos){
   80964:	b508      	push	{r3, lr}
	ref_pos = ref_pos - 38;    //offset compensating for Joystick
   80966:	f1a0 0326 	sub.w	r3, r0, #38	; 0x26
   8096a:	b29b      	uxth	r3, r3
	if (ref_pos < 38){
		ref_pos = 38;
	}
	//printf("ref_pos = %d/n", ref_pos);
	PID.pos_ref = (encoder_range/2)-(ref_pos-130)*90;
   8096c:	2b26      	cmp	r3, #38	; 0x26
   8096e:	bf38      	it	cc
   80970:	2326      	movcc	r3, #38	; 0x26
   80972:	3b82      	subs	r3, #130	; 0x82
   80974:	4a07      	ldr	r2, [pc, #28]	; (80994 <update_pos_ref+0x30>)
   80976:	f9b2 0000 	ldrsh.w	r0, [r2]
   8097a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   8097e:	1040      	asrs	r0, r0, #1
   80980:	f06f 0259 	mvn.w	r2, #89	; 0x59
   80984:	fb02 0003 	mla	r0, r2, r3, r0
   80988:	4b03      	ldr	r3, [pc, #12]	; (80998 <update_pos_ref+0x34>)
   8098a:	4798      	blx	r3
   8098c:	4b03      	ldr	r3, [pc, #12]	; (8099c <update_pos_ref+0x38>)
   8098e:	61d8      	str	r0, [r3, #28]
   80990:	bd08      	pop	{r3, pc}
   80992:	bf00      	nop
   80994:	20000454 	.word	0x20000454
   80998:	00081905 	.word	0x00081905
   8099c:	20000458 	.word	0x20000458

000809a0 <PID_regulator>:
	//PID.output = PID.error*PID.Kp + PID.error_i*PID.Ki;
	//
	//set_motor_speed((int16_t)PID.output);	
//}

void PID_regulator(void){
   809a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PID.pos = read_encoder();
   809a2:	4b23      	ldr	r3, [pc, #140]	; (80a30 <PID_regulator+0x90>)
   809a4:	4798      	blx	r3
   809a6:	4b23      	ldr	r3, [pc, #140]	; (80a34 <PID_regulator+0x94>)
   809a8:	4798      	blx	r3
   809aa:	4604      	mov	r4, r0
   809ac:	4b22      	ldr	r3, [pc, #136]	; (80a38 <PID_regulator+0x98>)
   809ae:	6198      	str	r0, [r3, #24]
	
	if (PID.pos < 0){
   809b0:	2100      	movs	r1, #0
   809b2:	4b22      	ldr	r3, [pc, #136]	; (80a3c <PID_regulator+0x9c>)
   809b4:	4798      	blx	r3
   809b6:	2800      	cmp	r0, #0
   809b8:	d132      	bne.n	80a20 <PID_regulator+0x80>
		PID.pos = 0;
	}
	else if(PID.pos > encoder_range){
   809ba:	4b21      	ldr	r3, [pc, #132]	; (80a40 <PID_regulator+0xa0>)
   809bc:	f9b3 0000 	ldrsh.w	r0, [r3]
   809c0:	4b1c      	ldr	r3, [pc, #112]	; (80a34 <PID_regulator+0x94>)
   809c2:	4798      	blx	r3
   809c4:	4605      	mov	r5, r0
   809c6:	4601      	mov	r1, r0
   809c8:	4620      	mov	r0, r4
   809ca:	4b1e      	ldr	r3, [pc, #120]	; (80a44 <PID_regulator+0xa4>)
   809cc:	4798      	blx	r3
   809ce:	b108      	cbz	r0, 809d4 <PID_regulator+0x34>
		PID.pos = encoder_range;
   809d0:	4b19      	ldr	r3, [pc, #100]	; (80a38 <PID_regulator+0x98>)
   809d2:	619d      	str	r5, [r3, #24]
	}
	
	PID.error = PID.pos_ref - PID.pos;
   809d4:	4c18      	ldr	r4, [pc, #96]	; (80a38 <PID_regulator+0x98>)
   809d6:	69a1      	ldr	r1, [r4, #24]
   809d8:	69e0      	ldr	r0, [r4, #28]
   809da:	4b1b      	ldr	r3, [pc, #108]	; (80a48 <PID_regulator+0xa8>)
   809dc:	4798      	blx	r3
   809de:	4605      	mov	r5, r0
   809e0:	6120      	str	r0, [r4, #16]
	
	if(abs(PID.error) < 100){
   809e2:	4b1a      	ldr	r3, [pc, #104]	; (80a4c <PID_regulator+0xac>)
   809e4:	4798      	blx	r3
   809e6:	3063      	adds	r0, #99	; 0x63
   809e8:	28c6      	cmp	r0, #198	; 0xc6
   809ea:	d91d      	bls.n	80a28 <PID_regulator+0x88>
		PID.error_i = 0;
	}
	else{
		PID.error_i = PID.error_i + PID.error;
   809ec:	4c12      	ldr	r4, [pc, #72]	; (80a38 <PID_regulator+0x98>)
   809ee:	4629      	mov	r1, r5
   809f0:	6960      	ldr	r0, [r4, #20]
   809f2:	4b17      	ldr	r3, [pc, #92]	; (80a50 <PID_regulator+0xb0>)
   809f4:	4798      	blx	r3
   809f6:	6160      	str	r0, [r4, #20]
	}
	
	PID.output = PID.error*PID.Kp + PID.error_i*PID.Ki;
   809f8:	4c0f      	ldr	r4, [pc, #60]	; (80a38 <PID_regulator+0x98>)
   809fa:	4e16      	ldr	r6, [pc, #88]	; (80a54 <PID_regulator+0xb4>)
   809fc:	6861      	ldr	r1, [r4, #4]
   809fe:	6960      	ldr	r0, [r4, #20]
   80a00:	47b0      	blx	r6
   80a02:	4607      	mov	r7, r0
   80a04:	6821      	ldr	r1, [r4, #0]
   80a06:	4628      	mov	r0, r5
   80a08:	47b0      	blx	r6
   80a0a:	4601      	mov	r1, r0
   80a0c:	4638      	mov	r0, r7
   80a0e:	4b10      	ldr	r3, [pc, #64]	; (80a50 <PID_regulator+0xb0>)
   80a10:	4798      	blx	r3
   80a12:	6220      	str	r0, [r4, #32]
	
	set_motor_speed((int16_t)PID.output);
   80a14:	4b0d      	ldr	r3, [pc, #52]	; (80a4c <PID_regulator+0xac>)
   80a16:	4798      	blx	r3
   80a18:	b200      	sxth	r0, r0
   80a1a:	4b0f      	ldr	r3, [pc, #60]	; (80a58 <PID_regulator+0xb8>)
   80a1c:	4798      	blx	r3
   80a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		PID.pos = 0;
   80a20:	2200      	movs	r2, #0
   80a22:	4b05      	ldr	r3, [pc, #20]	; (80a38 <PID_regulator+0x98>)
   80a24:	619a      	str	r2, [r3, #24]
   80a26:	e7d5      	b.n	809d4 <PID_regulator+0x34>
		PID.error_i = 0;
   80a28:	2200      	movs	r2, #0
   80a2a:	6162      	str	r2, [r4, #20]
   80a2c:	e7e4      	b.n	809f8 <PID_regulator+0x58>
   80a2e:	bf00      	nop
   80a30:	00080825 	.word	0x00080825
   80a34:	00081905 	.word	0x00081905
   80a38:	20000458 	.word	0x20000458
   80a3c:	00081ce9 	.word	0x00081ce9
   80a40:	20000454 	.word	0x20000454
   80a44:	00081d25 	.word	0x00081d25
   80a48:	00081799 	.word	0x00081799
   80a4c:	00081d39 	.word	0x00081d39
   80a50:	0008179d 	.word	0x0008179d
   80a54:	000819ad 	.word	0x000819ad
   80a58:	000808a5 	.word	0x000808a5

00080a5c <PWM_init>:

void PWM_init(void){
	
	/* Set up PWM */
	//PMC->PMC_SCER = PMC_SCER_PCK0 | PMC_SCER_PCK1 | PMC_SCER_PCK2;	 // Enable all programmable clocks
	PMC->PMC_PCER1 |= PMC_PCER1_PID36;								 // Enable clock on PWM Controller 
   80a5c:	4a15      	ldr	r2, [pc, #84]	; (80ab4 <PWM_init+0x58>)
   80a5e:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80a62:	f043 0310 	orr.w	r3, r3, #16
   80a66:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	// Define Pin 19 on port C as output
	PIOC->PIO_OER |= PIO_PC19;			// PIO Output enable
   80a6a:	4b13      	ldr	r3, [pc, #76]	; (80ab8 <PWM_init+0x5c>)
   80a6c:	691a      	ldr	r2, [r3, #16]
   80a6e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80a72:	611a      	str	r2, [r3, #16]
	PIOC->PIO_PDR |= PIO_PC19;			// P19 Configured as output (silk - PIN45)
   80a74:	685a      	ldr	r2, [r3, #4]
   80a76:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80a7a:	605a      	str	r2, [r3, #4]
	PIOC->PIO_ABSR |= PIO_ABSR_P19;		// Set peripheral MUX to channel B (PWM)
   80a7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80a7e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80a82:	671a      	str	r2, [r3, #112]	; 0x70
	
	// Setup PWM servo signal
	PWM->PWM_WPCR &= ~PIO_WPMR_WPEN;		// Disable PWM write protection
   80a84:	4a0d      	ldr	r2, [pc, #52]	; (80abc <PWM_init+0x60>)
   80a86:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   80a8a:	f023 0301 	bic.w	r3, r3, #1
   80a8e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	REG_PWM_CMR5 = PWM_CMR_CPRE_MCK_DIV_1024 | PWM_CMR_CPOL;	// Set 1024 prescaler and Output wave form start high
   80a92:	f240 220a 	movw	r2, #522	; 0x20a
   80a96:	4b0a      	ldr	r3, [pc, #40]	; (80ac0 <PWM_init+0x64>)
   80a98:	601a      	str	r2, [r3, #0]
	REG_PWM_CPRD5 = 1640;			//CPRD = 20ms * 84MHz/1024
   80a9a:	f44f 62cd 	mov.w	r2, #1640	; 0x668
   80a9e:	330c      	adds	r3, #12
   80aa0:	601a      	str	r2, [r3, #0]
	REG_PWM_CDTY5 = 123;			//CPRY = 1.5ms * 84MHz/1024 (min = 74/max = 172 values)
   80aa2:	227b      	movs	r2, #123	; 0x7b
   80aa4:	3b08      	subs	r3, #8
   80aa6:	601a      	str	r2, [r3, #0]
	REG_PWM_ENA = PWM_ENA_CHID5;	// Enable PWM
   80aa8:	2220      	movs	r2, #32
   80aaa:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
   80aae:	601a      	str	r2, [r3, #0]
   80ab0:	4770      	bx	lr
   80ab2:	bf00      	nop
   80ab4:	400e0600 	.word	0x400e0600
   80ab8:	400e1200 	.word	0x400e1200
   80abc:	40094000 	.word	0x40094000
   80ac0:	400942a0 	.word	0x400942a0

00080ac4 <set_servo_pos>:
}


void set_servo_pos(int value){
	value = value - 38;    //offset compensating for Joystick
   80ac4:	3826      	subs	r0, #38	; 0x26
 	if (value < 38){	 
		value = 38;
	} 
	REG_PWM_CDTY5 = 74 + value*98/255;	 //CPRY = periode * 84MHz/1024 (min = 74/max = 172 vulues)
   80ac6:	2826      	cmp	r0, #38	; 0x26
   80ac8:	bfb8      	it	lt
   80aca:	2026      	movlt	r0, #38	; 0x26
   80acc:	2362      	movs	r3, #98	; 0x62
   80ace:	fb03 f000 	mul.w	r0, r3, r0
   80ad2:	4b05      	ldr	r3, [pc, #20]	; (80ae8 <set_servo_pos+0x24>)
   80ad4:	fb83 2300 	smull	r2, r3, r3, r0
   80ad8:	4403      	add	r3, r0
   80ada:	17c0      	asrs	r0, r0, #31
   80adc:	ebc0 10e3 	rsb	r0, r0, r3, asr #7
   80ae0:	304a      	adds	r0, #74	; 0x4a
   80ae2:	4b02      	ldr	r3, [pc, #8]	; (80aec <set_servo_pos+0x28>)
   80ae4:	6018      	str	r0, [r3, #0]
   80ae6:	4770      	bx	lr
   80ae8:	80808081 	.word	0x80808081
   80aec:	400942a4 	.word	0x400942a4

00080af0 <_delay_us>:

#include "Timer.h"


void _delay_us(uint32_t us) //NB max value is 1597 000us
{
   80af0:	b510      	push	{r4, lr}
	SysTick->LOAD = 10.5 * us; //MCK = 10.5MHz
   80af2:	4b0b      	ldr	r3, [pc, #44]	; (80b20 <_delay_us+0x30>)
   80af4:	4798      	blx	r3
   80af6:	2200      	movs	r2, #0
   80af8:	4b0a      	ldr	r3, [pc, #40]	; (80b24 <_delay_us+0x34>)
   80afa:	4c0b      	ldr	r4, [pc, #44]	; (80b28 <_delay_us+0x38>)
   80afc:	47a0      	blx	r4
   80afe:	4b0b      	ldr	r3, [pc, #44]	; (80b2c <_delay_us+0x3c>)
   80b00:	4798      	blx	r3
   80b02:	4b0b      	ldr	r3, [pc, #44]	; (80b30 <_delay_us+0x40>)
   80b04:	6058      	str	r0, [r3, #4]
	SysTick->CTRL = SysTick_CTRL_ENABLE_Msk; // Enable SysTick
   80b06:	2201      	movs	r2, #1
   80b08:	601a      	str	r2, [r3, #0]
	while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // Wait until Systick timer is finished
   80b0a:	461a      	mov	r2, r3
   80b0c:	6813      	ldr	r3, [r2, #0]
   80b0e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80b12:	d0fb      	beq.n	80b0c <_delay_us+0x1c>
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk; // Disable SysTick
   80b14:	4a06      	ldr	r2, [pc, #24]	; (80b30 <_delay_us+0x40>)
   80b16:	6813      	ldr	r3, [r2, #0]
   80b18:	f023 0301 	bic.w	r3, r3, #1
   80b1c:	6013      	str	r3, [r2, #0]
   80b1e:	bd10      	pop	{r4, pc}
   80b20:	00081241 	.word	0x00081241
   80b24:	40250000 	.word	0x40250000
   80b28:	0008132d 	.word	0x0008132d
   80b2c:	00081751 	.word	0x00081751
   80b30:	e000e010 	.word	0xe000e010

00080b34 <_delay_ms>:
}

void _delay_ms(uint32_t ms) 
{
	for(uint32_t i = 0; i<ms; i++){
   80b34:	b158      	cbz	r0, 80b4e <_delay_ms+0x1a>
{
   80b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80b38:	4605      	mov	r5, r0
	for(uint32_t i = 0; i<ms; i++){
   80b3a:	2400      	movs	r4, #0
		_delay_us(1000);
   80b3c:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   80b40:	4e03      	ldr	r6, [pc, #12]	; (80b50 <_delay_ms+0x1c>)
   80b42:	4638      	mov	r0, r7
   80b44:	47b0      	blx	r6
	for(uint32_t i = 0; i<ms; i++){
   80b46:	3401      	adds	r4, #1
   80b48:	42a5      	cmp	r5, r4
   80b4a:	d1fa      	bne.n	80b42 <_delay_ms+0xe>
   80b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80b4e:	4770      	bx	lr
   80b50:	00080af1 	.word	0x00080af1

00080b54 <Timer_init>:


void Timer_init(void){
									 
	/* Setup Timer 0 */	
	PMC->PMC_PCER0 |= PMC_PCER0_PID27;		// Enable clock on TC0
   80b54:	4a13      	ldr	r2, [pc, #76]	; (80ba4 <Timer_init+0x50>)
   80b56:	6913      	ldr	r3, [r2, #16]
   80b58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   80b5c:	6113      	str	r3, [r2, #16]
	TC0->TC_WPMR &= ~TC_WPMR_WPEN;			// Disable TC write protection
   80b5e:	4a12      	ldr	r2, [pc, #72]	; (80ba8 <Timer_init+0x54>)
   80b60:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   80b64:	f023 0301 	bic.w	r3, r3, #1
   80b68:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	REG_TC0_CMR0 |= TC_CMR_TCCLKS_TIMER_CLOCK3 | TC_CMR_CPCTRG;		// Set 32 prescaler and resets on compare match
   80b6c:	490f      	ldr	r1, [pc, #60]	; (80bac <Timer_init+0x58>)
   80b6e:	680b      	ldr	r3, [r1, #0]
   80b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   80b74:	f043 0302 	orr.w	r3, r3, #2
   80b78:	600b      	str	r3, [r1, #0]
	REG_TC0_IER0 |= TC_IER_CPCS;	// Enable interrupt on compare match
   80b7a:	3120      	adds	r1, #32
   80b7c:	680b      	ldr	r3, [r1, #0]
   80b7e:	f043 0310 	orr.w	r3, r3, #16
   80b82:	600b      	str	r3, [r1, #0]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   80b84:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b88:	4b09      	ldr	r3, [pc, #36]	; (80bb0 <Timer_init+0x5c>)
   80b8a:	6019      	str	r1, [r3, #0]
	
	
	NVIC_EnableIRQ(TC0_IRQn);		// Enable timer counter interrupt
	REG_TC0_CCR0 |= TC_CCR_CLKEN| TC_CCR_SWTRG;	// Enable Timer 0
   80b8c:	6813      	ldr	r3, [r2, #0]
   80b8e:	f043 0305 	orr.w	r3, r3, #5
   80b92:	6013      	str	r3, [r2, #0]
	//REG_TC0_RC0 = 2625;				// counts = 1ms/(32/MCK)
	REG_TC0_RC0 = 26250;				// counts = 10ms/(32/MCK)
   80b94:	f246 628a 	movw	r2, #26250	; 0x668a
   80b98:	4b06      	ldr	r3, [pc, #24]	; (80bb4 <Timer_init+0x60>)
   80b9a:	601a      	str	r2, [r3, #0]
	game_clock = 0;
   80b9c:	2200      	movs	r2, #0
   80b9e:	4b06      	ldr	r3, [pc, #24]	; (80bb8 <Timer_init+0x64>)
   80ba0:	601a      	str	r2, [r3, #0]
   80ba2:	4770      	bx	lr
   80ba4:	400e0600 	.word	0x400e0600
   80ba8:	40080000 	.word	0x40080000
   80bac:	40080004 	.word	0x40080004
   80bb0:	e000e100 	.word	0xe000e100
   80bb4:	4008001c 	.word	0x4008001c
   80bb8:	20000450 	.word	0x20000450

00080bbc <TC0_Handler>:
}



void TC0_Handler(void){
   80bbc:	b508      	push	{r3, lr}
	uint32_t clear_TCO_flag = REG_TC0_SR0;//SR0_flag = REG_TC0_SR0;  // Interrupt flag is cleared by reading  
   80bbe:	4b04      	ldr	r3, [pc, #16]	; (80bd0 <TC0_Handler+0x14>)
   80bc0:	681b      	ldr	r3, [r3, #0]
	game_clock = game_clock + 1;
   80bc2:	4a04      	ldr	r2, [pc, #16]	; (80bd4 <TC0_Handler+0x18>)
   80bc4:	6813      	ldr	r3, [r2, #0]
   80bc6:	3301      	adds	r3, #1
   80bc8:	6013      	str	r3, [r2, #0]
	PID_regulator();
   80bca:	4b03      	ldr	r3, [pc, #12]	; (80bd8 <TC0_Handler+0x1c>)
   80bcc:	4798      	blx	r3
   80bce:	bd08      	pop	{r3, pc}
   80bd0:	40080020 	.word	0x40080020
   80bd4:	20000450 	.word	0x20000450
   80bd8:	000809a1 	.word	0x000809a1

00080bdc <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80be0:	460d      	mov	r5, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80be2:	1e16      	subs	r6, r2, #0
   80be4:	dd48      	ble.n	80c78 <prints+0x9c>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   80be6:	780a      	ldrb	r2, [r1, #0]
   80be8:	2a00      	cmp	r2, #0
   80bea:	d035      	beq.n	80c58 <prints+0x7c>
   80bec:	460a      	mov	r2, r1
   80bee:	2400      	movs	r4, #0
   80bf0:	3401      	adds	r4, #1
   80bf2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   80bf6:	2900      	cmp	r1, #0
   80bf8:	d1fa      	bne.n	80bf0 <prints+0x14>
		if (len >= width) width = 0;
   80bfa:	42a6      	cmp	r6, r4
   80bfc:	dc2d      	bgt.n	80c5a <prints+0x7e>
   80bfe:	2400      	movs	r4, #0
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
   80c00:	f003 0202 	and.w	r2, r3, #2
   80c04:	2a00      	cmp	r2, #0
   80c06:	bf0c      	ite	eq
   80c08:	f04f 0820 	moveq.w	r8, #32
   80c0c:	f04f 0830 	movne.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
   80c10:	f013 0301 	ands.w	r3, r3, #1
   80c14:	d123      	bne.n	80c5e <prints+0x82>
		for ( ; width > 0; --width) {
   80c16:	2c00      	cmp	r4, #0
   80c18:	dd28      	ble.n	80c6c <prints+0x90>
   80c1a:	4626      	mov	r6, r4
	(void) uart_putchar(c);  //Send characters to uart
   80c1c:	fa5f f988 	uxtb.w	r9, r8
   80c20:	4f18      	ldr	r7, [pc, #96]	; (80c84 <prints+0xa8>)
   80c22:	4648      	mov	r0, r9
   80c24:	47b8      	blx	r7
		for ( ; width > 0; --width) {
   80c26:	3e01      	subs	r6, #1
   80c28:	d1fb      	bne.n	80c22 <prints+0x46>
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   80c2a:	7828      	ldrb	r0, [r5, #0]
   80c2c:	b188      	cbz	r0, 80c52 <prints+0x76>
	(void) uart_putchar(c);  //Send characters to uart
   80c2e:	4f15      	ldr	r7, [pc, #84]	; (80c84 <prints+0xa8>)
   80c30:	47b8      	blx	r7
		printchar (out, *string);
		++pc;
   80c32:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80c34:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   80c38:	2800      	cmp	r0, #0
   80c3a:	d1f9      	bne.n	80c30 <prints+0x54>
	}
	for ( ; width > 0; --width) {
   80c3c:	2e00      	cmp	r6, #0
   80c3e:	dd08      	ble.n	80c52 <prints+0x76>
   80c40:	4635      	mov	r5, r6
	(void) uart_putchar(c);  //Send characters to uart
   80c42:	fa5f f888 	uxtb.w	r8, r8
   80c46:	4f0f      	ldr	r7, [pc, #60]	; (80c84 <prints+0xa8>)
   80c48:	4640      	mov	r0, r8
   80c4a:	47b8      	blx	r7
	for ( ; width > 0; --width) {
   80c4c:	3d01      	subs	r5, #1
   80c4e:	d1fb      	bne.n	80c48 <prints+0x6c>
   80c50:	4434      	add	r4, r6
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
   80c52:	4620      	mov	r0, r4
   80c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (ptr = string; *ptr; ++ptr) ++len;
   80c58:	2400      	movs	r4, #0
		else width -= len;
   80c5a:	1b34      	subs	r4, r6, r4
   80c5c:	e7d0      	b.n	80c00 <prints+0x24>
   80c5e:	4626      	mov	r6, r4
	for ( ; *string ; ++string) {
   80c60:	7828      	ldrb	r0, [r5, #0]
   80c62:	b108      	cbz	r0, 80c68 <prints+0x8c>
	register int pc = 0, padchar = ' ';
   80c64:	2400      	movs	r4, #0
   80c66:	e7e2      	b.n	80c2e <prints+0x52>
   80c68:	2400      	movs	r4, #0
   80c6a:	e7e7      	b.n	80c3c <prints+0x60>
		for ( ; width > 0; --width) {
   80c6c:	4626      	mov	r6, r4
   80c6e:	461c      	mov	r4, r3
   80c70:	e7db      	b.n	80c2a <prints+0x4e>
	register int pc = 0, padchar = ' ';
   80c72:	f04f 0820 	mov.w	r8, #32
   80c76:	e7d8      	b.n	80c2a <prints+0x4e>
	if (!(pad & PAD_RIGHT)) {
   80c78:	f013 0401 	ands.w	r4, r3, #1
   80c7c:	d0f9      	beq.n	80c72 <prints+0x96>
	register int pc = 0, padchar = ' ';
   80c7e:	f04f 0820 	mov.w	r8, #32
   80c82:	e7ed      	b.n	80c60 <prints+0x84>
   80c84:	00080f31 	.word	0x00080f31

00080c88 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80c88:	b5f0      	push	{r4, r5, r6, r7, lr}
   80c8a:	b085      	sub	sp, #20
   80c8c:	4607      	mov	r7, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80c8e:	b381      	cbz	r1, 80cf2 <printi+0x6a>
   80c90:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   80c92:	b10b      	cbz	r3, 80c98 <printi+0x10>
   80c94:	2a0a      	cmp	r2, #10
   80c96:	d038      	beq.n	80d0a <printi+0x82>
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   80c98:	2300      	movs	r3, #0
   80c9a:	f88d 300f 	strb.w	r3, [sp, #15]

	while (u) {
   80c9e:	2600      	movs	r6, #0
   80ca0:	2900      	cmp	r1, #0
   80ca2:	d046      	beq.n	80d32 <printi+0xaa>
   80ca4:	f10d 050f 	add.w	r5, sp, #15
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
   80ca8:	990c      	ldr	r1, [sp, #48]	; 0x30
   80caa:	393a      	subs	r1, #58	; 0x3a
		t = u % b;
   80cac:	fbb4 f3f2 	udiv	r3, r4, r2
   80cb0:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   80cb4:	2b09      	cmp	r3, #9
			t += letbase - '0' - 10;
   80cb6:	bfc8      	it	gt
   80cb8:	185b      	addgt	r3, r3, r1
		*--s = t + '0';
   80cba:	3330      	adds	r3, #48	; 0x30
   80cbc:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   80cc0:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   80cc4:	2c00      	cmp	r4, #0
   80cc6:	d1f1      	bne.n	80cac <printi+0x24>
	}

	if (neg) {
   80cc8:	b156      	cbz	r6, 80ce0 <printi+0x58>
		if( width && (pad & PAD_ZERO) ) {
   80cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80ccc:	b11b      	cbz	r3, 80cd6 <printi+0x4e>
   80cce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80cd0:	f013 0f02 	tst.w	r3, #2
   80cd4:	d125      	bne.n	80d22 <printi+0x9a>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   80cd6:	232d      	movs	r3, #45	; 0x2d
   80cd8:	f805 3c01 	strb.w	r3, [r5, #-1]
   80cdc:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80cde:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80ce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80ce2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80ce4:	4629      	mov	r1, r5
   80ce6:	4638      	mov	r0, r7
   80ce8:	4c14      	ldr	r4, [pc, #80]	; (80d3c <printi+0xb4>)
   80cea:	47a0      	blx	r4
   80cec:	4430      	add	r0, r6
}
   80cee:	b005      	add	sp, #20
   80cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_buf[0] = '0';
   80cf2:	2330      	movs	r3, #48	; 0x30
   80cf4:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80cf8:	2300      	movs	r3, #0
   80cfa:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80cfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80d00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80d02:	a901      	add	r1, sp, #4
   80d04:	4c0d      	ldr	r4, [pc, #52]	; (80d3c <printi+0xb4>)
   80d06:	47a0      	blx	r4
   80d08:	e7f1      	b.n	80cee <printi+0x66>
	if (sg && b == 10 && i < 0) {
   80d0a:	2900      	cmp	r1, #0
   80d0c:	dac4      	bge.n	80c98 <printi+0x10>
		u = -i;
   80d0e:	424c      	negs	r4, r1
	*s = '\0';
   80d10:	2300      	movs	r3, #0
   80d12:	f88d 300f 	strb.w	r3, [sp, #15]
	s = print_buf + PRINT_BUF_LEN-1;
   80d16:	f10d 050f 	add.w	r5, sp, #15
	while (u) {
   80d1a:	2c00      	cmp	r4, #0
   80d1c:	d0d5      	beq.n	80cca <printi+0x42>
		neg = 1;
   80d1e:	2601      	movs	r6, #1
   80d20:	e7c0      	b.n	80ca4 <printi+0x1c>
	(void) uart_putchar(c);  //Send characters to uart
   80d22:	202d      	movs	r0, #45	; 0x2d
   80d24:	4b06      	ldr	r3, [pc, #24]	; (80d40 <printi+0xb8>)
   80d26:	4798      	blx	r3
			--width;
   80d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80d2a:	3b01      	subs	r3, #1
   80d2c:	930a      	str	r3, [sp, #40]	; 0x28
			++pc;
   80d2e:	2601      	movs	r6, #1
			--width;
   80d30:	e7d6      	b.n	80ce0 <printi+0x58>
	register int t, neg = 0, pc = 0;
   80d32:	461e      	mov	r6, r3
	s = print_buf + PRINT_BUF_LEN-1;
   80d34:	f10d 050f 	add.w	r5, sp, #15
   80d38:	e7d2      	b.n	80ce0 <printi+0x58>
   80d3a:	bf00      	nop
   80d3c:	00080bdd 	.word	0x00080bdd
   80d40:	00080f31 	.word	0x00080f31

00080d44 <print>:

static int print( char **out, const char *format, va_list args )
{
   80d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80d48:	b087      	sub	sp, #28
   80d4a:	4680      	mov	r8, r0
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   80d4c:	780b      	ldrb	r3, [r1, #0]
   80d4e:	2b00      	cmp	r3, #0
   80d50:	f000 8094 	beq.w	80e7c <print+0x138>
   80d54:	468b      	mov	fp, r1
   80d56:	4617      	mov	r7, r2
   80d58:	2500      	movs	r5, #0
	(void) uart_putchar(c);  //Send characters to uart
   80d5a:	4e4e      	ldr	r6, [pc, #312]	; (80e94 <print+0x150>)
			}
			if( *format == 'c' ) {
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
				scr[1] = '\0';
				pc += prints (out, scr, width, pad);
   80d5c:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80e9c <print+0x158>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80d60:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80ea0 <print+0x15c>
   80d64:	e046      	b.n	80df4 <print+0xb0>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80d66:	2200      	movs	r2, #0
   80d68:	e070      	b.n	80e4c <print+0x108>
				register char *s = (char *)va_arg( args, int );
   80d6a:	6839      	ldr	r1, [r7, #0]
   80d6c:	3704      	adds	r7, #4
				pc += prints (out, s?s:"(null)", width, pad);
   80d6e:	484a      	ldr	r0, [pc, #296]	; (80e98 <print+0x154>)
   80d70:	2900      	cmp	r1, #0
   80d72:	bf08      	it	eq
   80d74:	4601      	moveq	r1, r0
   80d76:	4640      	mov	r0, r8
   80d78:	47d0      	blx	sl
   80d7a:	4405      	add	r5, r0
				continue;
   80d7c:	e035      	b.n	80dea <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80d7e:	6839      	ldr	r1, [r7, #0]
   80d80:	3704      	adds	r7, #4
   80d82:	2061      	movs	r0, #97	; 0x61
   80d84:	9002      	str	r0, [sp, #8]
   80d86:	9301      	str	r3, [sp, #4]
   80d88:	9200      	str	r2, [sp, #0]
   80d8a:	2301      	movs	r3, #1
   80d8c:	220a      	movs	r2, #10
   80d8e:	4640      	mov	r0, r8
   80d90:	47c8      	blx	r9
   80d92:	4405      	add	r5, r0
				continue;
   80d94:	e029      	b.n	80dea <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80d96:	6839      	ldr	r1, [r7, #0]
   80d98:	3704      	adds	r7, #4
   80d9a:	2061      	movs	r0, #97	; 0x61
   80d9c:	9002      	str	r0, [sp, #8]
   80d9e:	9301      	str	r3, [sp, #4]
   80da0:	9200      	str	r2, [sp, #0]
   80da2:	2300      	movs	r3, #0
   80da4:	2210      	movs	r2, #16
   80da6:	4640      	mov	r0, r8
   80da8:	47c8      	blx	r9
   80daa:	4405      	add	r5, r0
				continue;
   80dac:	e01d      	b.n	80dea <print+0xa6>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80dae:	6839      	ldr	r1, [r7, #0]
   80db0:	3704      	adds	r7, #4
   80db2:	2041      	movs	r0, #65	; 0x41
   80db4:	9002      	str	r0, [sp, #8]
   80db6:	9301      	str	r3, [sp, #4]
   80db8:	9200      	str	r2, [sp, #0]
   80dba:	2300      	movs	r3, #0
   80dbc:	2210      	movs	r2, #16
   80dbe:	4640      	mov	r0, r8
   80dc0:	47c8      	blx	r9
   80dc2:	4405      	add	r5, r0
				continue;
   80dc4:	e011      	b.n	80dea <print+0xa6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80dc6:	6839      	ldr	r1, [r7, #0]
   80dc8:	3704      	adds	r7, #4
   80dca:	2061      	movs	r0, #97	; 0x61
   80dcc:	9002      	str	r0, [sp, #8]
   80dce:	9301      	str	r3, [sp, #4]
   80dd0:	9200      	str	r2, [sp, #0]
   80dd2:	2300      	movs	r3, #0
   80dd4:	220a      	movs	r2, #10
   80dd6:	4640      	mov	r0, r8
   80dd8:	47c8      	blx	r9
   80dda:	4405      	add	r5, r0
				continue;
   80ddc:	e005      	b.n	80dea <print+0xa6>
			++format;
   80dde:	46a3      	mov	fp, r4
	(void) uart_putchar(c);  //Send characters to uart
   80de0:	f89b 0000 	ldrb.w	r0, [fp]
   80de4:	47b0      	blx	r6
			}
		}
		else {
		out:
			printchar (out, *format);
			++pc;
   80de6:	3501      	adds	r5, #1
   80de8:	465c      	mov	r4, fp
	for (; *format != 0; ++format) {
   80dea:	f104 0b01 	add.w	fp, r4, #1
   80dee:	7863      	ldrb	r3, [r4, #1]
   80df0:	2b00      	cmp	r3, #0
   80df2:	d044      	beq.n	80e7e <print+0x13a>
		if (*format == '%') {
   80df4:	2b25      	cmp	r3, #37	; 0x25
   80df6:	d1f3      	bne.n	80de0 <print+0x9c>
			++format;
   80df8:	f10b 0401 	add.w	r4, fp, #1
			if (*format == '\0') break;
   80dfc:	f89b 3001 	ldrb.w	r3, [fp, #1]
   80e00:	2b00      	cmp	r3, #0
   80e02:	d03c      	beq.n	80e7e <print+0x13a>
			if (*format == '%') goto out;
   80e04:	2b25      	cmp	r3, #37	; 0x25
   80e06:	d0ea      	beq.n	80dde <print+0x9a>
			if (*format == '-') {
   80e08:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
   80e0a:	bf06      	itte	eq
   80e0c:	f10b 0402 	addeq.w	r4, fp, #2
				pad = PAD_RIGHT;
   80e10:	2301      	moveq	r3, #1
			width = pad = 0;
   80e12:	2300      	movne	r3, #0
			while (*format == '0') {
   80e14:	7822      	ldrb	r2, [r4, #0]
   80e16:	2a30      	cmp	r2, #48	; 0x30
   80e18:	d105      	bne.n	80e26 <print+0xe2>
				pad |= PAD_ZERO;
   80e1a:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80e1e:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   80e22:	2a30      	cmp	r2, #48	; 0x30
   80e24:	d0f9      	beq.n	80e1a <print+0xd6>
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80e26:	7821      	ldrb	r1, [r4, #0]
   80e28:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80e2c:	b2d2      	uxtb	r2, r2
   80e2e:	2a09      	cmp	r2, #9
   80e30:	d899      	bhi.n	80d66 <print+0x22>
   80e32:	2200      	movs	r2, #0
				width *= 10;
   80e34:	eb02 0282 	add.w	r2, r2, r2, lsl #2
				width += *format - '0';
   80e38:	3930      	subs	r1, #48	; 0x30
   80e3a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80e3e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80e42:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80e46:	b2c0      	uxtb	r0, r0
   80e48:	2809      	cmp	r0, #9
   80e4a:	d9f3      	bls.n	80e34 <print+0xf0>
			if( *format == 's' ) {
   80e4c:	2973      	cmp	r1, #115	; 0x73
   80e4e:	d08c      	beq.n	80d6a <print+0x26>
			if( *format == 'd' ) {
   80e50:	2964      	cmp	r1, #100	; 0x64
   80e52:	d094      	beq.n	80d7e <print+0x3a>
			if( *format == 'x' ) {
   80e54:	2978      	cmp	r1, #120	; 0x78
   80e56:	d09e      	beq.n	80d96 <print+0x52>
			if( *format == 'X' ) {
   80e58:	2958      	cmp	r1, #88	; 0x58
   80e5a:	d0a8      	beq.n	80dae <print+0x6a>
			if( *format == 'u' ) {
   80e5c:	2975      	cmp	r1, #117	; 0x75
   80e5e:	d0b2      	beq.n	80dc6 <print+0x82>
			if( *format == 'c' ) {
   80e60:	2963      	cmp	r1, #99	; 0x63
   80e62:	d1c2      	bne.n	80dea <print+0xa6>
				scr[0] = (char)va_arg( args, int );
   80e64:	6839      	ldr	r1, [r7, #0]
   80e66:	3704      	adds	r7, #4
   80e68:	f88d 1014 	strb.w	r1, [sp, #20]
				scr[1] = '\0';
   80e6c:	2100      	movs	r1, #0
   80e6e:	f88d 1015 	strb.w	r1, [sp, #21]
				pc += prints (out, scr, width, pad);
   80e72:	a905      	add	r1, sp, #20
   80e74:	4640      	mov	r0, r8
   80e76:	47d0      	blx	sl
   80e78:	4405      	add	r5, r0
				continue;
   80e7a:	e7b6      	b.n	80dea <print+0xa6>
	register int pc = 0;
   80e7c:	2500      	movs	r5, #0
		}
	}
	if (out) **out = '\0';
   80e7e:	f1b8 0f00 	cmp.w	r8, #0
   80e82:	d003      	beq.n	80e8c <print+0x148>
   80e84:	f8d8 3000 	ldr.w	r3, [r8]
   80e88:	2200      	movs	r2, #0
   80e8a:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80e8c:	4628      	mov	r0, r5
   80e8e:	b007      	add	sp, #28
   80e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e94:	00080f31 	.word	0x00080f31
   80e98:	00081f54 	.word	0x00081f54
   80e9c:	00080bdd 	.word	0x00080bdd
   80ea0:	00080c89 	.word	0x00080c89

00080ea4 <printf>:

int printf(const char *format, ...)
{
   80ea4:	b40f      	push	{r0, r1, r2, r3}
   80ea6:	b500      	push	{lr}
   80ea8:	b083      	sub	sp, #12
   80eaa:	aa04      	add	r2, sp, #16
   80eac:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80eb0:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80eb2:	2000      	movs	r0, #0
   80eb4:	4b03      	ldr	r3, [pc, #12]	; (80ec4 <printf+0x20>)
   80eb6:	4798      	blx	r3
}
   80eb8:	b003      	add	sp, #12
   80eba:	f85d eb04 	ldr.w	lr, [sp], #4
   80ebe:	b004      	add	sp, #16
   80ec0:	4770      	bx	lr
   80ec2:	bf00      	nop
   80ec4:	00080d45 	.word	0x00080d45

00080ec8 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80ec8:	4b16      	ldr	r3, [pc, #88]	; (80f24 <configure_uart+0x5c>)
   80eca:	2200      	movs	r2, #0
   80ecc:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80ece:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80ed0:	4b15      	ldr	r3, [pc, #84]	; (80f28 <configure_uart+0x60>)
   80ed2:	f44f 7140 	mov.w	r1, #768	; 0x300
   80ed6:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80ed8:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80eda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80edc:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80ede:	4002      	ands	r2, r0
   80ee0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80ee4:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80ee6:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
   80eec:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80ef0:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80ef2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80ef6:	21ac      	movs	r1, #172	; 0xac
   80ef8:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80efa:	f240 2123 	movw	r1, #547	; 0x223
   80efe:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80f00:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80f04:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80f06:	f240 2102 	movw	r1, #514	; 0x202
   80f0a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80f0e:	f04f 31ff 	mov.w	r1, #4294967295
   80f12:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80f14:	21e1      	movs	r1, #225	; 0xe1
   80f16:	6099      	str	r1, [r3, #8]
   80f18:	4904      	ldr	r1, [pc, #16]	; (80f2c <configure_uart+0x64>)
   80f1a:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80f1c:	2250      	movs	r2, #80	; 0x50
   80f1e:	601a      	str	r2, [r3, #0]
   80f20:	4770      	bx	lr
   80f22:	bf00      	nop
   80f24:	20000490 	.word	0x20000490
   80f28:	400e0e00 	.word	0x400e0e00
   80f2c:	e000e100 	.word	0xe000e100

00080f30 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80f30:	4b07      	ldr	r3, [pc, #28]	; (80f50 <uart_putchar+0x20>)
   80f32:	695b      	ldr	r3, [r3, #20]
   80f34:	f013 0f02 	tst.w	r3, #2
   80f38:	d008      	beq.n	80f4c <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80f3a:	4b05      	ldr	r3, [pc, #20]	; (80f50 <uart_putchar+0x20>)
   80f3c:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80f3e:	461a      	mov	r2, r3
   80f40:	6953      	ldr	r3, [r2, #20]
   80f42:	f413 7f00 	tst.w	r3, #512	; 0x200
   80f46:	d0fb      	beq.n	80f40 <uart_putchar+0x10>
	return 0;
   80f48:	2000      	movs	r0, #0
   80f4a:	4770      	bx	lr
	return 1;
   80f4c:	2001      	movs	r0, #1
}
   80f4e:	4770      	bx	lr
   80f50:	400e0800 	.word	0x400e0800

00080f54 <UART_Handler>:

void UART_Handler(void)
{
   80f54:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80f56:	4b15      	ldr	r3, [pc, #84]	; (80fac <UART_Handler+0x58>)
   80f58:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80f5a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80f5e:	d003      	beq.n	80f68 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80f60:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80f64:	4a11      	ldr	r2, [pc, #68]	; (80fac <UART_Handler+0x58>)
   80f66:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80f68:	f013 0f01 	tst.w	r3, #1
   80f6c:	d012      	beq.n	80f94 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80f6e:	4810      	ldr	r0, [pc, #64]	; (80fb0 <UART_Handler+0x5c>)
   80f70:	7842      	ldrb	r2, [r0, #1]
   80f72:	1c53      	adds	r3, r2, #1
   80f74:	4259      	negs	r1, r3
   80f76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80f7a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80f7e:	bf58      	it	pl
   80f80:	424b      	negpl	r3, r1
   80f82:	7801      	ldrb	r1, [r0, #0]
   80f84:	428b      	cmp	r3, r1
   80f86:	d006      	beq.n	80f96 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80f88:	4908      	ldr	r1, [pc, #32]	; (80fac <UART_Handler+0x58>)
   80f8a:	6988      	ldr	r0, [r1, #24]
   80f8c:	4908      	ldr	r1, [pc, #32]	; (80fb0 <UART_Handler+0x5c>)
   80f8e:	440a      	add	r2, r1
   80f90:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80f92:	704b      	strb	r3, [r1, #1]
   80f94:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80f96:	4807      	ldr	r0, [pc, #28]	; (80fb4 <UART_Handler+0x60>)
   80f98:	4b07      	ldr	r3, [pc, #28]	; (80fb8 <UART_Handler+0x64>)
   80f9a:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80f9c:	4b03      	ldr	r3, [pc, #12]	; (80fac <UART_Handler+0x58>)
   80f9e:	699a      	ldr	r2, [r3, #24]
   80fa0:	4b03      	ldr	r3, [pc, #12]	; (80fb0 <UART_Handler+0x5c>)
   80fa2:	7859      	ldrb	r1, [r3, #1]
   80fa4:	440b      	add	r3, r1
   80fa6:	709a      	strb	r2, [r3, #2]
			return;
   80fa8:	bd08      	pop	{r3, pc}
   80faa:	bf00      	nop
   80fac:	400e0800 	.word	0x400e0800
   80fb0:	20000490 	.word	0x20000490
   80fb4:	00081f5c 	.word	0x00081f5c
   80fb8:	00080ea5 	.word	0x00080ea5

00080fbc <__aeabi_drsub>:
   80fbc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80fc0:	e002      	b.n	80fc8 <__adddf3>
   80fc2:	bf00      	nop

00080fc4 <__aeabi_dsub>:
   80fc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080fc8 <__adddf3>:
   80fc8:	b530      	push	{r4, r5, lr}
   80fca:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80fce:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80fd2:	ea94 0f05 	teq	r4, r5
   80fd6:	bf08      	it	eq
   80fd8:	ea90 0f02 	teqeq	r0, r2
   80fdc:	bf1f      	itttt	ne
   80fde:	ea54 0c00 	orrsne.w	ip, r4, r0
   80fe2:	ea55 0c02 	orrsne.w	ip, r5, r2
   80fe6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80fea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80fee:	f000 80e2 	beq.w	811b6 <__adddf3+0x1ee>
   80ff2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80ff6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80ffa:	bfb8      	it	lt
   80ffc:	426d      	neglt	r5, r5
   80ffe:	dd0c      	ble.n	8101a <__adddf3+0x52>
   81000:	442c      	add	r4, r5
   81002:	ea80 0202 	eor.w	r2, r0, r2
   81006:	ea81 0303 	eor.w	r3, r1, r3
   8100a:	ea82 0000 	eor.w	r0, r2, r0
   8100e:	ea83 0101 	eor.w	r1, r3, r1
   81012:	ea80 0202 	eor.w	r2, r0, r2
   81016:	ea81 0303 	eor.w	r3, r1, r3
   8101a:	2d36      	cmp	r5, #54	; 0x36
   8101c:	bf88      	it	hi
   8101e:	bd30      	pophi	{r4, r5, pc}
   81020:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81024:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81028:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8102c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   81030:	d002      	beq.n	81038 <__adddf3+0x70>
   81032:	4240      	negs	r0, r0
   81034:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81038:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8103c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81040:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   81044:	d002      	beq.n	8104c <__adddf3+0x84>
   81046:	4252      	negs	r2, r2
   81048:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8104c:	ea94 0f05 	teq	r4, r5
   81050:	f000 80a7 	beq.w	811a2 <__adddf3+0x1da>
   81054:	f1a4 0401 	sub.w	r4, r4, #1
   81058:	f1d5 0e20 	rsbs	lr, r5, #32
   8105c:	db0d      	blt.n	8107a <__adddf3+0xb2>
   8105e:	fa02 fc0e 	lsl.w	ip, r2, lr
   81062:	fa22 f205 	lsr.w	r2, r2, r5
   81066:	1880      	adds	r0, r0, r2
   81068:	f141 0100 	adc.w	r1, r1, #0
   8106c:	fa03 f20e 	lsl.w	r2, r3, lr
   81070:	1880      	adds	r0, r0, r2
   81072:	fa43 f305 	asr.w	r3, r3, r5
   81076:	4159      	adcs	r1, r3
   81078:	e00e      	b.n	81098 <__adddf3+0xd0>
   8107a:	f1a5 0520 	sub.w	r5, r5, #32
   8107e:	f10e 0e20 	add.w	lr, lr, #32
   81082:	2a01      	cmp	r2, #1
   81084:	fa03 fc0e 	lsl.w	ip, r3, lr
   81088:	bf28      	it	cs
   8108a:	f04c 0c02 	orrcs.w	ip, ip, #2
   8108e:	fa43 f305 	asr.w	r3, r3, r5
   81092:	18c0      	adds	r0, r0, r3
   81094:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   81098:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8109c:	d507      	bpl.n	810ae <__adddf3+0xe6>
   8109e:	f04f 0e00 	mov.w	lr, #0
   810a2:	f1dc 0c00 	rsbs	ip, ip, #0
   810a6:	eb7e 0000 	sbcs.w	r0, lr, r0
   810aa:	eb6e 0101 	sbc.w	r1, lr, r1
   810ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   810b2:	d31b      	bcc.n	810ec <__adddf3+0x124>
   810b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   810b8:	d30c      	bcc.n	810d4 <__adddf3+0x10c>
   810ba:	0849      	lsrs	r1, r1, #1
   810bc:	ea5f 0030 	movs.w	r0, r0, rrx
   810c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   810c4:	f104 0401 	add.w	r4, r4, #1
   810c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   810cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   810d0:	f080 809a 	bcs.w	81208 <__adddf3+0x240>
   810d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   810d8:	bf08      	it	eq
   810da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   810de:	f150 0000 	adcs.w	r0, r0, #0
   810e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   810e6:	ea41 0105 	orr.w	r1, r1, r5
   810ea:	bd30      	pop	{r4, r5, pc}
   810ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   810f0:	4140      	adcs	r0, r0
   810f2:	eb41 0101 	adc.w	r1, r1, r1
   810f6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   810fa:	f1a4 0401 	sub.w	r4, r4, #1
   810fe:	d1e9      	bne.n	810d4 <__adddf3+0x10c>
   81100:	f091 0f00 	teq	r1, #0
   81104:	bf04      	itt	eq
   81106:	4601      	moveq	r1, r0
   81108:	2000      	moveq	r0, #0
   8110a:	fab1 f381 	clz	r3, r1
   8110e:	bf08      	it	eq
   81110:	3320      	addeq	r3, #32
   81112:	f1a3 030b 	sub.w	r3, r3, #11
   81116:	f1b3 0220 	subs.w	r2, r3, #32
   8111a:	da0c      	bge.n	81136 <__adddf3+0x16e>
   8111c:	320c      	adds	r2, #12
   8111e:	dd08      	ble.n	81132 <__adddf3+0x16a>
   81120:	f102 0c14 	add.w	ip, r2, #20
   81124:	f1c2 020c 	rsb	r2, r2, #12
   81128:	fa01 f00c 	lsl.w	r0, r1, ip
   8112c:	fa21 f102 	lsr.w	r1, r1, r2
   81130:	e00c      	b.n	8114c <__adddf3+0x184>
   81132:	f102 0214 	add.w	r2, r2, #20
   81136:	bfd8      	it	le
   81138:	f1c2 0c20 	rsble	ip, r2, #32
   8113c:	fa01 f102 	lsl.w	r1, r1, r2
   81140:	fa20 fc0c 	lsr.w	ip, r0, ip
   81144:	bfdc      	itt	le
   81146:	ea41 010c 	orrle.w	r1, r1, ip
   8114a:	4090      	lslle	r0, r2
   8114c:	1ae4      	subs	r4, r4, r3
   8114e:	bfa2      	ittt	ge
   81150:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   81154:	4329      	orrge	r1, r5
   81156:	bd30      	popge	{r4, r5, pc}
   81158:	ea6f 0404 	mvn.w	r4, r4
   8115c:	3c1f      	subs	r4, #31
   8115e:	da1c      	bge.n	8119a <__adddf3+0x1d2>
   81160:	340c      	adds	r4, #12
   81162:	dc0e      	bgt.n	81182 <__adddf3+0x1ba>
   81164:	f104 0414 	add.w	r4, r4, #20
   81168:	f1c4 0220 	rsb	r2, r4, #32
   8116c:	fa20 f004 	lsr.w	r0, r0, r4
   81170:	fa01 f302 	lsl.w	r3, r1, r2
   81174:	ea40 0003 	orr.w	r0, r0, r3
   81178:	fa21 f304 	lsr.w	r3, r1, r4
   8117c:	ea45 0103 	orr.w	r1, r5, r3
   81180:	bd30      	pop	{r4, r5, pc}
   81182:	f1c4 040c 	rsb	r4, r4, #12
   81186:	f1c4 0220 	rsb	r2, r4, #32
   8118a:	fa20 f002 	lsr.w	r0, r0, r2
   8118e:	fa01 f304 	lsl.w	r3, r1, r4
   81192:	ea40 0003 	orr.w	r0, r0, r3
   81196:	4629      	mov	r1, r5
   81198:	bd30      	pop	{r4, r5, pc}
   8119a:	fa21 f004 	lsr.w	r0, r1, r4
   8119e:	4629      	mov	r1, r5
   811a0:	bd30      	pop	{r4, r5, pc}
   811a2:	f094 0f00 	teq	r4, #0
   811a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   811aa:	bf06      	itte	eq
   811ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   811b0:	3401      	addeq	r4, #1
   811b2:	3d01      	subne	r5, #1
   811b4:	e74e      	b.n	81054 <__adddf3+0x8c>
   811b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   811ba:	bf18      	it	ne
   811bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   811c0:	d029      	beq.n	81216 <__adddf3+0x24e>
   811c2:	ea94 0f05 	teq	r4, r5
   811c6:	bf08      	it	eq
   811c8:	ea90 0f02 	teqeq	r0, r2
   811cc:	d005      	beq.n	811da <__adddf3+0x212>
   811ce:	ea54 0c00 	orrs.w	ip, r4, r0
   811d2:	bf04      	itt	eq
   811d4:	4619      	moveq	r1, r3
   811d6:	4610      	moveq	r0, r2
   811d8:	bd30      	pop	{r4, r5, pc}
   811da:	ea91 0f03 	teq	r1, r3
   811de:	bf1e      	ittt	ne
   811e0:	2100      	movne	r1, #0
   811e2:	2000      	movne	r0, #0
   811e4:	bd30      	popne	{r4, r5, pc}
   811e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   811ea:	d105      	bne.n	811f8 <__adddf3+0x230>
   811ec:	0040      	lsls	r0, r0, #1
   811ee:	4149      	adcs	r1, r1
   811f0:	bf28      	it	cs
   811f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   811f6:	bd30      	pop	{r4, r5, pc}
   811f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   811fc:	bf3c      	itt	cc
   811fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   81202:	bd30      	popcc	{r4, r5, pc}
   81204:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81208:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8120c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81210:	f04f 0000 	mov.w	r0, #0
   81214:	bd30      	pop	{r4, r5, pc}
   81216:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8121a:	bf1a      	itte	ne
   8121c:	4619      	movne	r1, r3
   8121e:	4610      	movne	r0, r2
   81220:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   81224:	bf1c      	itt	ne
   81226:	460b      	movne	r3, r1
   81228:	4602      	movne	r2, r0
   8122a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8122e:	bf06      	itte	eq
   81230:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   81234:	ea91 0f03 	teqeq	r1, r3
   81238:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8123c:	bd30      	pop	{r4, r5, pc}
   8123e:	bf00      	nop

00081240 <__aeabi_ui2d>:
   81240:	f090 0f00 	teq	r0, #0
   81244:	bf04      	itt	eq
   81246:	2100      	moveq	r1, #0
   81248:	4770      	bxeq	lr
   8124a:	b530      	push	{r4, r5, lr}
   8124c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81250:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81254:	f04f 0500 	mov.w	r5, #0
   81258:	f04f 0100 	mov.w	r1, #0
   8125c:	e750      	b.n	81100 <__adddf3+0x138>
   8125e:	bf00      	nop

00081260 <__aeabi_i2d>:
   81260:	f090 0f00 	teq	r0, #0
   81264:	bf04      	itt	eq
   81266:	2100      	moveq	r1, #0
   81268:	4770      	bxeq	lr
   8126a:	b530      	push	{r4, r5, lr}
   8126c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81270:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81274:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81278:	bf48      	it	mi
   8127a:	4240      	negmi	r0, r0
   8127c:	f04f 0100 	mov.w	r1, #0
   81280:	e73e      	b.n	81100 <__adddf3+0x138>
   81282:	bf00      	nop

00081284 <__aeabi_f2d>:
   81284:	0042      	lsls	r2, r0, #1
   81286:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8128a:	ea4f 0131 	mov.w	r1, r1, rrx
   8128e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81292:	bf1f      	itttt	ne
   81294:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81298:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8129c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   812a0:	4770      	bxne	lr
   812a2:	f092 0f00 	teq	r2, #0
   812a6:	bf14      	ite	ne
   812a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   812ac:	4770      	bxeq	lr
   812ae:	b530      	push	{r4, r5, lr}
   812b0:	f44f 7460 	mov.w	r4, #896	; 0x380
   812b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   812b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   812bc:	e720      	b.n	81100 <__adddf3+0x138>
   812be:	bf00      	nop

000812c0 <__aeabi_ul2d>:
   812c0:	ea50 0201 	orrs.w	r2, r0, r1
   812c4:	bf08      	it	eq
   812c6:	4770      	bxeq	lr
   812c8:	b530      	push	{r4, r5, lr}
   812ca:	f04f 0500 	mov.w	r5, #0
   812ce:	e00a      	b.n	812e6 <__aeabi_l2d+0x16>

000812d0 <__aeabi_l2d>:
   812d0:	ea50 0201 	orrs.w	r2, r0, r1
   812d4:	bf08      	it	eq
   812d6:	4770      	bxeq	lr
   812d8:	b530      	push	{r4, r5, lr}
   812da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   812de:	d502      	bpl.n	812e6 <__aeabi_l2d+0x16>
   812e0:	4240      	negs	r0, r0
   812e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   812e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   812ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
   812ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   812f2:	f43f aedc 	beq.w	810ae <__adddf3+0xe6>
   812f6:	f04f 0203 	mov.w	r2, #3
   812fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   812fe:	bf18      	it	ne
   81300:	3203      	addne	r2, #3
   81302:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81306:	bf18      	it	ne
   81308:	3203      	addne	r2, #3
   8130a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8130e:	f1c2 0320 	rsb	r3, r2, #32
   81312:	fa00 fc03 	lsl.w	ip, r0, r3
   81316:	fa20 f002 	lsr.w	r0, r0, r2
   8131a:	fa01 fe03 	lsl.w	lr, r1, r3
   8131e:	ea40 000e 	orr.w	r0, r0, lr
   81322:	fa21 f102 	lsr.w	r1, r1, r2
   81326:	4414      	add	r4, r2
   81328:	e6c1      	b.n	810ae <__adddf3+0xe6>
   8132a:	bf00      	nop

0008132c <__aeabi_dmul>:
   8132c:	b570      	push	{r4, r5, r6, lr}
   8132e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81332:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81336:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8133a:	bf1d      	ittte	ne
   8133c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81340:	ea94 0f0c 	teqne	r4, ip
   81344:	ea95 0f0c 	teqne	r5, ip
   81348:	f000 f8de 	bleq	81508 <__aeabi_dmul+0x1dc>
   8134c:	442c      	add	r4, r5
   8134e:	ea81 0603 	eor.w	r6, r1, r3
   81352:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   81356:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8135a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8135e:	bf18      	it	ne
   81360:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81368:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8136c:	d038      	beq.n	813e0 <__aeabi_dmul+0xb4>
   8136e:	fba0 ce02 	umull	ip, lr, r0, r2
   81372:	f04f 0500 	mov.w	r5, #0
   81376:	fbe1 e502 	umlal	lr, r5, r1, r2
   8137a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8137e:	fbe0 e503 	umlal	lr, r5, r0, r3
   81382:	f04f 0600 	mov.w	r6, #0
   81386:	fbe1 5603 	umlal	r5, r6, r1, r3
   8138a:	f09c 0f00 	teq	ip, #0
   8138e:	bf18      	it	ne
   81390:	f04e 0e01 	orrne.w	lr, lr, #1
   81394:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81398:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8139c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   813a0:	d204      	bcs.n	813ac <__aeabi_dmul+0x80>
   813a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   813a6:	416d      	adcs	r5, r5
   813a8:	eb46 0606 	adc.w	r6, r6, r6
   813ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   813b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   813b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   813b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   813bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   813c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   813c4:	bf88      	it	hi
   813c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   813ca:	d81e      	bhi.n	8140a <__aeabi_dmul+0xde>
   813cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   813d0:	bf08      	it	eq
   813d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   813d6:	f150 0000 	adcs.w	r0, r0, #0
   813da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   813de:	bd70      	pop	{r4, r5, r6, pc}
   813e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   813e4:	ea46 0101 	orr.w	r1, r6, r1
   813e8:	ea40 0002 	orr.w	r0, r0, r2
   813ec:	ea81 0103 	eor.w	r1, r1, r3
   813f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   813f4:	bfc2      	ittt	gt
   813f6:	ebd4 050c 	rsbsgt	r5, r4, ip
   813fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   813fe:	bd70      	popgt	{r4, r5, r6, pc}
   81400:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81404:	f04f 0e00 	mov.w	lr, #0
   81408:	3c01      	subs	r4, #1
   8140a:	f300 80ab 	bgt.w	81564 <__aeabi_dmul+0x238>
   8140e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   81412:	bfde      	ittt	le
   81414:	2000      	movle	r0, #0
   81416:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8141a:	bd70      	pople	{r4, r5, r6, pc}
   8141c:	f1c4 0400 	rsb	r4, r4, #0
   81420:	3c20      	subs	r4, #32
   81422:	da35      	bge.n	81490 <__aeabi_dmul+0x164>
   81424:	340c      	adds	r4, #12
   81426:	dc1b      	bgt.n	81460 <__aeabi_dmul+0x134>
   81428:	f104 0414 	add.w	r4, r4, #20
   8142c:	f1c4 0520 	rsb	r5, r4, #32
   81430:	fa00 f305 	lsl.w	r3, r0, r5
   81434:	fa20 f004 	lsr.w	r0, r0, r4
   81438:	fa01 f205 	lsl.w	r2, r1, r5
   8143c:	ea40 0002 	orr.w	r0, r0, r2
   81440:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   81444:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81448:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8144c:	fa21 f604 	lsr.w	r6, r1, r4
   81450:	eb42 0106 	adc.w	r1, r2, r6
   81454:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81458:	bf08      	it	eq
   8145a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8145e:	bd70      	pop	{r4, r5, r6, pc}
   81460:	f1c4 040c 	rsb	r4, r4, #12
   81464:	f1c4 0520 	rsb	r5, r4, #32
   81468:	fa00 f304 	lsl.w	r3, r0, r4
   8146c:	fa20 f005 	lsr.w	r0, r0, r5
   81470:	fa01 f204 	lsl.w	r2, r1, r4
   81474:	ea40 0002 	orr.w	r0, r0, r2
   81478:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8147c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81480:	f141 0100 	adc.w	r1, r1, #0
   81484:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81488:	bf08      	it	eq
   8148a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8148e:	bd70      	pop	{r4, r5, r6, pc}
   81490:	f1c4 0520 	rsb	r5, r4, #32
   81494:	fa00 f205 	lsl.w	r2, r0, r5
   81498:	ea4e 0e02 	orr.w	lr, lr, r2
   8149c:	fa20 f304 	lsr.w	r3, r0, r4
   814a0:	fa01 f205 	lsl.w	r2, r1, r5
   814a4:	ea43 0302 	orr.w	r3, r3, r2
   814a8:	fa21 f004 	lsr.w	r0, r1, r4
   814ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   814b0:	fa21 f204 	lsr.w	r2, r1, r4
   814b4:	ea20 0002 	bic.w	r0, r0, r2
   814b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   814bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   814c0:	bf08      	it	eq
   814c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   814c6:	bd70      	pop	{r4, r5, r6, pc}
   814c8:	f094 0f00 	teq	r4, #0
   814cc:	d10f      	bne.n	814ee <__aeabi_dmul+0x1c2>
   814ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   814d2:	0040      	lsls	r0, r0, #1
   814d4:	eb41 0101 	adc.w	r1, r1, r1
   814d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   814dc:	bf08      	it	eq
   814de:	3c01      	subeq	r4, #1
   814e0:	d0f7      	beq.n	814d2 <__aeabi_dmul+0x1a6>
   814e2:	ea41 0106 	orr.w	r1, r1, r6
   814e6:	f095 0f00 	teq	r5, #0
   814ea:	bf18      	it	ne
   814ec:	4770      	bxne	lr
   814ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   814f2:	0052      	lsls	r2, r2, #1
   814f4:	eb43 0303 	adc.w	r3, r3, r3
   814f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   814fc:	bf08      	it	eq
   814fe:	3d01      	subeq	r5, #1
   81500:	d0f7      	beq.n	814f2 <__aeabi_dmul+0x1c6>
   81502:	ea43 0306 	orr.w	r3, r3, r6
   81506:	4770      	bx	lr
   81508:	ea94 0f0c 	teq	r4, ip
   8150c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81510:	bf18      	it	ne
   81512:	ea95 0f0c 	teqne	r5, ip
   81516:	d00c      	beq.n	81532 <__aeabi_dmul+0x206>
   81518:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8151c:	bf18      	it	ne
   8151e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81522:	d1d1      	bne.n	814c8 <__aeabi_dmul+0x19c>
   81524:	ea81 0103 	eor.w	r1, r1, r3
   81528:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8152c:	f04f 0000 	mov.w	r0, #0
   81530:	bd70      	pop	{r4, r5, r6, pc}
   81532:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81536:	bf06      	itte	eq
   81538:	4610      	moveq	r0, r2
   8153a:	4619      	moveq	r1, r3
   8153c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81540:	d019      	beq.n	81576 <__aeabi_dmul+0x24a>
   81542:	ea94 0f0c 	teq	r4, ip
   81546:	d102      	bne.n	8154e <__aeabi_dmul+0x222>
   81548:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8154c:	d113      	bne.n	81576 <__aeabi_dmul+0x24a>
   8154e:	ea95 0f0c 	teq	r5, ip
   81552:	d105      	bne.n	81560 <__aeabi_dmul+0x234>
   81554:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81558:	bf1c      	itt	ne
   8155a:	4610      	movne	r0, r2
   8155c:	4619      	movne	r1, r3
   8155e:	d10a      	bne.n	81576 <__aeabi_dmul+0x24a>
   81560:	ea81 0103 	eor.w	r1, r1, r3
   81564:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81568:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8156c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81570:	f04f 0000 	mov.w	r0, #0
   81574:	bd70      	pop	{r4, r5, r6, pc}
   81576:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8157a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8157e:	bd70      	pop	{r4, r5, r6, pc}

00081580 <__aeabi_ddiv>:
   81580:	b570      	push	{r4, r5, r6, lr}
   81582:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8158a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8158e:	bf1d      	ittte	ne
   81590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81594:	ea94 0f0c 	teqne	r4, ip
   81598:	ea95 0f0c 	teqne	r5, ip
   8159c:	f000 f8a7 	bleq	816ee <__aeabi_ddiv+0x16e>
   815a0:	eba4 0405 	sub.w	r4, r4, r5
   815a4:	ea81 0e03 	eor.w	lr, r1, r3
   815a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   815ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   815b0:	f000 8088 	beq.w	816c4 <__aeabi_ddiv+0x144>
   815b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   815b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   815bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   815c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   815c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   815c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   815cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   815d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   815d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   815d8:	429d      	cmp	r5, r3
   815da:	bf08      	it	eq
   815dc:	4296      	cmpeq	r6, r2
   815de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   815e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   815e6:	d202      	bcs.n	815ee <__aeabi_ddiv+0x6e>
   815e8:	085b      	lsrs	r3, r3, #1
   815ea:	ea4f 0232 	mov.w	r2, r2, rrx
   815ee:	1ab6      	subs	r6, r6, r2
   815f0:	eb65 0503 	sbc.w	r5, r5, r3
   815f4:	085b      	lsrs	r3, r3, #1
   815f6:	ea4f 0232 	mov.w	r2, r2, rrx
   815fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   815fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   81602:	ebb6 0e02 	subs.w	lr, r6, r2
   81606:	eb75 0e03 	sbcs.w	lr, r5, r3
   8160a:	bf22      	ittt	cs
   8160c:	1ab6      	subcs	r6, r6, r2
   8160e:	4675      	movcs	r5, lr
   81610:	ea40 000c 	orrcs.w	r0, r0, ip
   81614:	085b      	lsrs	r3, r3, #1
   81616:	ea4f 0232 	mov.w	r2, r2, rrx
   8161a:	ebb6 0e02 	subs.w	lr, r6, r2
   8161e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81622:	bf22      	ittt	cs
   81624:	1ab6      	subcs	r6, r6, r2
   81626:	4675      	movcs	r5, lr
   81628:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8162c:	085b      	lsrs	r3, r3, #1
   8162e:	ea4f 0232 	mov.w	r2, r2, rrx
   81632:	ebb6 0e02 	subs.w	lr, r6, r2
   81636:	eb75 0e03 	sbcs.w	lr, r5, r3
   8163a:	bf22      	ittt	cs
   8163c:	1ab6      	subcs	r6, r6, r2
   8163e:	4675      	movcs	r5, lr
   81640:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81644:	085b      	lsrs	r3, r3, #1
   81646:	ea4f 0232 	mov.w	r2, r2, rrx
   8164a:	ebb6 0e02 	subs.w	lr, r6, r2
   8164e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81652:	bf22      	ittt	cs
   81654:	1ab6      	subcs	r6, r6, r2
   81656:	4675      	movcs	r5, lr
   81658:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8165c:	ea55 0e06 	orrs.w	lr, r5, r6
   81660:	d018      	beq.n	81694 <__aeabi_ddiv+0x114>
   81662:	ea4f 1505 	mov.w	r5, r5, lsl #4
   81666:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8166a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8166e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   81672:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   81676:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8167a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8167e:	d1c0      	bne.n	81602 <__aeabi_ddiv+0x82>
   81680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81684:	d10b      	bne.n	8169e <__aeabi_ddiv+0x11e>
   81686:	ea41 0100 	orr.w	r1, r1, r0
   8168a:	f04f 0000 	mov.w	r0, #0
   8168e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   81692:	e7b6      	b.n	81602 <__aeabi_ddiv+0x82>
   81694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81698:	bf04      	itt	eq
   8169a:	4301      	orreq	r1, r0
   8169c:	2000      	moveq	r0, #0
   8169e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   816a2:	bf88      	it	hi
   816a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   816a8:	f63f aeaf 	bhi.w	8140a <__aeabi_dmul+0xde>
   816ac:	ebb5 0c03 	subs.w	ip, r5, r3
   816b0:	bf04      	itt	eq
   816b2:	ebb6 0c02 	subseq.w	ip, r6, r2
   816b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   816ba:	f150 0000 	adcs.w	r0, r0, #0
   816be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   816c2:	bd70      	pop	{r4, r5, r6, pc}
   816c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   816c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   816cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   816d0:	bfc2      	ittt	gt
   816d2:	ebd4 050c 	rsbsgt	r5, r4, ip
   816d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   816da:	bd70      	popgt	{r4, r5, r6, pc}
   816dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   816e0:	f04f 0e00 	mov.w	lr, #0
   816e4:	3c01      	subs	r4, #1
   816e6:	e690      	b.n	8140a <__aeabi_dmul+0xde>
   816e8:	ea45 0e06 	orr.w	lr, r5, r6
   816ec:	e68d      	b.n	8140a <__aeabi_dmul+0xde>
   816ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   816f2:	ea94 0f0c 	teq	r4, ip
   816f6:	bf08      	it	eq
   816f8:	ea95 0f0c 	teqeq	r5, ip
   816fc:	f43f af3b 	beq.w	81576 <__aeabi_dmul+0x24a>
   81700:	ea94 0f0c 	teq	r4, ip
   81704:	d10a      	bne.n	8171c <__aeabi_ddiv+0x19c>
   81706:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8170a:	f47f af34 	bne.w	81576 <__aeabi_dmul+0x24a>
   8170e:	ea95 0f0c 	teq	r5, ip
   81712:	f47f af25 	bne.w	81560 <__aeabi_dmul+0x234>
   81716:	4610      	mov	r0, r2
   81718:	4619      	mov	r1, r3
   8171a:	e72c      	b.n	81576 <__aeabi_dmul+0x24a>
   8171c:	ea95 0f0c 	teq	r5, ip
   81720:	d106      	bne.n	81730 <__aeabi_ddiv+0x1b0>
   81722:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81726:	f43f aefd 	beq.w	81524 <__aeabi_dmul+0x1f8>
   8172a:	4610      	mov	r0, r2
   8172c:	4619      	mov	r1, r3
   8172e:	e722      	b.n	81576 <__aeabi_dmul+0x24a>
   81730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81734:	bf18      	it	ne
   81736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8173a:	f47f aec5 	bne.w	814c8 <__aeabi_dmul+0x19c>
   8173e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   81742:	f47f af0d 	bne.w	81560 <__aeabi_dmul+0x234>
   81746:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8174a:	f47f aeeb 	bne.w	81524 <__aeabi_dmul+0x1f8>
   8174e:	e712      	b.n	81576 <__aeabi_dmul+0x24a>

00081750 <__aeabi_d2uiz>:
   81750:	004a      	lsls	r2, r1, #1
   81752:	d211      	bcs.n	81778 <__aeabi_d2uiz+0x28>
   81754:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81758:	d211      	bcs.n	8177e <__aeabi_d2uiz+0x2e>
   8175a:	d50d      	bpl.n	81778 <__aeabi_d2uiz+0x28>
   8175c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81760:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81764:	d40e      	bmi.n	81784 <__aeabi_d2uiz+0x34>
   81766:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8176a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8176e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   81772:	fa23 f002 	lsr.w	r0, r3, r2
   81776:	4770      	bx	lr
   81778:	f04f 0000 	mov.w	r0, #0
   8177c:	4770      	bx	lr
   8177e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   81782:	d102      	bne.n	8178a <__aeabi_d2uiz+0x3a>
   81784:	f04f 30ff 	mov.w	r0, #4294967295
   81788:	4770      	bx	lr
   8178a:	f04f 0000 	mov.w	r0, #0
   8178e:	4770      	bx	lr

00081790 <__aeabi_frsub>:
   81790:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   81794:	e002      	b.n	8179c <__addsf3>
   81796:	bf00      	nop

00081798 <__aeabi_fsub>:
   81798:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0008179c <__addsf3>:
   8179c:	0042      	lsls	r2, r0, #1
   8179e:	bf1f      	itttt	ne
   817a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   817a4:	ea92 0f03 	teqne	r2, r3
   817a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   817ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   817b0:	d06a      	beq.n	81888 <__addsf3+0xec>
   817b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
   817b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   817ba:	bfc1      	itttt	gt
   817bc:	18d2      	addgt	r2, r2, r3
   817be:	4041      	eorgt	r1, r0
   817c0:	4048      	eorgt	r0, r1
   817c2:	4041      	eorgt	r1, r0
   817c4:	bfb8      	it	lt
   817c6:	425b      	neglt	r3, r3
   817c8:	2b19      	cmp	r3, #25
   817ca:	bf88      	it	hi
   817cc:	4770      	bxhi	lr
   817ce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   817d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   817d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   817da:	bf18      	it	ne
   817dc:	4240      	negne	r0, r0
   817de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   817e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   817e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   817ea:	bf18      	it	ne
   817ec:	4249      	negne	r1, r1
   817ee:	ea92 0f03 	teq	r2, r3
   817f2:	d03f      	beq.n	81874 <__addsf3+0xd8>
   817f4:	f1a2 0201 	sub.w	r2, r2, #1
   817f8:	fa41 fc03 	asr.w	ip, r1, r3
   817fc:	eb10 000c 	adds.w	r0, r0, ip
   81800:	f1c3 0320 	rsb	r3, r3, #32
   81804:	fa01 f103 	lsl.w	r1, r1, r3
   81808:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   8180c:	d502      	bpl.n	81814 <__addsf3+0x78>
   8180e:	4249      	negs	r1, r1
   81810:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   81814:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   81818:	d313      	bcc.n	81842 <__addsf3+0xa6>
   8181a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   8181e:	d306      	bcc.n	8182e <__addsf3+0x92>
   81820:	0840      	lsrs	r0, r0, #1
   81822:	ea4f 0131 	mov.w	r1, r1, rrx
   81826:	f102 0201 	add.w	r2, r2, #1
   8182a:	2afe      	cmp	r2, #254	; 0xfe
   8182c:	d251      	bcs.n	818d2 <__addsf3+0x136>
   8182e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   81832:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81836:	bf08      	it	eq
   81838:	f020 0001 	biceq.w	r0, r0, #1
   8183c:	ea40 0003 	orr.w	r0, r0, r3
   81840:	4770      	bx	lr
   81842:	0049      	lsls	r1, r1, #1
   81844:	eb40 0000 	adc.w	r0, r0, r0
   81848:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   8184c:	f1a2 0201 	sub.w	r2, r2, #1
   81850:	d1ed      	bne.n	8182e <__addsf3+0x92>
   81852:	fab0 fc80 	clz	ip, r0
   81856:	f1ac 0c08 	sub.w	ip, ip, #8
   8185a:	ebb2 020c 	subs.w	r2, r2, ip
   8185e:	fa00 f00c 	lsl.w	r0, r0, ip
   81862:	bfaa      	itet	ge
   81864:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   81868:	4252      	neglt	r2, r2
   8186a:	4318      	orrge	r0, r3
   8186c:	bfbc      	itt	lt
   8186e:	40d0      	lsrlt	r0, r2
   81870:	4318      	orrlt	r0, r3
   81872:	4770      	bx	lr
   81874:	f092 0f00 	teq	r2, #0
   81878:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   8187c:	bf06      	itte	eq
   8187e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   81882:	3201      	addeq	r2, #1
   81884:	3b01      	subne	r3, #1
   81886:	e7b5      	b.n	817f4 <__addsf3+0x58>
   81888:	ea4f 0341 	mov.w	r3, r1, lsl #1
   8188c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81890:	bf18      	it	ne
   81892:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81896:	d021      	beq.n	818dc <__addsf3+0x140>
   81898:	ea92 0f03 	teq	r2, r3
   8189c:	d004      	beq.n	818a8 <__addsf3+0x10c>
   8189e:	f092 0f00 	teq	r2, #0
   818a2:	bf08      	it	eq
   818a4:	4608      	moveq	r0, r1
   818a6:	4770      	bx	lr
   818a8:	ea90 0f01 	teq	r0, r1
   818ac:	bf1c      	itt	ne
   818ae:	2000      	movne	r0, #0
   818b0:	4770      	bxne	lr
   818b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   818b6:	d104      	bne.n	818c2 <__addsf3+0x126>
   818b8:	0040      	lsls	r0, r0, #1
   818ba:	bf28      	it	cs
   818bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   818c0:	4770      	bx	lr
   818c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   818c6:	bf3c      	itt	cc
   818c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   818cc:	4770      	bxcc	lr
   818ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   818d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   818d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   818da:	4770      	bx	lr
   818dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
   818e0:	bf16      	itet	ne
   818e2:	4608      	movne	r0, r1
   818e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   818e8:	4601      	movne	r1, r0
   818ea:	0242      	lsls	r2, r0, #9
   818ec:	bf06      	itte	eq
   818ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   818f2:	ea90 0f01 	teqeq	r0, r1
   818f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   818fa:	4770      	bx	lr

000818fc <__aeabi_ui2f>:
   818fc:	f04f 0300 	mov.w	r3, #0
   81900:	e004      	b.n	8190c <__aeabi_i2f+0x8>
   81902:	bf00      	nop

00081904 <__aeabi_i2f>:
   81904:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   81908:	bf48      	it	mi
   8190a:	4240      	negmi	r0, r0
   8190c:	ea5f 0c00 	movs.w	ip, r0
   81910:	bf08      	it	eq
   81912:	4770      	bxeq	lr
   81914:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   81918:	4601      	mov	r1, r0
   8191a:	f04f 0000 	mov.w	r0, #0
   8191e:	e01c      	b.n	8195a <__aeabi_l2f+0x2a>

00081920 <__aeabi_ul2f>:
   81920:	ea50 0201 	orrs.w	r2, r0, r1
   81924:	bf08      	it	eq
   81926:	4770      	bxeq	lr
   81928:	f04f 0300 	mov.w	r3, #0
   8192c:	e00a      	b.n	81944 <__aeabi_l2f+0x14>
   8192e:	bf00      	nop

00081930 <__aeabi_l2f>:
   81930:	ea50 0201 	orrs.w	r2, r0, r1
   81934:	bf08      	it	eq
   81936:	4770      	bxeq	lr
   81938:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   8193c:	d502      	bpl.n	81944 <__aeabi_l2f+0x14>
   8193e:	4240      	negs	r0, r0
   81940:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81944:	ea5f 0c01 	movs.w	ip, r1
   81948:	bf02      	ittt	eq
   8194a:	4684      	moveq	ip, r0
   8194c:	4601      	moveq	r1, r0
   8194e:	2000      	moveq	r0, #0
   81950:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   81954:	bf08      	it	eq
   81956:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   8195a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   8195e:	fabc f28c 	clz	r2, ip
   81962:	3a08      	subs	r2, #8
   81964:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   81968:	db10      	blt.n	8198c <__aeabi_l2f+0x5c>
   8196a:	fa01 fc02 	lsl.w	ip, r1, r2
   8196e:	4463      	add	r3, ip
   81970:	fa00 fc02 	lsl.w	ip, r0, r2
   81974:	f1c2 0220 	rsb	r2, r2, #32
   81978:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8197c:	fa20 f202 	lsr.w	r2, r0, r2
   81980:	eb43 0002 	adc.w	r0, r3, r2
   81984:	bf08      	it	eq
   81986:	f020 0001 	biceq.w	r0, r0, #1
   8198a:	4770      	bx	lr
   8198c:	f102 0220 	add.w	r2, r2, #32
   81990:	fa01 fc02 	lsl.w	ip, r1, r2
   81994:	f1c2 0220 	rsb	r2, r2, #32
   81998:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   8199c:	fa21 f202 	lsr.w	r2, r1, r2
   819a0:	eb43 0002 	adc.w	r0, r3, r2
   819a4:	bf08      	it	eq
   819a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   819aa:	4770      	bx	lr

000819ac <__aeabi_fmul>:
   819ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
   819b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   819b4:	bf1e      	ittt	ne
   819b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   819ba:	ea92 0f0c 	teqne	r2, ip
   819be:	ea93 0f0c 	teqne	r3, ip
   819c2:	d06f      	beq.n	81aa4 <__aeabi_fmul+0xf8>
   819c4:	441a      	add	r2, r3
   819c6:	ea80 0c01 	eor.w	ip, r0, r1
   819ca:	0240      	lsls	r0, r0, #9
   819cc:	bf18      	it	ne
   819ce:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   819d2:	d01e      	beq.n	81a12 <__aeabi_fmul+0x66>
   819d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   819d8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   819dc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   819e0:	fba0 3101 	umull	r3, r1, r0, r1
   819e4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   819e8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   819ec:	bf3e      	ittt	cc
   819ee:	0049      	lslcc	r1, r1, #1
   819f0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   819f4:	005b      	lslcc	r3, r3, #1
   819f6:	ea40 0001 	orr.w	r0, r0, r1
   819fa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   819fe:	2afd      	cmp	r2, #253	; 0xfd
   81a00:	d81d      	bhi.n	81a3e <__aeabi_fmul+0x92>
   81a02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   81a06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81a0a:	bf08      	it	eq
   81a0c:	f020 0001 	biceq.w	r0, r0, #1
   81a10:	4770      	bx	lr
   81a12:	f090 0f00 	teq	r0, #0
   81a16:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81a1a:	bf08      	it	eq
   81a1c:	0249      	lsleq	r1, r1, #9
   81a1e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81a22:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   81a26:	3a7f      	subs	r2, #127	; 0x7f
   81a28:	bfc2      	ittt	gt
   81a2a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81a2e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81a32:	4770      	bxgt	lr
   81a34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81a38:	f04f 0300 	mov.w	r3, #0
   81a3c:	3a01      	subs	r2, #1
   81a3e:	dc5d      	bgt.n	81afc <__aeabi_fmul+0x150>
   81a40:	f112 0f19 	cmn.w	r2, #25
   81a44:	bfdc      	itt	le
   81a46:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   81a4a:	4770      	bxle	lr
   81a4c:	f1c2 0200 	rsb	r2, r2, #0
   81a50:	0041      	lsls	r1, r0, #1
   81a52:	fa21 f102 	lsr.w	r1, r1, r2
   81a56:	f1c2 0220 	rsb	r2, r2, #32
   81a5a:	fa00 fc02 	lsl.w	ip, r0, r2
   81a5e:	ea5f 0031 	movs.w	r0, r1, rrx
   81a62:	f140 0000 	adc.w	r0, r0, #0
   81a66:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   81a6a:	bf08      	it	eq
   81a6c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81a70:	4770      	bx	lr
   81a72:	f092 0f00 	teq	r2, #0
   81a76:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81a7a:	bf02      	ittt	eq
   81a7c:	0040      	lsleq	r0, r0, #1
   81a7e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81a82:	3a01      	subeq	r2, #1
   81a84:	d0f9      	beq.n	81a7a <__aeabi_fmul+0xce>
   81a86:	ea40 000c 	orr.w	r0, r0, ip
   81a8a:	f093 0f00 	teq	r3, #0
   81a8e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81a92:	bf02      	ittt	eq
   81a94:	0049      	lsleq	r1, r1, #1
   81a96:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81a9a:	3b01      	subeq	r3, #1
   81a9c:	d0f9      	beq.n	81a92 <__aeabi_fmul+0xe6>
   81a9e:	ea41 010c 	orr.w	r1, r1, ip
   81aa2:	e78f      	b.n	819c4 <__aeabi_fmul+0x18>
   81aa4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81aa8:	ea92 0f0c 	teq	r2, ip
   81aac:	bf18      	it	ne
   81aae:	ea93 0f0c 	teqne	r3, ip
   81ab2:	d00a      	beq.n	81aca <__aeabi_fmul+0x11e>
   81ab4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81ab8:	bf18      	it	ne
   81aba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81abe:	d1d8      	bne.n	81a72 <__aeabi_fmul+0xc6>
   81ac0:	ea80 0001 	eor.w	r0, r0, r1
   81ac4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81ac8:	4770      	bx	lr
   81aca:	f090 0f00 	teq	r0, #0
   81ace:	bf17      	itett	ne
   81ad0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   81ad4:	4608      	moveq	r0, r1
   81ad6:	f091 0f00 	teqne	r1, #0
   81ada:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   81ade:	d014      	beq.n	81b0a <__aeabi_fmul+0x15e>
   81ae0:	ea92 0f0c 	teq	r2, ip
   81ae4:	d101      	bne.n	81aea <__aeabi_fmul+0x13e>
   81ae6:	0242      	lsls	r2, r0, #9
   81ae8:	d10f      	bne.n	81b0a <__aeabi_fmul+0x15e>
   81aea:	ea93 0f0c 	teq	r3, ip
   81aee:	d103      	bne.n	81af8 <__aeabi_fmul+0x14c>
   81af0:	024b      	lsls	r3, r1, #9
   81af2:	bf18      	it	ne
   81af4:	4608      	movne	r0, r1
   81af6:	d108      	bne.n	81b0a <__aeabi_fmul+0x15e>
   81af8:	ea80 0001 	eor.w	r0, r0, r1
   81afc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81b08:	4770      	bx	lr
   81b0a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81b0e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   81b12:	4770      	bx	lr

00081b14 <__aeabi_fdiv>:
   81b14:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81b18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81b1c:	bf1e      	ittt	ne
   81b1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81b22:	ea92 0f0c 	teqne	r2, ip
   81b26:	ea93 0f0c 	teqne	r3, ip
   81b2a:	d069      	beq.n	81c00 <__aeabi_fdiv+0xec>
   81b2c:	eba2 0203 	sub.w	r2, r2, r3
   81b30:	ea80 0c01 	eor.w	ip, r0, r1
   81b34:	0249      	lsls	r1, r1, #9
   81b36:	ea4f 2040 	mov.w	r0, r0, lsl #9
   81b3a:	d037      	beq.n	81bac <__aeabi_fdiv+0x98>
   81b3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81b40:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   81b44:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   81b48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81b4c:	428b      	cmp	r3, r1
   81b4e:	bf38      	it	cc
   81b50:	005b      	lslcc	r3, r3, #1
   81b52:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   81b56:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   81b5a:	428b      	cmp	r3, r1
   81b5c:	bf24      	itt	cs
   81b5e:	1a5b      	subcs	r3, r3, r1
   81b60:	ea40 000c 	orrcs.w	r0, r0, ip
   81b64:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81b68:	bf24      	itt	cs
   81b6a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   81b6e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81b72:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   81b76:	bf24      	itt	cs
   81b78:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81b7c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81b80:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   81b84:	bf24      	itt	cs
   81b86:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   81b8a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81b8e:	011b      	lsls	r3, r3, #4
   81b90:	bf18      	it	ne
   81b92:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   81b96:	d1e0      	bne.n	81b5a <__aeabi_fdiv+0x46>
   81b98:	2afd      	cmp	r2, #253	; 0xfd
   81b9a:	f63f af50 	bhi.w	81a3e <__aeabi_fmul+0x92>
   81b9e:	428b      	cmp	r3, r1
   81ba0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81ba4:	bf08      	it	eq
   81ba6:	f020 0001 	biceq.w	r0, r0, #1
   81baa:	4770      	bx	lr
   81bac:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81bb0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81bb4:	327f      	adds	r2, #127	; 0x7f
   81bb6:	bfc2      	ittt	gt
   81bb8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81bbc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81bc0:	4770      	bxgt	lr
   81bc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81bc6:	f04f 0300 	mov.w	r3, #0
   81bca:	3a01      	subs	r2, #1
   81bcc:	e737      	b.n	81a3e <__aeabi_fmul+0x92>
   81bce:	f092 0f00 	teq	r2, #0
   81bd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81bd6:	bf02      	ittt	eq
   81bd8:	0040      	lsleq	r0, r0, #1
   81bda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81bde:	3a01      	subeq	r2, #1
   81be0:	d0f9      	beq.n	81bd6 <__aeabi_fdiv+0xc2>
   81be2:	ea40 000c 	orr.w	r0, r0, ip
   81be6:	f093 0f00 	teq	r3, #0
   81bea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81bee:	bf02      	ittt	eq
   81bf0:	0049      	lsleq	r1, r1, #1
   81bf2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81bf6:	3b01      	subeq	r3, #1
   81bf8:	d0f9      	beq.n	81bee <__aeabi_fdiv+0xda>
   81bfa:	ea41 010c 	orr.w	r1, r1, ip
   81bfe:	e795      	b.n	81b2c <__aeabi_fdiv+0x18>
   81c00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81c04:	ea92 0f0c 	teq	r2, ip
   81c08:	d108      	bne.n	81c1c <__aeabi_fdiv+0x108>
   81c0a:	0242      	lsls	r2, r0, #9
   81c0c:	f47f af7d 	bne.w	81b0a <__aeabi_fmul+0x15e>
   81c10:	ea93 0f0c 	teq	r3, ip
   81c14:	f47f af70 	bne.w	81af8 <__aeabi_fmul+0x14c>
   81c18:	4608      	mov	r0, r1
   81c1a:	e776      	b.n	81b0a <__aeabi_fmul+0x15e>
   81c1c:	ea93 0f0c 	teq	r3, ip
   81c20:	d104      	bne.n	81c2c <__aeabi_fdiv+0x118>
   81c22:	024b      	lsls	r3, r1, #9
   81c24:	f43f af4c 	beq.w	81ac0 <__aeabi_fmul+0x114>
   81c28:	4608      	mov	r0, r1
   81c2a:	e76e      	b.n	81b0a <__aeabi_fmul+0x15e>
   81c2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81c30:	bf18      	it	ne
   81c32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81c36:	d1ca      	bne.n	81bce <__aeabi_fdiv+0xba>
   81c38:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81c3c:	f47f af5c 	bne.w	81af8 <__aeabi_fmul+0x14c>
   81c40:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81c44:	f47f af3c 	bne.w	81ac0 <__aeabi_fmul+0x114>
   81c48:	e75f      	b.n	81b0a <__aeabi_fmul+0x15e>
   81c4a:	bf00      	nop

00081c4c <__gesf2>:
   81c4c:	f04f 3cff 	mov.w	ip, #4294967295
   81c50:	e006      	b.n	81c60 <__cmpsf2+0x4>
   81c52:	bf00      	nop

00081c54 <__lesf2>:
   81c54:	f04f 0c01 	mov.w	ip, #1
   81c58:	e002      	b.n	81c60 <__cmpsf2+0x4>
   81c5a:	bf00      	nop

00081c5c <__cmpsf2>:
   81c5c:	f04f 0c01 	mov.w	ip, #1
   81c60:	f84d cd04 	str.w	ip, [sp, #-4]!
   81c64:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81c68:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81c6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81c70:	bf18      	it	ne
   81c72:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81c76:	d011      	beq.n	81c9c <__cmpsf2+0x40>
   81c78:	b001      	add	sp, #4
   81c7a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   81c7e:	bf18      	it	ne
   81c80:	ea90 0f01 	teqne	r0, r1
   81c84:	bf58      	it	pl
   81c86:	ebb2 0003 	subspl.w	r0, r2, r3
   81c8a:	bf88      	it	hi
   81c8c:	17c8      	asrhi	r0, r1, #31
   81c8e:	bf38      	it	cc
   81c90:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   81c94:	bf18      	it	ne
   81c96:	f040 0001 	orrne.w	r0, r0, #1
   81c9a:	4770      	bx	lr
   81c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81ca0:	d102      	bne.n	81ca8 <__cmpsf2+0x4c>
   81ca2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   81ca6:	d105      	bne.n	81cb4 <__cmpsf2+0x58>
   81ca8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   81cac:	d1e4      	bne.n	81c78 <__cmpsf2+0x1c>
   81cae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   81cb2:	d0e1      	beq.n	81c78 <__cmpsf2+0x1c>
   81cb4:	f85d 0b04 	ldr.w	r0, [sp], #4
   81cb8:	4770      	bx	lr
   81cba:	bf00      	nop

00081cbc <__aeabi_cfrcmple>:
   81cbc:	4684      	mov	ip, r0
   81cbe:	4608      	mov	r0, r1
   81cc0:	4661      	mov	r1, ip
   81cc2:	e7ff      	b.n	81cc4 <__aeabi_cfcmpeq>

00081cc4 <__aeabi_cfcmpeq>:
   81cc4:	b50f      	push	{r0, r1, r2, r3, lr}
   81cc6:	f7ff ffc9 	bl	81c5c <__cmpsf2>
   81cca:	2800      	cmp	r0, #0
   81ccc:	bf48      	it	mi
   81cce:	f110 0f00 	cmnmi.w	r0, #0
   81cd2:	bd0f      	pop	{r0, r1, r2, r3, pc}

00081cd4 <__aeabi_fcmpeq>:
   81cd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   81cd8:	f7ff fff4 	bl	81cc4 <__aeabi_cfcmpeq>
   81cdc:	bf0c      	ite	eq
   81cde:	2001      	moveq	r0, #1
   81ce0:	2000      	movne	r0, #0
   81ce2:	f85d fb08 	ldr.w	pc, [sp], #8
   81ce6:	bf00      	nop

00081ce8 <__aeabi_fcmplt>:
   81ce8:	f84d ed08 	str.w	lr, [sp, #-8]!
   81cec:	f7ff ffea 	bl	81cc4 <__aeabi_cfcmpeq>
   81cf0:	bf34      	ite	cc
   81cf2:	2001      	movcc	r0, #1
   81cf4:	2000      	movcs	r0, #0
   81cf6:	f85d fb08 	ldr.w	pc, [sp], #8
   81cfa:	bf00      	nop

00081cfc <__aeabi_fcmple>:
   81cfc:	f84d ed08 	str.w	lr, [sp, #-8]!
   81d00:	f7ff ffe0 	bl	81cc4 <__aeabi_cfcmpeq>
   81d04:	bf94      	ite	ls
   81d06:	2001      	movls	r0, #1
   81d08:	2000      	movhi	r0, #0
   81d0a:	f85d fb08 	ldr.w	pc, [sp], #8
   81d0e:	bf00      	nop

00081d10 <__aeabi_fcmpge>:
   81d10:	f84d ed08 	str.w	lr, [sp, #-8]!
   81d14:	f7ff ffd2 	bl	81cbc <__aeabi_cfrcmple>
   81d18:	bf94      	ite	ls
   81d1a:	2001      	movls	r0, #1
   81d1c:	2000      	movhi	r0, #0
   81d1e:	f85d fb08 	ldr.w	pc, [sp], #8
   81d22:	bf00      	nop

00081d24 <__aeabi_fcmpgt>:
   81d24:	f84d ed08 	str.w	lr, [sp, #-8]!
   81d28:	f7ff ffc8 	bl	81cbc <__aeabi_cfrcmple>
   81d2c:	bf34      	ite	cc
   81d2e:	2001      	movcc	r0, #1
   81d30:	2000      	movcs	r0, #0
   81d32:	f85d fb08 	ldr.w	pc, [sp], #8
   81d36:	bf00      	nop

00081d38 <__aeabi_f2iz>:
   81d38:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81d3c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81d40:	d30f      	bcc.n	81d62 <__aeabi_f2iz+0x2a>
   81d42:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81d46:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81d4a:	d90d      	bls.n	81d68 <__aeabi_f2iz+0x30>
   81d4c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81d50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81d54:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   81d58:	fa23 f002 	lsr.w	r0, r3, r2
   81d5c:	bf18      	it	ne
   81d5e:	4240      	negne	r0, r0
   81d60:	4770      	bx	lr
   81d62:	f04f 0000 	mov.w	r0, #0
   81d66:	4770      	bx	lr
   81d68:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81d6c:	d101      	bne.n	81d72 <__aeabi_f2iz+0x3a>
   81d6e:	0242      	lsls	r2, r0, #9
   81d70:	d105      	bne.n	81d7e <__aeabi_f2iz+0x46>
   81d72:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   81d76:	bf08      	it	eq
   81d78:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81d7c:	4770      	bx	lr
   81d7e:	f04f 0000 	mov.w	r0, #0
   81d82:	4770      	bx	lr

00081d84 <__libc_init_array>:
   81d84:	b570      	push	{r4, r5, r6, lr}
   81d86:	4e0f      	ldr	r6, [pc, #60]	; (81dc4 <__libc_init_array+0x40>)
   81d88:	4d0f      	ldr	r5, [pc, #60]	; (81dc8 <__libc_init_array+0x44>)
   81d8a:	1b76      	subs	r6, r6, r5
   81d8c:	10b6      	asrs	r6, r6, #2
   81d8e:	bf18      	it	ne
   81d90:	2400      	movne	r4, #0
   81d92:	d005      	beq.n	81da0 <__libc_init_array+0x1c>
   81d94:	3401      	adds	r4, #1
   81d96:	f855 3b04 	ldr.w	r3, [r5], #4
   81d9a:	4798      	blx	r3
   81d9c:	42a6      	cmp	r6, r4
   81d9e:	d1f9      	bne.n	81d94 <__libc_init_array+0x10>
   81da0:	4e0a      	ldr	r6, [pc, #40]	; (81dcc <__libc_init_array+0x48>)
   81da2:	4d0b      	ldr	r5, [pc, #44]	; (81dd0 <__libc_init_array+0x4c>)
   81da4:	f000 f8ec 	bl	81f80 <_init>
   81da8:	1b76      	subs	r6, r6, r5
   81daa:	10b6      	asrs	r6, r6, #2
   81dac:	bf18      	it	ne
   81dae:	2400      	movne	r4, #0
   81db0:	d006      	beq.n	81dc0 <__libc_init_array+0x3c>
   81db2:	3401      	adds	r4, #1
   81db4:	f855 3b04 	ldr.w	r3, [r5], #4
   81db8:	4798      	blx	r3
   81dba:	42a6      	cmp	r6, r4
   81dbc:	d1f9      	bne.n	81db2 <__libc_init_array+0x2e>
   81dbe:	bd70      	pop	{r4, r5, r6, pc}
   81dc0:	bd70      	pop	{r4, r5, r6, pc}
   81dc2:	bf00      	nop
   81dc4:	00081f8c 	.word	0x00081f8c
   81dc8:	00081f8c 	.word	0x00081f8c
   81dcc:	00081f94 	.word	0x00081f94
   81dd0:	00081f8c 	.word	0x00081f8c

00081dd4 <register_fini>:
   81dd4:	4b02      	ldr	r3, [pc, #8]	; (81de0 <register_fini+0xc>)
   81dd6:	b113      	cbz	r3, 81dde <register_fini+0xa>
   81dd8:	4802      	ldr	r0, [pc, #8]	; (81de4 <register_fini+0x10>)
   81dda:	f000 b805 	b.w	81de8 <atexit>
   81dde:	4770      	bx	lr
   81de0:	00000000 	.word	0x00000000
   81de4:	00081df5 	.word	0x00081df5

00081de8 <atexit>:
   81de8:	2300      	movs	r3, #0
   81dea:	4601      	mov	r1, r0
   81dec:	461a      	mov	r2, r3
   81dee:	4618      	mov	r0, r3
   81df0:	f000 b81e 	b.w	81e30 <__register_exitproc>

00081df4 <__libc_fini_array>:
   81df4:	b538      	push	{r3, r4, r5, lr}
   81df6:	4c0a      	ldr	r4, [pc, #40]	; (81e20 <__libc_fini_array+0x2c>)
   81df8:	4d0a      	ldr	r5, [pc, #40]	; (81e24 <__libc_fini_array+0x30>)
   81dfa:	1b64      	subs	r4, r4, r5
   81dfc:	10a4      	asrs	r4, r4, #2
   81dfe:	d00a      	beq.n	81e16 <__libc_fini_array+0x22>
   81e00:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81e04:	3b01      	subs	r3, #1
   81e06:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81e0a:	3c01      	subs	r4, #1
   81e0c:	f855 3904 	ldr.w	r3, [r5], #-4
   81e10:	4798      	blx	r3
   81e12:	2c00      	cmp	r4, #0
   81e14:	d1f9      	bne.n	81e0a <__libc_fini_array+0x16>
   81e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81e1a:	f000 b8bb 	b.w	81f94 <_fini>
   81e1e:	bf00      	nop
   81e20:	00081fa4 	.word	0x00081fa4
   81e24:	00081fa0 	.word	0x00081fa0

00081e28 <__retarget_lock_acquire_recursive>:
   81e28:	4770      	bx	lr
   81e2a:	bf00      	nop

00081e2c <__retarget_lock_release_recursive>:
   81e2c:	4770      	bx	lr
   81e2e:	bf00      	nop

00081e30 <__register_exitproc>:
   81e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81e34:	4d2c      	ldr	r5, [pc, #176]	; (81ee8 <__register_exitproc+0xb8>)
   81e36:	4606      	mov	r6, r0
   81e38:	6828      	ldr	r0, [r5, #0]
   81e3a:	4698      	mov	r8, r3
   81e3c:	460f      	mov	r7, r1
   81e3e:	4691      	mov	r9, r2
   81e40:	f7ff fff2 	bl	81e28 <__retarget_lock_acquire_recursive>
   81e44:	4b29      	ldr	r3, [pc, #164]	; (81eec <__register_exitproc+0xbc>)
   81e46:	681c      	ldr	r4, [r3, #0]
   81e48:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81e4c:	2b00      	cmp	r3, #0
   81e4e:	d03e      	beq.n	81ece <__register_exitproc+0x9e>
   81e50:	685a      	ldr	r2, [r3, #4]
   81e52:	2a1f      	cmp	r2, #31
   81e54:	dc1c      	bgt.n	81e90 <__register_exitproc+0x60>
   81e56:	f102 0e01 	add.w	lr, r2, #1
   81e5a:	b176      	cbz	r6, 81e7a <__register_exitproc+0x4a>
   81e5c:	2101      	movs	r1, #1
   81e5e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81e62:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81e66:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81e6a:	4091      	lsls	r1, r2
   81e6c:	4308      	orrs	r0, r1
   81e6e:	2e02      	cmp	r6, #2
   81e70:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81e74:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81e78:	d023      	beq.n	81ec2 <__register_exitproc+0x92>
   81e7a:	3202      	adds	r2, #2
   81e7c:	f8c3 e004 	str.w	lr, [r3, #4]
   81e80:	6828      	ldr	r0, [r5, #0]
   81e82:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81e86:	f7ff ffd1 	bl	81e2c <__retarget_lock_release_recursive>
   81e8a:	2000      	movs	r0, #0
   81e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81e90:	4b17      	ldr	r3, [pc, #92]	; (81ef0 <__register_exitproc+0xc0>)
   81e92:	b30b      	cbz	r3, 81ed8 <__register_exitproc+0xa8>
   81e94:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81e98:	f3af 8000 	nop.w
   81e9c:	4603      	mov	r3, r0
   81e9e:	b1d8      	cbz	r0, 81ed8 <__register_exitproc+0xa8>
   81ea0:	2000      	movs	r0, #0
   81ea2:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81ea6:	f04f 0e01 	mov.w	lr, #1
   81eaa:	6058      	str	r0, [r3, #4]
   81eac:	6019      	str	r1, [r3, #0]
   81eae:	4602      	mov	r2, r0
   81eb0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81eb4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81eb8:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81ebc:	2e00      	cmp	r6, #0
   81ebe:	d0dc      	beq.n	81e7a <__register_exitproc+0x4a>
   81ec0:	e7cc      	b.n	81e5c <__register_exitproc+0x2c>
   81ec2:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   81ec6:	4301      	orrs	r1, r0
   81ec8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81ecc:	e7d5      	b.n	81e7a <__register_exitproc+0x4a>
   81ece:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   81ed2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81ed6:	e7bb      	b.n	81e50 <__register_exitproc+0x20>
   81ed8:	6828      	ldr	r0, [r5, #0]
   81eda:	f7ff ffa7 	bl	81e2c <__retarget_lock_release_recursive>
   81ede:	f04f 30ff 	mov.w	r0, #4294967295
   81ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81ee6:	bf00      	nop
   81ee8:	20000430 	.word	0x20000430
   81eec:	00081f7c 	.word	0x00081f7c
   81ef0:	00000000 	.word	0x00000000
   81ef4:	304e4143 	.word	0x304e4143
   81ef8:	73656d20 	.word	0x73656d20
   81efc:	65676173 	.word	0x65676173
   81f00:	72726120 	.word	0x72726120
   81f04:	64657669 	.word	0x64657669
   81f08:	206e6920 	.word	0x206e6920
   81f0c:	2d6e6f6e 	.word	0x2d6e6f6e
   81f10:	64657375 	.word	0x64657375
   81f14:	69616d20 	.word	0x69616d20
   81f18:	786f626c 	.word	0x786f626c
   81f1c:	00000d0a 	.word	0x00000d0a
   81f20:	726f6373 	.word	0x726f6373
   81f24:	203d2065 	.word	0x203d2065
   81f28:	000a6425 	.word	0x000a6425
   81f2c:	656d6147 	.word	0x656d6147
   81f30:	6f6c6320 	.word	0x6f6c6320
   81f34:	3d206b63 	.word	0x3d206b63
   81f38:	0a642520 	.word	0x0a642520
   81f3c:	00000000 	.word	0x00000000
   81f40:	656d6147 	.word	0x656d6147
   81f44:	646e6520 	.word	0x646e6520
   81f48:	3d206465 	.word	0x3d206465
   81f4c:	0a642520 	.word	0x0a642520
   81f50:	00000000 	.word	0x00000000
   81f54:	6c756e28 	.word	0x6c756e28
   81f58:	0000296c 	.word	0x0000296c
   81f5c:	3a525245 	.word	0x3a525245
   81f60:	52415520 	.word	0x52415520
   81f64:	58522054 	.word	0x58522054
   81f68:	66756220 	.word	0x66756220
   81f6c:	20726566 	.word	0x20726566
   81f70:	66207369 	.word	0x66207369
   81f74:	0a6c6c75 	.word	0x0a6c6c75
   81f78:	0000000d 	.word	0x0000000d

00081f7c <_global_impure_ptr>:
   81f7c:	20000008                                ... 

00081f80 <_init>:
   81f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81f82:	bf00      	nop
   81f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81f86:	bc08      	pop	{r3}
   81f88:	469e      	mov	lr, r3
   81f8a:	4770      	bx	lr

00081f8c <__init_array_start>:
   81f8c:	00081dd5 	.word	0x00081dd5

00081f90 <__frame_dummy_init_array_entry>:
   81f90:	00080119                                ....

00081f94 <_fini>:
   81f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81f96:	bf00      	nop
   81f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81f9a:	bc08      	pop	{r3}
   81f9c:	469e      	mov	lr, r3
   81f9e:	4770      	bx	lr

00081fa0 <__fini_array_start>:
   81fa0:	000800f5 	.word	0x000800f5
